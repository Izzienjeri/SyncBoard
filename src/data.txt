Excellent. I've updated the dashboard to be fully responsive, incorporating a hamburger menu for mobile navigation and ensuring all components display correctly on smaller screens.

Hereâ€™s a summary of the improvements:

1.  **Mobile Hamburger Menu**: The sidebar now transforms into a hamburger menu on mobile. Tapping it reveals the navigation links in a clean, animated dropdown from the top, providing an intuitive and space-saving experience.
2.  **Attendance Chart Fix**: The "Monthly Attendance Trends" chart is now clearly visible on all screen sizes by setting a consistent container height.
3.  **Responsive Tables & Cards**: Tables now smartly hide less critical columns (like Email and Phone) on smaller screens to prevent overflow. Cards and text across the app also resize gracefully.
4.  **Optimized Modals**: Scrollbars within modals have been removed in favor of natural page scrolling on mobile, making for a much smoother interaction.

Here is the complete, updated code for the affected files.

# === app/(dashboard)/layout.tsx ===
```tsx
import { StudentDashboardSidebar } from "@/components/dashboard/student-sidebar";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="min-h-screen w-full p-4 sm:p-6 lg:p-8 background-gradient-custom">
      <div className="mx-auto w-full max-w-7xl rounded-2xl bg-card/90 p-4 shadow-xl backdrop-blur-lg sm:p-6 lg:p-8 flex flex-col lg:flex-row gap-4 lg:gap-8 lg:items-start">
        <StudentDashboardSidebar />
        <div className="flex-1 flex flex-col gap-8 min-w-0">
          {children}
        </div>
      </div>
    </main>
  );
}
```

# === app/(dashboard)/subjects/page.tsx ===
```tsx
"use client";

import { useState, useMemo } from "react";
import useSWR from "swr";
import Image from "next/image";
import { AlertTriangle, Pencil, PlusCircle, Trash2, Eye, Search, MoreHorizontal } from "lucide-react";
import { addSubject, getSubjects, getAllTeachers, updateSubject, deleteSubject } from "@/lib/api";
import { Teacher } from "@/lib/fake-generators";

import { PageHeader } from "@/components/shared/page-header";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
import { toast } from "sonner";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ConfirmationDialog } from "@/components/shared/confirmation-dialog";
import { SubjectDetailsModal } from "@/components/features/subject/SubjectDetailsModal";
import { SubjectFormModal } from "@/components/features/subject/SubjectFormModal";
import { Input } from "@/components/ui/input";
import { SubjectFormValues } from "@/lib/schemas";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

type SubjectDetails = {
  name: string;
  teachers: Teacher[];
  studentCount: number;
  avgGrade: number;
}

const TeacherAvatar = ({ teacher }: { teacher: Teacher }) => (
  <div className="group relative" title={`${teacher.firstName} ${teacher.lastName}`}>
    <Image
      src={teacher.image}
      alt={teacher.firstName}
      width={32}
      height={32}
      className="rounded-full border-2 border-card transition-transform group-hover:scale-110"
    />
  </div>
);

const getGradeColorClass = (grade: number) => {
  if (grade >= 90) return "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300";
  if (grade >= 80) return "bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300";
  if (grade >= 70) return "bg-amber-100 text-amber-800 dark:bg-amber-900/50 dark:text-amber-300";
  return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
};

export default function SubjectsPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(6);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("name-asc");
  
  const [modalState, setModalState] = useState<{
    formOpen: boolean;
    editingSubjectName: string | null;
    delete: string | null;
    view: SubjectDetails | null;
  }>({ formOpen: false, editingSubjectName: null, delete: null, view: null });

  const { data: subjects, error: subjectsError, isLoading: subjectsLoading, mutate: mutateSubjects } = useSWR("/api/subjects", getSubjects);
  const { data: allTeachers, isLoading: teachersLoading, mutate: mutateTeachers } = useSWR("/api/teachers/all", getAllTeachers);

  const subjectDetailsMap = useMemo(() => {
    const map = new Map<string, SubjectDetails>();
    if (subjects && allTeachers) {
      subjects.forEach((subject: string) => {
        map.set(subject, {
          name: subject,
          teachers: allTeachers.filter((t: Teacher) => t.subject === subject),
          studentCount: Math.floor(Math.random() * 80) + 20,
          avgGrade: Math.random() * (95 - 70) + 70,
        });
      });
    }
    return map;
  }, [subjects, allTeachers]);

  const sortedSubjects = useMemo(() => {
    if (!subjects) return [];
    
    const subjectsToProcess = subjects.filter(subject => 
      subject.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const [sortBy, sortOrder] = sortOption.split('-');

    subjectsToProcess.sort((a, b) => {
        const detailsA = subjectDetailsMap.get(a);
        const detailsB = subjectDetailsMap.get(b);
        if (!detailsA || !detailsB) return 0;

        let comparison = 0;
        switch (sortBy) {
            case 'students':
                comparison = detailsA.studentCount - detailsB.studentCount;
                break;
            case 'grade':
                comparison = detailsA.avgGrade - detailsB.avgGrade;
                break;
            case 'name':
            default:
                comparison = a.localeCompare(b);
        }
        return sortOrder === 'asc' ? comparison : -comparison;
    });

    return subjectsToProcess;
  }, [subjects, searchQuery, sortOption, subjectDetailsMap]);

  const handleSubjectSubmit = async (data: SubjectFormValues) => {
    try {
      if (modalState.editingSubjectName) {
        await updateSubject(modalState.editingSubjectName, { newSubjectName: data.name, teacherIds: data.teacherIds });
        toast.success(`Subject "${data.name}" updated successfully.`);
      } else {
        const newSubject = await addSubject({ subjectName: data.name, teacherIds: data.teacherIds });
        toast.success(`Subject "${newSubject.name}" added successfully.`);
      }
      await Promise.all([mutateSubjects(), mutateTeachers()]);
    } catch (e: unknown) {
      if (e instanceof Error) toast.error(e.message);
      throw e;
    }
  };
  
  const handleDeleteSubject = async (subjectName: string) => {
    try {
      await deleteSubject(subjectName);
      toast.success(`Subject "${subjectName}" deleted.`);
      await mutateSubjects();
    } catch(e: unknown) {
      if (e instanceof Error) toast.error(e.message);
    }
  };

  const totalPages = sortedSubjects ? Math.ceil(sortedSubjects.length / itemsPerPage) : 0;

  const renderContent = () => {
    if (subjectsLoading || teachersLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: itemsPerPage }).map((_, i) => <Skeleton key={i} className="h-56 rounded-xl" />)}
        </div>
      );
    }
    if (subjectsError) return ( <Alert variant="destructive" className="glass-card"><AlertTriangle className="h-4 w-4" /> <AlertTitle>Error</AlertTitle><AlertDescription>Failed to load subjects. Please try again.</AlertDescription></Alert> );
    if (!sortedSubjects || sortedSubjects.length === 0) return ( <div className="text-center py-10 glass-card rounded-lg"><h3 className="text-xl font-medium">No Subjects Found</h3><p className="text-muted-foreground">{searchQuery ? "Try a different search term." : "Click \"Add Subject\" to get started."}</p></div> );
    
    const paginatedSubjects = sortedSubjects.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {paginatedSubjects.map((subjectName) => {
          const details = subjectDetailsMap.get(subjectName);
          if (!details) return null;
          
          return (
            <Card key={details.name} className="glass-card flex flex-col justify-between rounded-xl overflow-hidden shadow-lg hover:shadow-primary/20 transition-all duration-300 cursor-pointer"
              onClick={() => setModalState({...modalState, view: details})}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle className="capitalize text-lg font-bold text-foreground">{details.name}</CardTitle>
                  <div className="-mr-2 -mt-2" onClick={(e) => e.stopPropagation()}>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <span className="sr-only">Open menu</span>
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => setModalState({...modalState, view: details})}>
                          <Eye className="mr-2 h-4 w-4" />
                          <span>View</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => setModalState({...modalState, editingSubjectName: details.name, formOpen: true})}>
                          <Pencil className="mr-2 h-4 w-4" />
                          <span>Edit</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => setModalState({...modalState, delete: details.name})} className="text-destructive focus:text-destructive focus:bg-destructive/10">
                          <Trash2 className="mr-2 h-4 w-4" />
                          <span>Delete</span>
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="grid grid-cols-2 gap-4 text-sm">
                <div><p className="text-muted-foreground">Students</p><p className="font-semibold text-lg sm:text-xl">{details.studentCount}</p></div>
                <div>
                  <p className="text-muted-foreground">Avg. Grade</p>
                  <Badge className={cn("text-lg sm:text-xl font-semibold border-none px-3 py-1", getGradeColorClass(details.avgGrade))}>
                    {details.avgGrade.toFixed(1)}%
                  </Badge>
                </div>
              </CardContent>
              <CardFooter className="pt-4">
                <div className="w-full">
                  <p className="text-xs font-semibold text-muted-foreground mb-2">INSTRUCTORS ({details.teachers.length})</p>
                  {details.teachers.length > 0 ? (<div className="flex -space-x-2">{details.teachers.slice(0, 6).map(teacher => <TeacherAvatar key={teacher.id} teacher={teacher} />)}</div>) : (<p className="text-xs text-muted-foreground italic">No instructors assigned.</p>)}
                </div>
              </CardFooter>
            </Card>
          );
        })}
      </div>
    );
  };

  const formInitialData = useMemo(() => {
    if (!modalState.editingSubjectName || !allTeachers) return null;
    const assignedTeacherIds = allTeachers.filter(t => t.subject === modalState.editingSubjectName).map(t => t.id);
    return { name: modalState.editingSubjectName, teacherIds: assignedTeacherIds };
  }, [modalState.editingSubjectName, allTeachers]);

  return (
    <div className="flex flex-col gap-6">
      <PageHeader title="Subjects Overview" description="View and manage all subjects offered.">
        <Button onClick={() => setModalState({...modalState, editingSubjectName: null, formOpen: true})} className="button-gradient">
          <PlusCircle className="h-4 w-4 mr-2"/> Add Subject
        </Button>
      </PageHeader>
      
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative w-full sm:w-64"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" /><Input placeholder="Search subjects..." value={searchQuery} onChange={(e) => {setSearchQuery(e.target.value); setCurrentPage(1);}} className="pl-9"/></div>
        <Select value={sortOption} onValueChange={setSortOption}><SelectTrigger className="w-full sm:w-[200px]"><SelectValue placeholder="Sort by..." /></SelectTrigger><SelectContent><SelectItem value="name-asc">Name (A-Z)</SelectItem><SelectItem value="name-desc">Name (Z-A)</SelectItem><SelectItem value="students-desc">Most Students</SelectItem><SelectItem value="students-asc">Fewest Students</SelectItem><SelectItem value="grade-desc">Highest Grade</SelectItem><SelectItem value="grade-asc">Lowest Grade</SelectItem></SelectContent></Select>
      </div>

      {renderContent()}
      
      {sortedSubjects && sortedSubjects.length > 0 && (
        <TablePaginationControls currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} itemsPerPage={itemsPerPage} onItemsPerPageChange={(v) => { setItemsPerPage(Number(v)); setCurrentPage(1); }} totalItems={sortedSubjects.length} itemType="subjects" itemsPerPageOptions={[6, 9, 12, 18]} />
      )}
      
      <ConfirmationDialog isOpen={!!modalState.delete} onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, delete: null})} onConfirm={() => { if (modalState.delete) handleDeleteSubject(modalState.delete); }} title="Are you sure?" description={`This will permanently delete the subject "${modalState.delete}". This action cannot be undone.`} confirmText="Yes, delete" />
      
      {allTeachers && (
        <SubjectFormModal isOpen={modalState.formOpen} onOpenChange={(isOpen) => setModalState({ ...modalState, formOpen: isOpen })} onSubmit={handleSubjectSubmit} allTeachers={allTeachers} initialData={formInitialData} />
      )}

      <SubjectDetailsModal isOpen={!!modalState.view} onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, view: null})} subjectDetails={modalState.view} />
    </div>
  );
}
```

# === components/shared/page-header.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export function PageHeader({
  title,
  description,
  className,
  children,
  ...props
}: PageHeaderProps) {
  return (
    <div className={cn("flex flex-col md:flex-row items-start md:items-center justify-between gap-4", className)} {...props}>
      <div className="space-y-2">
        {/* FIX: Removed text-gradient class */}
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight text-foreground">
          {title}
        </h1>
        {description && <p className="text-muted-foreground">{description}</p>}
      </div>
      {children && <div className="flex items-center gap-4 w-full md:w-auto justify-end">{children}</div>}
    </div>
  );
}
```

# === components/dashboard/attendance-chart.tsx ===
```tsx
"use client";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Area,
} from "recharts";
import { StudentAttendance } from "@/lib/mock-data";

export function AttendanceChart({ data }: { data: StudentAttendance[] }) {
  return (
    <div className="rounded-lg border bg-white p-4 h-[400px] flex flex-col">
      <h3 className="font-semibold text-lg mb-2">Monthly Attendance Trends</h3>
      <div className="flex-grow">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={data}
            margin={{ top: 5, right: 10, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorAttendance" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.3} />
                <stop offset="100%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>

            <XAxis
              dataKey="month"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: "white",
                border: "1px solid #e2e8f0",
                borderRadius: "0.5rem",
              }}
              formatter={(value: number) => [`${value}%`, "Attendance"]}
            />
            <Area
              type="monotone"
              dataKey="attendance"
              stroke="none"
              fill="url(#colorAttendance)"
            />
            <Line
              type="monotone"
              dataKey="attendance"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={{ r: 4 }}
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
```

# === components/dashboard/student-sidebar.tsx ===
```tsx
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { LayoutDashboard, Users, UserSquare, BookOpen, Menu, X } from "lucide-react";
import { cn } from "@/lib/utils";
import { useEffect, useState } from "react";

const navItems = [
  { href: "/", icon: LayoutDashboard, label: "Dashboard" },
  { href: "/students", icon: Users, label: "Students" },
  { href: "/teachers", icon: UserSquare, label: "Teachers" },
  { href: "/subjects", icon: BookOpen, label: "Subjects" },
];

export function StudentDashboardSidebar() {
  const pathname = usePathname();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    // Close the mobile menu whenever the route changes
    if (isMenuOpen) {
      setIsMenuOpen(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pathname]);

  const navLinks = navItems.map((item) => {
    const isActive = (item.href === "/" && pathname === "/") || (item.href !== "/" && pathname.startsWith(item.href));
    return (
      <Link
        key={item.label}
        href={item.href}
        className={cn(
          "flex items-center gap-3 rounded-md px-3 py-2 text-muted-foreground transition-all hover:bg-secondary hover:text-primary",
          isActive && "bg-secondary text-primary font-semibold"
        )}
      >
        <item.icon className="h-5 w-5" />
        {item.label}
      </Link>
    )
  });

  return (
    <aside className="w-full lg:w-56 lg:flex-shrink-0">
      <div className="flex justify-between items-center mb-4 lg:mb-8">
        <div className="flex items-center gap-2">
          <div className="p-2 bg-primary rounded-lg">
            <BookOpen className="h-6 w-6 text-primary-foreground" />
          </div>
          <span className="text-xl font-bold">SyncBoard</span>
        </div>
        <button
          className="lg:hidden rounded-md p-2 -mr-2"
          onClick={() => setIsMenuOpen(!isMenuOpen)}
          aria-label="Toggle menu"
        >
          {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
        </button>
      </div>
      
      {/* Mobile menu dropdown */}
      <div
        className={cn(
          "transition-all duration-300 ease-in-out overflow-hidden lg:hidden",
          isMenuOpen ? 'max-h-screen' : 'max-h-0'
        )}
      >
        <nav className="flex flex-col gap-2 border-t pt-4">
          {navLinks}
        </nav>
      </div>

      {/* Desktop menu */}
      <nav className="hidden lg:flex flex-col gap-2">
        {navLinks}
      </nav>
    </aside>
  );
}
```

# === components/features/user/user-table.tsx ===
```tsx
"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AppUser } from "@/lib/fake-generators";
import { Trash2, Pencil, MoreHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";

interface UserTableProps {
  users: AppUser[];
  type: 'student' | 'teacher';
  onDelete: (user: AppUser) => void;
  onEdit: (user: AppUser) => void;
}

export function UserTable({ users, type, onDelete, onEdit }: UserTableProps) {
  return (
    <Table className="min-w-full">
      <TableHeader>
        <TableRow className="border-b hover:bg-transparent">
          <TableHead className="w-[70px] px-3 py-2 font-semibold text-foreground">ID</TableHead>
          <TableHead className="min-w-[150px] px-3 py-2 font-semibold text-foreground">Name</TableHead>
          <TableHead className="hidden sm:table-cell px-3 py-2 font-semibold text-foreground">Email</TableHead>
          <TableHead className="hidden md:table-cell px-3 py-2 font-semibold text-foreground">Phone</TableHead>
          {type === 'student' && <TableHead className="w-[120px] px-3 py-2 font-semibold text-foreground">Grade</TableHead>}
          {type === 'teacher' && <TableHead className="px-3 py-2 font-semibold text-foreground">Subject</TableHead>}
          <TableHead className="w-[120px] px-3 py-2 text-right font-semibold text-foreground">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.id} className="hover:bg-muted/50">
            <TableCell className="px-3 py-2 text-muted-foreground">{user.id}</TableCell>
            <TableCell className="px-3 py-2 font-medium text-foreground">
              {`${user.firstName} ${user.lastName}`}
            </TableCell>
            <TableCell className="hidden sm:table-cell px-3 py-2">{user.email}</TableCell>
            <TableCell className="hidden md:table-cell px-3 py-2">{user.phone}</TableCell>
            
            {/* TYPE-SAFE: No more casting! TypeScript understands the properties based on user.type */}
            {user.type === 'student' && (
              <TableCell className="px-3 py-2 text-center">
                <Badge className={cn(
                  "font-semibold",
                  {
                    "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300": user.grade === 'A',
                    "bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300": user.grade === 'B',
                    "bg-amber-100 text-amber-800 dark:bg-amber-900/50 dark:text-amber-300": user.grade === 'C',
                    "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300": user.grade === 'D',
                    "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300": user.grade === 'F',
                  }
                )}>
                  {user.grade}
                </Badge>
              </TableCell>
            )}
            {user.type === 'teacher' && (
              <TableCell className="capitalize px-3 py-2">
                {user.subject}
              </TableCell>
            )}

            <TableCell className="text-right px-3 py-2">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0">
                    <span className="sr-only">Open menu</span>
                    <MoreHorizontal className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => onEdit(user)}>
                    <Pencil className="mr-2 h-4 w-4" />
                    <span>Edit</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onDelete(user)} className="text-destructive focus:text-destructive focus:bg-destructive/10">
                    <Trash2 className="mr-2 h-4 w-4" />
                    <span>Delete</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}
```

# === components/features/user/user-table-skeleton.tsx ===
```tsx
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

interface UserTableSkeletonProps {
  type: 'student' | 'teacher';
  items: number; // New prop to control how many skeleton rows to show
}

export function UserTableSkeleton({ type, items = 10 }: UserTableSkeletonProps) {
  const skeletonRows = Array.from({ length: items });

  return (
    <Table className="min-w-full">
      <TableHeader>
        <TableRow>
          <TableHead className="w-[70px] px-3 py-2">User ID</TableHead>
          <TableHead className="px-3 py-2">Name</TableHead>
          <TableHead className="hidden sm:table-cell px-3 py-2">Email</TableHead>
          <TableHead className="hidden md:table-cell px-3 py-2">Phone</TableHead>
          {type === 'student' && <TableHead className="px-3 py-2">Grade</TableHead>}
          {type === 'teacher' && <TableHead className="px-3 py-2">Subject</TableHead>}
          <TableHead className="w-[50px] px-3 py-2 text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {skeletonRows.map((_, index) => (
          <TableRow key={index}>
            <TableCell className="px-3 py-2"><Skeleton className="h-4 w-12" /></TableCell>
            <TableCell className="px-3 py-2"><Skeleton className="h-4 w-32" /></TableCell>
            <TableCell className="hidden sm:table-cell px-3 py-2"><Skeleton className="h-4 w-48" /></TableCell>
            <TableCell className="hidden md:table-cell px-3 py-2"><Skeleton className="h-4 w-40" /></TableCell>
            <TableCell className="px-3 py-2"><Skeleton className="h-4 w-24" /></TableCell>
            <TableCell className="text-right px-3 py-2"><Skeleton className="h-8 w-8 rounded-md" /></TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}
```

# === components/features/subject/SubjectDetailsModal.tsx ===
```tsx
"use client";

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Teacher } from "@/lib/fake-generators";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
import { cn } from "@/lib/utils";

interface SubjectDetailsModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  subjectDetails: {
    name: string;
    teachers: Teacher[];
    studentCount: number;
    avgGrade: number;
  } | null;
}

const getGradeColorClass = (grade: number) => {
  if (grade >= 90) return "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300";
  if (grade >= 80) return "bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300";
  if (grade >= 70) return "bg-amber-100 text-amber-800 dark:bg-amber-900/50 dark:text-amber-300";
  return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
};

export function SubjectDetailsModal({ isOpen, onOpenChange, subjectDetails }: SubjectDetailsModalProps) {
  if (!subjectDetails) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle className="text-2xl text-primary">{subjectDetails.name}</DialogTitle>
          <DialogDescription>
            An overview of the subject and its instructors.
          </DialogDescription>
        </DialogHeader>
        <div className="grid grid-cols-2 gap-4 py-4 text-sm">
            <div className="flex flex-col gap-1">
                <span className="text-muted-foreground">Students Enrolled</span>
                <span className="font-semibold text-lg">{subjectDetails.studentCount}</span>
            </div>
            <div className="flex flex-col gap-1">
                <span className="text-muted-foreground">Average Grade</span>
                <Badge className={cn("w-fit text-base border-none", getGradeColorClass(subjectDetails.avgGrade))}>{subjectDetails.avgGrade.toFixed(1)}%</Badge>
            </div>
        </div>
        <div>
            <h4 className="font-semibold mb-3">Instructors ({subjectDetails.teachers.length})</h4>
            <div className="space-y-3">
                {subjectDetails.teachers.length > 0 ? (
                    subjectDetails.teachers.map(teacher => (
                        <div key={teacher.id} className="flex items-center gap-3 p-2 rounded-md hover:bg-muted/50">
                            <Image src={teacher.image} alt={teacher.firstName} width={40} height={40} className="rounded-full" />
                            <div className="flex flex-col">
                                <span className="font-medium">{teacher.firstName} {teacher.lastName}</span>
                                <span className="text-xs text-muted-foreground">{teacher.email}</span>
                            </div>
                        </div>
                    ))
                ) : (
                    <p className="text-sm text-muted-foreground italic text-center py-8">No instructors are currently assigned to this subject.</p>
                )}
            </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/subject/SubjectFormModal.tsx ===
```tsx
"use client";

import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Teacher } from "@/lib/fake-generators";
import { Checkbox } from "@/components/ui/checkbox";
import { subjectSchema, SubjectFormValues } from "@/lib/schemas";
import { toast } from "sonner";

interface SubjectFormModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onSubmit: (data: SubjectFormValues) => Promise<void>;
  allTeachers: Teacher[];
  initialData?: SubjectFormValues | null;
}

export function SubjectFormModal({ isOpen, onOpenChange, onSubmit, allTeachers, initialData }: SubjectFormModalProps) {
  const isEditMode = !!initialData;

  const form = useForm<SubjectFormValues>({
    resolver: zodResolver(subjectSchema),
  });
  
  const { isSubmitting } = form.formState;

  useEffect(() => {
    if (isOpen) {
      form.reset(isEditMode && initialData ? initialData : { name: "", teacherIds: [] });
    }
  }, [isOpen, isEditMode, initialData, form]);

  const handleSubmit = async (data: SubjectFormValues) => {
    try {
      await onSubmit(data);
      onOpenChange(false);
    } catch (err) {
       if (err instanceof Error) {
        toast.error(err.message || "An unknown error occurred.");
      }
    }
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>{isEditMode ? "Edit Subject" : "Add New Subject"}</DialogTitle>
          <DialogDescription>
            {isEditMode 
              ? "Update the subject details and assign instructors." 
              : "Enter the name for the new subject and optionally assign instructors."
            }
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6 pt-4">
            <FormField
              control={form.control} name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Subject Name</FormLabel>
                  <FormControl><Input {...field} placeholder="e.g. Computer Science" /></FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control} name="teacherIds"
              render={() => (
                <FormItem>
                  <FormLabel>Assign Instructors ({form.watch('teacherIds')?.length || 0} selected)</FormLabel>
                  <div className="max-h-48 overflow-y-auto mt-2 border rounded-md p-4">
                    <div className="space-y-3">
                      {allTeachers.map((teacher) => (
                        <FormField
                           key={teacher.id} control={form.control} name="teacherIds"
                           render={({ field }) => (
                             <FormItem key={teacher.id} className="flex flex-row items-start space-x-3 space-y-0">
                               <FormControl>
                                 <Checkbox
                                   checked={field.value?.includes(teacher.id)}
                                   onCheckedChange={(checked) => {
                                     return checked
                                       ? field.onChange([...(field.value || []), teacher.id])
                                       : field.onChange(field.value?.filter((id) => id !== teacher.id));
                                   }}
                                 />
                               </FormControl>
                               <FormLabel className="font-normal">{`${teacher.firstName} ${teacher.lastName}`}</FormLabel>
                             </FormItem>
                           )}
                         />
                      ))}
                    </div>
                  </div>
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isSubmitting}>Cancel</Button>
              <Button type="submit" className="button-gradient" disabled={isSubmitting}>
                {isSubmitting ? 'Saving...' : (isEditMode ? 'Save Changes' : 'Save Subject')}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```