# Extracted Code (.ts, .tsx, .css)
# Date and Time: 2025-08-01 01:36:07
# Files Included: 35

# === lib/mock-data.ts ===
```ts
// This file contains all the mock data used to populate the dashboard components.
// It now includes data for BOTH the original and the new dashboard designs to ensure all components work.

// --- Types for Mock Data ---
type Sale = {
    name: string;
    total: number;
  };
  
  type BestSeller = {
    name: string;
    sales: number;
    revenue: number;
    image: string;
  };
  
  type MediaMetric = {
    name: string;
    spend: number;
    clicks: number;
    conversions: number;
  };
  
  type Campaign = {
    id: number;
    name: string;
    status: "Live" | "Paused" | "Draft" | "Finished";
    spend: number;
    clicks: number;
    conversions: number;
  };
  
// --- Types for Student Dashboard ---
export type StudentAttendance = {
    month: string;
    attendance: number;
};

export type GradeDistribution = {
    grade: string;
    count: number;
};

export type SubjectScore = {
    name: string;
    averageScore: number;
};

// --- Data for the ORIGINAL dashboard design (for sales-chart.tsx and best-sellers.tsx) ---
  
  export const salesData: Sale[] = [
    { name: "Jan", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Feb", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Mar", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Apr", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "May", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Jun", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Jul", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Aug", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Sep", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Oct", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Nov", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Dec", total: Math.floor(Math.random() * 5000) + 1000 },
  ];
  
  export const bestSellersData: BestSeller[] = [
    {
      name: "Fjallraven - Foldsack No. 1",
      sales: 1250,
      revenue: 137487.5,
      image: "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
    },
    {
      name: "Mens Casual Premium Slim Fit T-Shirts",
      sales: 980,
      revenue: 21754,
      image:
        "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg",
    },
    {
      name: "John Hardy Women's Legends Necklace",
      sales: 450,
      revenue: 314550,
      image: "https://fakestoreapi.com/img/71pWzhdJNwL._AC_UL640_QL65_ML3_.jpg",
    },
    {
      name: "WD 2TB Elements Portable Hard Drive",
      sales: 820,
      revenue: 53218,
      image: "https://fakestoreapi.com/img/61IBBVJvSDL._AC_SY879_.jpg",
    },
  ];
  
// --- Data for the ORIGINAL Media Dashboard ---
  export const mediaData: MediaMetric[] = [
    { name: "Jan", spend: 4000, clicks: 2400, conversions: 240 },
    { name: "Feb", spend: 3000, clicks: 1398, conversions: 221 },
    { name: "Mar", spend: 2000, clicks: 9800, conversions: 229 },
    { name: "Apr", spend: 2780, clicks: 3908, conversions: 200 },
    { name: "May", spend: 1890, clicks: 4800, conversions: 218 },
    { name: "Jun", spend: 2390, clicks: 3800, conversions: 250 },
    { name: "Jul", spend: 3490, clicks: 4300, conversions: 210 },
    { name: "Aug", spend: 4100, clicks: 5200, conversions: 310 },
    { name: "Sep", spend: 3800, clicks: 4900, conversions: 290 },
    { name: "Oct", spend: 5200, clicks: 6100, conversions: 450 },
    { name: "Nov", spend: 5500, clicks: 6800, conversions: 510 },
    { name: "Dec", spend: 6100, clicks: 7500, conversions: 620 },
  ];
  
  export const campaignsData: Campaign[] = [
    {
      id: 1,
      name: "Summer Sale 2024",
      status: "Live",
      spend: 12500,
      clicks: 8200,
      conversions: 450,
    },
    {
      id: 2,
      name: "Back to School",
      status: "Paused",
      spend: 8800,
      clicks: 5100,
      conversions: 210,
    },
    {
      id: 3,
      name: "Holiday Special",
      status: "Draft",
      spend: 0,
      clicks: 0,
      conversions: 0,
    },
    {
      id: 4,
      name: "New Product Launch",
      status: "Live",
      spend: 25000,
      clicks: 15300,
      conversions: 980,
    },
    {
      id: 5,
      name: "Q3 Brand Awareness",
      status: "Finished",
      spend: 15000,
      clicks: 18000,
      conversions: 320,
    },
  ];

// --- Data for Student Dashboard ---

export const attendanceData: StudentAttendance[] = [
    { month: "Jan", attendance: 95 },
    { month: "Feb", attendance: 92 },
    { month: "Mar", attendance: 93 },
    { month: "Apr", attendance: 88 },
    { month: "May", attendance: 90 },
    { month: "Jun", attendance: 85 },
    { month: "Jul", attendance: 89 },
    { month: "Aug", attendance: 91 },
    { month: "Sep", attendance: 94 },
    { month: "Oct", attendance: 96 },
    { month: "Nov", attendance: 93 },
    { month: "Dec", attendance: 87 },
];

export const gradeData: GradeDistribution[] = [
    { grade: "A", count: 28 },
    { grade: "B", count: 55 },
    { grade: "C", count: 32 },
    { grade: "D", count: 12 },
    { grade: "F", count: 5 },
];

export const topSubjectsData: SubjectScore[] = [
    { name: "Computer Science", averageScore: 95 },
    { name: "Physics", averageScore: 92 },
    { name: "Mathematics", averageScore: 88 },
    { name: "English Literature", averageScore: 85 },
    { name: "History", averageScore: 81 },
];
```

# === lib/utils.ts ===
```ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const formatCurrency = (amount: number) =>
  new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount);
```

# === lib/api.ts ===
```ts
import { CartsApiResponse, UsersApiResponse } from "@/types/api.types";
import { Course } from "@/types/course.types";
import { CourseSchema } from "@/validators/course.schema";

const DUMMY_JSON_URL = "https://dummyjson.com";

export async function getUsers(url: string): Promise<UsersApiResponse> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch users");
    }
    const data: UsersApiResponse = await res.json();
    return data;
  } catch {
    throw new Error("Could not retrieve users. Please try again later.");
  }
}


export async function getTotalStudents(): Promise<number> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users?limit=0`);
    if (!res.ok) {
      return 152;
    }
    const data: UsersApiResponse = await res.json();
    return data.total;
  } catch (e) {
    console.error("Failed to get total students:", e);
    return 152;
  }
}

export async function getTotalCourses(): Promise<number> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products?limit=0`);
    if (!res.ok) {
      return 194; // fallback from dummyjson total
    }
    const data = await res.json();
    return data.total;
  } catch (e) {
    console.error("Failed to get total courses:", e);
    return 194; // fallback
  }
}

export async function getCourses(url: string): Promise<Course[]> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch courses");
    }
    const data = await res.json();
    return data.products.map((course: Course) => ({
      ...course,
      createdAt: new Date(Date.now() - Math.random() * 1e10).toISOString(),
      createdBy: "Admin",
    }));
  } catch {
    throw new Error("Could not retrieve courses. Please try again later.");
  }
}

export async function createCourse(courseData: CourseSchema): Promise<Course> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products/add`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(courseData),
    });
    if (!res.ok) throw new Error("Failed to create course");
    const newCourse: Course = await res.json();
    return { ...newCourse, createdAt: new Date().toISOString(), createdBy: "System" };
  } catch {
    throw new Error("Could not create the course.");
  }
}

export async function updateCourse(courseId: number, courseData: Partial<CourseSchema>): Promise<Course> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products/${courseId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(courseData),
    });
    if (!res.ok) throw new Error("Failed to update course");
    const updatedCourse: Course = await res.json();
    return { ...updatedCourse, ...courseData, updatedAt: new Date().toISOString(), updatedBy: "System" };
  } catch {
    throw new Error("Could not update the course.");
  }
}

export async function deleteCourse(courseId: number): Promise<Course> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products/${courseId}`, {
      method: "DELETE",
    });
    if (!res.ok) throw new Error("Failed to delete course");
    return await res.json();
  } catch {
    throw new Error("Could not delete the course.");
  }
}

export async function getEnrollments(url: string): Promise<CartsApiResponse> {
    try {
        const res = await fetch(url);
        if(!res.ok) throw new Error("Failed to fetch enrollments");
        return await res.json();
    } catch {
        throw new Error("Could not retrieve enrollments. Please try again later.");
    }
}
```

# === app/globals.css ===
```css
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.75rem;
  --background: oklch(0.99 0.005 240);
  --foreground: oklch(0.1 0.03 250);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.1 0.03 250);
  --popover: oklch(1 0 0 / 0.8);
  --popover-foreground: oklch(0.1 0.03 250);
  --primary: oklch(0.60 0.18 265);
  --primary-foreground: oklch(0.99 0.005 240);
  --secondary: oklch(0.92 0.03 260);
  --secondary-foreground: oklch(0.1 0.03 250);
  --muted: oklch(0.95 0.02 260);
  --muted-foreground: oklch(0.45 0.04 255);
  --accent: oklch(0.95 0.02 260);
  --accent-foreground: oklch(0.09 0.08 265);
  --destructive: oklch(0.65 0.22 20);
  --border: oklch(0.1 0.03 250 / 0.15);
  --input: oklch(0.1 0.03 250 / 0.05);
  --ring: oklch(0.60 0.18 265);
  --chart-1: oklch(0.7 0.15 290);
  --chart-2: oklch(0.75 0.18 200);
  --chart-3: oklch(0.65 0.2 260);
  --chart-4: oklch(0.8 0.18 150);
  --chart-5: oklch(0.8 0.2 80);
}

.dark {
  --background: oklch(0.08 0.02 250);
  --foreground: oklch(0.95 0.01 240);
  --card: oklch(0.12 0.03 260);
  --card-foreground: oklch(0.95 0.01 240);
  --popover: oklch(0.05 0.02 250 / 0.8);
  --popover-foreground: oklch(0.95 0.01 240);
  --primary: oklch(0.7 0.2 275);
  --primary-foreground: oklch(0.98 0.01 275);
  --secondary: oklch(0.2 0.05 270);
  --secondary-foreground: oklch(0.95 0.01 240);
  --muted: oklch(0.2 0.05 270 / 0.5);
  --muted-foreground: oklch(0.65 0.05 260);
  --accent: oklch(0.2 0.05 270);
  --accent-foreground: oklch(0.95 0.01 240);
  --destructive: oklch(0.7 0.2 25);
  --border: oklch(1 1 1 / 0.15);
  --input: oklch(1 1 1 / 0.08);
  --ring: oklch(0.75 0.22 280);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply text-foreground antialiased;
    background-color: oklch(var(--background));
    background: linear-gradient(300deg, hsl(var(--primary)/.15), hsl(var(--chart-2)/.15), hsl(var(--chart-4)/.15));
    background-size: 400% 400%;
    animation: gradient-animation 25s ease infinite;
  }
}

@keyframes gradient-animation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}


@layer utilities {
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-br from-primary to-secondary;
  }
  .button-gradient {
    @apply bg-gradient-to-br from-primary to-primary/70 text-primary-foreground transition-all duration-300 shadow-lg shadow-primary/20 hover:from-primary/90 hover:to-primary/60 hover:shadow-xl hover:shadow-primary/30;
  }
  .glass-card {
    @apply bg-card/80 dark:bg-card/70 backdrop-blur-lg border shadow-lg shadow-black/10 dark:shadow-black/20;
  }
}
```

# === app/layout.tsx ===
```tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Student Management Dashboard",
  description: "A dashboard for managing students and their performance.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}
```

# === app/page.tsx ===
```tsx
import { StudentDashboardSidebar } from "@/components/dashboard/student-sidebar";
import { StudentDashboardHeaderBar } from "@/components/dashboard/student-header-bar";
import { StatCard } from "@/components/dashboard/stat-card";
import { MediaChart } from "@/components/dashboard/media-chart";
import { CampaignsTable } from "@/components/dashboard/campaigns-table";
import { getTotalStudents } from "@/lib/api";

export default async function StudentDashboardPage() {
  const totalStudents = await getTotalStudents();

  return (
    // 1. Outer Layout: Full screen gradient with padding
    <main className="min-h-screen w-full bg-gradient-to-br from-blue-500 to-indigo-600 p-8">
      {/* 2. Card Container: Centered white card with shadow and internal padding */}
      <div className="mx-auto w-full max-w-7xl rounded-2xl bg-white p-6 shadow-xl lg:p-8 flex gap-8">
        
        {/* 3. Sidebar: Vertical navigation inside the card */}
        <StudentDashboardSidebar />

        {/* Main Content Area */}
        <div className="flex-1 flex flex-col gap-8">
          
          {/* 4. Header Bar: Title, filters, and profile avatar */}
          <StudentDashboardHeaderBar />

          {/* Stat Cards Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
             <StatCard title="Total Students" value={totalStudents.toString()} change="+5%" />
             <StatCard title="Pass Rate" value="85.3%" change="-1.2%" isNegative />
             <StatCard title="Assignments Completed" value="76%" change="+3.4%" />
             <StatCard title="Avg. Attendance" value="91%" change="This Term" />
          </div>

          {/* Charts & Tables Grid */}
          <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
            <div className="xl:col-span-3">
              {/* This component is now used for the Monthly Attendance Chart */}
              <MediaChart /> 
            </div>

            <div className="xl:col-span-2">
              {/* This component is now used for Grade Distribution and Top Subjects */}
              <CampaignsTable /> 
            </div>
          </div>

        </div>
      </div>
    </main>
  );
}
```

# === app/(dashboard)/layout.tsx ===
```tsx
import { StudentDashboardSidebar } from "@/components/dashboard/student-sidebar";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="min-h-screen w-full bg-gradient-to-br from-blue-500 to-indigo-600 p-4 sm:p-6 lg:p-8">
      <div className="mx-auto w-full max-w-7xl rounded-2xl bg-card p-6 shadow-xl lg:p-8 flex flex-col lg:flex-row gap-8">
        <StudentDashboardSidebar />
        <div className="flex-1 flex flex-col gap-8">
          {children}
        </div>
      </div>
    </main>
  );
}
```

# === app/(dashboard)/page.tsx ===
```tsx
import { PageHeader } from "@/components/shared/page-header";
import { StatCard } from "@/components/dashboard/stat-card";
import { MediaChart } from "@/components/dashboard/media-chart";
import { CampaignsTable } from "@/components/dashboard/campaigns-table";
import { getTotalStudents } from "@/lib/api";
import { Bell } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export default async function DashboardPage() {
  const totalStudents = await getTotalStudents();

  return (
    <>
      <PageHeader title="Student Dashboard">
        <Select defaultValue="this_term">
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter period" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="this_term">This Term</SelectItem>
            <SelectItem value="last_term">Last Term</SelectItem>
            <SelectItem value="full_year">Full Year</SelectItem>
          </SelectContent>
        </Select>
        <div className="relative">
          <Bell className="h-6 w-6 text-muted-foreground" />
          <span className="absolute -top-1 -right-1 flex h-3 w-3">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75"></span>
            <span className="relative inline-flex rounded-full h-3 w-3 bg-primary"></span>
          </span>
        </div>
      </PageHeader>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
         <StatCard title="Total Students" value={totalStudents.toString()} change="+5%" />
         <StatCard title="Pass Rate" value="85.3%" change="-1.2%" isNegative />
         <StatCard title="Assignments Completed" value="76%" change="+3.4%" />
         <StatCard title="Avg. Attendance" value="91%" change="This Term" />
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
        <div className="xl:col-span-3">
          <MediaChart /> 
        </div>
        <div className="xl:col-span-2">
          <CampaignsTable /> 
        </div>
      </div>
    </>
  );
}
```

# === app/(dashboard)/enrollments/page.tsx ===
```tsx
"use client";

import useSWR from "swr";
import { useState } from "react";
import { PageHeader } from "@/components/shared/page-header";
import { EnrollmentTable } from "@/components/features/enrollment/enrollment-table";
import { EnrollmentTableSkeleton } from "@/components/features/enrollment/enrollment-table-skeleton";
import { getEnrollments } from "@/lib/api";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle } from "lucide-react";
import { Pagination } from "@/components/ui/pagination";

const ITEMS_PER_PAGE = 10;

export default function EnrollmentsPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const { data, error, isLoading } = useSWR(
    `https://dummyjson.com/carts?limit=${ITEMS_PER_PAGE}&skip=${(currentPage - 1) * ITEMS_PER_PAGE}`,
    getEnrollments
  );

  const renderContent = () => {
    if (isLoading) return <EnrollmentTableSkeleton />;
    if (error) return (
      <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load enrollments. Please try again.</AlertDescription>
      </Alert>
    );
    if (!data?.carts.length) return <p>No enrollments found.</p>;
    
    return <EnrollmentTable enrollments={data.carts} />
  };

  return (
    <div className="flex flex-col gap-8">
      <PageHeader
        title="Enrollment Management"
        description="View all student course enrollments."
      />
      {renderContent()}
      {data && data.total > ITEMS_PER_PAGE && (
        <Pagination
            currentPage={currentPage}
            totalPages={Math.ceil(data.total / ITEMS_PER_PAGE)}
            onPageChange={setCurrentPage}
        />
      )}
    </div>
  );
}
```

# === app/(dashboard)/students/page.tsx ===
```tsx
"use client";

import useSWR from "swr";
import { PageHeader } from "@/components/shared/page-header";
import { CustomerTable } from "@/components/features/customer/customer-table";
import { CustomerTableSkeleton } from "@/components/features/customer/customer-table-skeleton";
import { getUsers } from "@/lib/api";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle } from "lucide-react";
import { Pagination } from "@/components/ui/pagination";
import { useState } from "react";

const ITEMS_PER_PAGE = 10;

export default function StudentsPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const { data, error, isLoading } = useSWR(
    `https://dummyjson.com/users?limit=${ITEMS_PER_PAGE}&skip=${(currentPage - 1) * ITEMS_PER_PAGE}`,
    getUsers
  );

  const renderContent = () => {
    if (isLoading) return <CustomerTableSkeleton />;
    if (error) return (
      <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load students. Please try again.</AlertDescription>
      </Alert>
    );
    if (!data?.users.length) return <p>No students found.</p>;
    
    return <CustomerTable customers={data.users} />
  };

  return (
    <>
      <PageHeader
        title="Student Management"
        description="View and manage student profiles."
      />
      {renderContent()}
      {data && data.total > ITEMS_PER_PAGE && (
        <Pagination
            currentPage={currentPage}
            totalPages={Math.ceil(data.total / ITEMS_PER_PAGE)}
            onPageChange={setCurrentPage}
        />
      )}
    </>
  );
}
```

# === app/(dashboard)/courses/page.tsx ===
```tsx
"use client";

import { useState, useMemo, useEffect } from "react";
import useSWR from "swr";
import { AlertTriangle, PlusCircle, Search } from "lucide-react";
import { toast } from "sonner";
import { DndContext, closestCenter, type DragEndEvent } from "@dnd-kit/core";
import { arrayMove } from "@dnd-kit/sortable";

import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { CourseTable } from "@/components/features/course/course-table";
import { CourseTableSkeleton } from "@/components/features/course/course-table-skeleton";
import { CourseFormModal } from "@/components/features/course/course-form-modal";
import { getCourses, deleteCourse, updateCourse } from "@/lib/api";
import { useDebounce } from "@/hooks/use-debounce";
import { Course } from "@/types/course.types";
import { CourseSchema } from "@/validators/course.schema";
import { PageHeader } from "@/components/shared/page-header";
import { Pagination } from "@/components/ui/pagination";
import { CoursePreviewModal } from "@/components/features/course/course-preview-modal";

const ITEMS_PER_PAGE = 10;

export default function CoursesPage() {
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingCourse, setEditingCourse] = useState<Course | undefined>(undefined);
  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);
  const [courseToDelete, setCourseToDelete] = useState<Course | undefined>(undefined);
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
  const [previewingCourse, setPreviewingCourse] = useState<Course | undefined>(
    undefined
  );

  const [displayCourses, setDisplayCourses] = useState<Course[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState("title-asc");
  const [currentPage, setCurrentPage] = useState(1);
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  const { data: courses, error, isLoading, mutate } = useSWR("https://dummyjson.com/products", getCourses);

  useEffect(() => {
    if (courses) {
      setDisplayCourses(courses);
    }
  }, [courses]);

  const filteredAndSortedCourses = useMemo(() => {
    if (!displayCourses) return [];

    let processed = [...displayCourses];
    if (debouncedSearchTerm) {
      processed = processed.filter((course) =>
        course.title.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
      );
    }

    if (sortBy !== "custom") {
      const [key, order] = sortBy.split("-");
      processed.sort((a, b) => {
        const valA = key === "price" ? a.price : a.title.toLowerCase();
        const valB = key === "price" ? b.price : b.title.toLowerCase();
        if (valA < valB) return order === "asc" ? -1 : 1;
        if (valA > valB) return order === "asc" ? 1 : -1;
        return 0;
      });
    }
    return processed;
  }, [displayCourses, debouncedSearchTerm, sortBy]);

  const paginatedCourses = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    return filteredAndSortedCourses.slice(startIndex, startIndex + ITEMS_PER_PAGE);
  }, [filteredAndSortedCourses, currentPage]);

  const handleSuccess = () => mutate();

  const handleOpenCreateModal = () => {
    setEditingCourse(undefined);
    setIsFormModalOpen(true);
  };

  const handleOpenEditModal = (course: Course) => {
    setEditingCourse(course);
    setIsFormModalOpen(true);
  };

  const handleOpenDeleteAlert = (course: Course) => {
    setCourseToDelete(course);
    setIsDeleteAlertOpen(true);
  };

  const handleOpenPreviewModal = (course: Course) => {
    setPreviewingCourse(course);
    setIsPreviewModalOpen(true);
  };

  const handleDeleteCourse = async () => {
    if (!courseToDelete || !courses) return;
    const optimisticData = courses.filter((p) => p.id !== courseToDelete.id);
    mutate(optimisticData, { revalidate: false });
    try {
      await deleteCourse(courseToDelete.id);
      toast.success(`Course "${courseToDelete.title}" deleted.`);
    } catch {
      toast.error("Failed to delete course. Restoring data.");
      mutate(courses, { revalidate: true });
    } finally {
      setIsDeleteAlertOpen(false);
      setCourseToDelete(undefined);
    }
  };

  const handleInlineUpdate = async (courseId: number, data: Partial<CourseSchema>) => {
    const originalCourses = [...displayCourses];
    const updatedCourses = displayCourses.map((p) => (p.id === courseId ? { ...p, ...data } : p));
    setDisplayCourses(updatedCourses);

    try {
      await updateCourse(courseId, data);
      toast.success("Course updated successfully!");
      mutate(updatedCourses, { revalidate: false });
    } catch {
      toast.error("Failed to update course.");
      setDisplayCourses(originalCourses);
    }
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      setDisplayCourses((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        return arrayMove(items, oldIndex, newIndex);
      });
      setSortBy("custom");
      setCurrentPage(1);
    }
  };
  
  const renderContent = () => {
    if (isLoading) return <CourseTableSkeleton />;
    if (error) return (
      <Alert variant="destructive" className="glass-card">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>Failed to load courses. Please try again.</AlertDescription>
      </Alert>
    );
    if (paginatedCourses.length === 0 && debouncedSearchTerm) return (
      <div className="text-center py-10 glass-card rounded-lg">
        <h3 className="text-xl font-medium">No Courses Found</h3>
        <p className="text-muted-foreground">Your search for &quot;{debouncedSearchTerm}&quot; did not match any courses.</p>
      </div>
    );
    return (
      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
        <CourseTable courses={paginatedCourses} onEdit={handleOpenEditModal} onDelete={handleOpenDeleteAlert} onInlineUpdate={handleInlineUpdate} onPreview={handleOpenPreviewModal} />
      </DndContext>
    );
  };

  return (
    <>
      <div className="flex flex-col gap-6">
        <PageHeader title="Course Management" description="Manage your course catalog." />
        <div className="flex justify-end">
             <Button onClick={handleOpenCreateModal} className="button-gradient"><PlusCircle className="mr-2 h-4 w-4" />Add Course</Button>
        </div>
        <div className="p-4 rounded-lg flex flex-col md:flex-row items-center gap-4 glass-card">
          <div className="relative flex-1 w-full">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input placeholder="Search by course title..." className="pl-10 bg-transparent" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
          </div>
          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-full md:w-[220px]"><SelectValue placeholder="Sort by" /></SelectTrigger>
            <SelectContent>
              <SelectItem value="custom" disabled={sortBy !== "custom"}>Custom Order</SelectItem>
              <SelectItem value="title-asc">Title (A-Z)</SelectItem>
              <SelectItem value="title-desc">Title (Z-A)</SelectItem>
              <SelectItem value="price-asc">Price (Low to High)</SelectItem>
              <SelectItem value="price-desc">Price (High to Low)</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div className="space-y-6">
          {renderContent()}
          {filteredAndSortedCourses.length > ITEMS_PER_PAGE && (
            <Pagination currentPage={currentPage} totalPages={Math.ceil(filteredAndSortedCourses.length / ITEMS_PER_PAGE)} onPageChange={setCurrentPage} />
          )}
        </div>
      </div>
      <CourseFormModal isOpen={isFormModalOpen} onOpenChange={setIsFormModalOpen} course={editingCourse} onSuccess={handleSuccess} />
      <CoursePreviewModal isOpen={isPreviewModalOpen} onOpenChange={setIsPreviewModalOpen} course={previewingCourse} />
      <AlertDialog open={isDeleteAlertOpen} onOpenChange={setIsDeleteAlertOpen}>
        <AlertDialogContent className="bg-card/90 backdrop-blur-xl">
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>This will permanently delete &quot;{courseToDelete?.title}&quot;.</AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteCourse} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">Delete</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
```

# === app/(dashboard)/teachers/page.tsx ===
```tsx
"use client";

import useSWR from "swr";
import { PageHeader } from "@/components/shared/page-header";
import { CustomerTable } from "@/components/features/customer/customer-table";
import { CustomerTableSkeleton } from "@/components/features/customer/customer-table-skeleton";
import { getUsers } from "@/lib/api";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle } from "lucide-react";
import { Pagination } from "@/components/ui/pagination";
import { useState } from "react";

const ITEMS_PER_PAGE = 10;

export default function TeachersPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const { data, error, isLoading } = useSWR(
    `https://dummyjson.com/users?limit=${ITEMS_PER_PAGE}&skip=${100 + (currentPage - 1) * ITEMS_PER_PAGE}`,
    getUsers
  );

  const renderContent = () => {
    if (isLoading) return <CustomerTableSkeleton />;
    if (error) return (
      <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load teachers. Please try again.</AlertDescription>
      </Alert>
    );
    if (!data?.users.length) return <p>No teachers found.</p>;
    
    return <CustomerTable customers={data.users} />
  };

  return (
    <div className="flex flex-col gap-8">
      <PageHeader
        title="Teacher Management"
        description="View and manage teacher profiles."
      />
      {renderContent()}
      {data && (data.total - 100) > ITEMS_PER_PAGE && (
        <Pagination
            currentPage={currentPage}
            totalPages={Math.ceil((data.total - 100) / ITEMS_PER_PAGE)}
            onPageChange={setCurrentPage}
        />
      )}
    </div>
  );
}
```

# === validators/course.schema.ts ===
```ts
import { z } from "zod";

export const courseSchema = z.object({
  title: z.string().min(3, {
    message: "Title must be at least 3 characters long.",
  }),
  description: z.string().optional(),
  price: z
    .union([z.string(), z.number()])
    .transform((val) => (typeof val === "string" ? parseFloat(val) || 0 : val))
    .refine((val) => val > 0, {
      message: "Price must be a positive number.",
    }),
});

export type CourseSchema = z.infer<typeof courseSchema>;
```

# === hooks/use-sidebar.ts ===
```ts
import { create } from "zustand";

interface SidebarState {
  isOpen: boolean;
  toggle: () => void;
  setOpen: (isOpen: boolean) => void;
}

// Set initial state based on window width for better UX on larger screens
const getInitialState = () => {
    if (typeof window !== 'undefined') {
        return window.innerWidth > 1024; // lg breakpoint
    }
    return true;
};

export const useSidebar = create<SidebarState>((set) => ({
  isOpen: getInitialState(),
  toggle: () => set((state) => ({ isOpen: !state.isOpen })),
  setOpen: (isOpen) => set({ isOpen }),
}));
```

# === hooks/use-debounce.ts ===
```ts
import { useState, useEffect } from "react";

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
```

# === types/course.types.ts ===
```ts
export interface Course {
  id: number;
  title: string;
  description?: string; // FIXED: Made optional to match schema
  price: number;
  category: string;
  thumbnail: string;
  stock: number; // Represents available slots
  rating: number;
  // Audit Trail
  createdAt?: string;
  updatedAt?: string;
  createdBy?: string;
  updatedBy?: string;
}
```

# === types/api.types.ts ===
```ts
export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

export interface ProductsApiResponse {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}


export interface User {
    id: number;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    image: string;
    address: {
        address: string;
        city: string;
        postalCode: string;
        state: string;
    }
}

export interface UsersApiResponse {
    users: User[];
    total: number;
    skip: number;
    limit: number;
}


export interface Cart {
    id: number;
    products: {
        id: number;
        title: string;
        price: number;
        quantity: number;
        total: number;
        discountPercentage: number;
        discountedPrice: number;
        thumbnail: string;
    }[];
    total: number;
    discountedTotal: number;
    userId: number;
    totalProducts: number;
    totalQuantity: number;
}

export interface CartsApiResponse {
    carts: Cart[];
    total: number;
    skip: number;
    limit: number;
}
```

# === components/theme-provider.tsx ===
```tsx
"use client";

import * as React from "react";
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from "next-themes";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
```

# === components/shared/page-header.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export function PageHeader({
  title,
  description,
  className,
  children,
  ...props
}: PageHeaderProps) {
  return (
    <div className={cn("flex flex-col md:flex-row items-start md:items-center justify-between gap-4", className)} {...props}>
      <div className="space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">
          <span className="text-gradient">{title}</span>
        </h1>
        {description && <p className="text-muted-foreground">{description}</p>}
      </div>
      {children && <div className="flex items-center gap-4 w-full md:w-auto justify-end">{children}</div>}
    </div>
  );
}
```

# === components/shared/theme-toggle.tsx ===
```tsx
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
```

# === components/dashboard/stat-card.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface StatCardProps {
  title: string;
  value: string;
  change: string;
  isNegative?: boolean;
}

export function StatCard({ title, value, change, isNegative = false }: StatCardProps) {
  return (
    <div className="bg-muted/50 rounded-lg p-4">
      <p className="text-sm text-muted-foreground">{title}</p>
      <p className="text-2xl font-bold text-foreground my-1">{value}</p>
      <p
        className={cn(
          "text-xs font-semibold",
          isNegative ? "text-red-500" : "text-green-500"
        )}
      >
        {change}
      </p>
    </div>
  );
}
```

# === components/dashboard/media-chart.tsx ===
```tsx
"use client";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Area,
  defs,
} from "recharts";
import { attendanceData } from "@/lib/mock-data";

export function MediaChart() {
  return (
    <div className="rounded-lg border bg-white p-4 h-full flex flex-col">
      <h3 className="font-semibold text-lg mb-2">Monthly Attendance Trends</h3>
      <div className="flex-grow">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={attendanceData}
            margin={{ top: 5, right: 10, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorAttendance" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.3} />
                <stop offset="100%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>

            <XAxis
              dataKey="month"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: "white",
                border: "1px solid #e2e8f0",
                borderRadius: "0.5rem",
              }}
              formatter={(value: number) => [`${value}%`, "Attendance"]}
            />
            {/* Shaded translucent area */}
            <Area
              type="monotone"
              dataKey="attendance"
              stroke="none"
              fill="url(#colorAttendance)"
            />
            <Line
              type="monotone"
              dataKey="attendance"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={{ r: 4 }}
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
```

# === components/dashboard/student-header-bar.tsx ===
```tsx
import { Bell } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export function StudentDashboardHeaderBar() {
  return (
    <div className="flex flex-col md:flex-row items-center justify-between gap-4">
      <h1 className="text-3xl font-bold tracking-tight text-gradient">Student Dashboard</h1>
      <div className="flex items-center gap-4 w-full md:w-auto">
        <Select defaultValue="this_term">
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter period" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="this_term">This Term</SelectItem>
            <SelectItem value="last_term">Last Term</SelectItem>
            <SelectItem value="full_year">Full Year</SelectItem>
          </SelectContent>
        </Select>
        <div className="relative">
          <Bell className="h-6 w-6 text-muted-foreground" />
          <span className="absolute -top-1 -right-1 flex h-3 w-3">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75"></span>
            <span className="relative inline-flex rounded-full h-3 w-3 bg-primary"></span>
          </span>
        </div>
      </div>
    </div>
  );
}
```

# === components/dashboard/student-sidebar.tsx ===
```tsx
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { LayoutDashboard, Users, UserSquare, BookOpen, ClipboardCheck, LifeBuoy } from "lucide-react";
import { cn } from "@/lib/utils";

const navItems = [
  { href: "/", icon: LayoutDashboard, label: "Dashboard" },
  { href: "/students", icon: Users, label: "Students" },
  { href: "/teachers", icon: UserSquare, label: "Teachers" },
  { href: "/courses", icon: BookOpen, label: "Courses" },
  { href: "/enrollments", icon: ClipboardCheck, label: "Enrollments" },
];

export function StudentDashboardSidebar() {
  const pathname = usePathname();

  return (
    <aside className="hidden lg:flex flex-col w-56 flex-shrink-0">
      <div className="flex items-center gap-2 mb-8">
        <div className="p-2 bg-primary rounded-lg">
          <BookOpen className="h-6 w-6 text-primary-foreground" />
        </div>
        <span className="text-xl font-bold">EduDash</span>
      </div>
      <nav className="flex flex-col gap-2 flex-grow">
        {navItems.map((item) => {
          const isActive = (item.href === "/" && pathname === "/") || (item.href !== "/" && pathname.startsWith(item.href));
          return (
          <Link
            key={item.label}
            href={item.href}
            className={cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-muted-foreground transition-all hover:bg-muted hover:text-foreground",
              isActive && "bg-muted font-semibold text-foreground"
            )}
          >
            <item.icon className="h-5 w-5" />
            {item.label}
          </Link>
        )})}
      </nav>
      <div className="mt-auto">
         <Link
            href="#"
            className="flex items-center gap-3 rounded-md px-3 py-2 text-muted-foreground transition-all hover:bg-muted hover:text-foreground"
          >
            <LifeBuoy className="h-5 w-5" />
            Support
          </Link>
      </div>
    </aside>
  );
}
```

# === components/dashboard/campaigns-table.tsx ===
```tsx
"use client"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Cell,
} from "recharts";
import { gradeData, topSubjectsData } from "@/lib/mock-data";

const GRADE_COLORS = ['#2dd4bf', '#3b82f6', '#fbbd23', '#f87171', '#ef4444'];

const GradeDistributionChart = () => (
  <div className="h-56"> {/* Set a fixed height for the chart area */}
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={gradeData} margin={{ top: 5, right: 10, left: -15, bottom: 5 }}>
        <XAxis dataKey="grade" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <Tooltip
          cursor={{ fill: 'hsl(var(--muted))' }}
          contentStyle={{
            backgroundColor: 'hsl(var(--card))',
            border: '1px solid hsl(var(--border))',
            borderRadius: '0.5rem',
          }}
          formatter={(value: number) => [value, "Students"]}
        />
        <Bar dataKey="count" radius={[4, 4, 0, 0]}>
          {gradeData.map((_entry, index) => (
            <Cell key={`cell-${index}`} fill={GRADE_COLORS[index % GRADE_COLORS.length]} />
          ))}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const TopSubjectsList = () => (
  <Table>
    <TableHeader>
      <TableRow>
        <TableHead>Subject</TableHead>
        <TableHead className="text-right">Avg. Score</TableHead>
      </TableRow>
    </TableHeader>
    <TableBody>
      {topSubjectsData.sort((a, b) => b.averageScore - a.averageScore).map((subject) => (
        <TableRow key={subject.name} className="hover:bg-muted/50 text-sm">
          <TableCell className="font-medium">{subject.name}</TableCell>
          <TableCell className="text-right">
            <Badge variant="secondary" className={
                subject.averageScore >= 90 ? "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300" :
                subject.averageScore >= 80 ? "bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-300" :
                "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300"
            }>
                {subject.averageScore}%
            </Badge>
          </TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

export function CampaignsTable() {
  return (
    <div className="rounded-lg border bg-card p-4 h-full flex flex-col gap-4">
      <div>
        <h3 className="font-semibold text-lg mb-2">Grade Distribution</h3>
        <GradeDistributionChart />
      </div>
      <div className="border-t pt-2">
        <h3 className="font-semibold text-lg mb-2">Top Subjects</h3>
        <div className="overflow-auto">
            <TopSubjectsList />
        </div>
      </div>
    </div>
  );
}
```

# === components/features/customer/customer-table-skeleton.tsx ===
```tsx
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

export function CustomerTableSkeleton() {
  const skeletonRows = Array.from({ length: 10 });

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Phone</TableHead>
            <TableHead>City</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {skeletonRows.map((_, index) => (
            <TableRow key={index}>
              <TableCell><Skeleton className="h-4 w-32" /></TableCell>
              <TableCell><Skeleton className="h-4 w-48" /></TableCell>
              <TableCell><Skeleton className="h-4 w-40" /></TableCell>
              <TableCell><Skeleton className="h-4 w-24" /></TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

# === components/features/customer/customer-table.tsx ===
```tsx
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { User } from "@/types/api.types";

export function CustomerTable({ customers }: { customers: User[] }) {
  return (
    <div className="rounded-lg border bg-card backdrop-blur-xl overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              <TableHead>City</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {customers.map((user) => (
              <TableRow key={user.id}>
                <TableCell className="font-medium">{user.firstName} {user.lastName}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.phone}</TableCell>
                <TableCell>{user.address.city}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
    </div>
  );
}
```

# === components/features/course/course-table-skeleton.tsx ===
```tsx
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

export function CourseTableSkeleton() {
  const skeletonRows = Array.from({ length: 10 });

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]"><span className="sr-only">Drag</span></TableHead>
            <TableHead className="w-[80px]">Image</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Category</TableHead>
            <TableHead className="text-right w-[120px]">Tuition</TableHead>
            <TableHead className="text-right w-[120px]">Slots</TableHead>
            <TableHead className="w-[50px]"><span className="sr-only">Actions</span></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {skeletonRows.map((_, index) => (
            <TableRow key={index}>
              <TableCell><Skeleton className="h-5 w-5" /></TableCell>
              <TableCell><Skeleton className="h-12 w-12 rounded-md" /></TableCell>
              <TableCell><Skeleton className="h-4 w-48" /></TableCell>
              <TableCell><Skeleton className="h-6 w-24 rounded-full" /></TableCell>
              <TableCell><Skeleton className="h-4 w-16 ml-auto" /></TableCell>
              <TableCell><Skeleton className="h-4 w-16 ml-auto" /></TableCell>
              <TableCell><Skeleton className="h-8 w-8 rounded-md" /></TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

# === components/features/course/course-form-modal.tsx ===
```tsx
"use client";

import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Course } from "@/types/course.types";
import { CourseSchema, courseSchema } from "@/validators/course.schema";
import { createCourse, updateCourse } from "@/lib/api";

interface CourseFormModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  course?: Course;
  onSuccess: () => void;
}

const defaultValues: CourseSchema = {
  title: "",
  description: "",
  price: 0,
};

export function CourseFormModal({ isOpen, onOpenChange, course, onSuccess }: CourseFormModalProps) {
  const isEditMode = !!course;

  const form = useForm({
    resolver: zodResolver(courseSchema),
    defaultValues,
    mode: "onChange",
  });

  const { formState: { isSubmitting }, reset } = form;

  useEffect(() => {
    if (isOpen) {
      if (isEditMode && course) {
        reset({
          title: course.title,
          description: course.description || "",
          price: course.price,
        });
      } else {
        reset(defaultValues);
      }
    }
  }, [isOpen, course, isEditMode, reset]);

  const onSubmit = async (data: CourseSchema): Promise<void> => {
    try {
      if (isEditMode && course) {
        await updateCourse(course.id, data);
        toast.success("Course updated successfully!");
      } else {
        await createCourse(data);
        toast.success("Course created successfully!");
      }
      onSuccess();
      onOpenChange(false);
    } catch (error) {
      toast.error(error instanceof Error ? error.message : "An unknown error occurred.");
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px] bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>{isEditMode ? "Edit Course" : "Add New Course"}</DialogTitle>
          <DialogDescription>
            {isEditMode ? "Make changes to the course details." : "Fill in the details for a new course."}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Title</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g. Introduction to Physics" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="Course description..." 
                      {...field} 
                      value={field.value || ""} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Tuition Fee</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      placeholder="499.99"
                      {...field}
                      onChange={(e) => field.onChange(e.target.value === "" ? 0 : Number(e.target.value))}
                      value={field.value || ""}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting} className="button-gradient">
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : isEditMode ? (
                  "Save Changes"
                ) : (
                  "Create Course"
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/course/course-table.tsx ===
```tsx
"use client";

import Image from "next/image";
import { useState, useRef, useEffect } from "react";
import { MoreHorizontal, Pencil, Trash2, GripVertical, Eye } from "lucide-react";
import { useSortable, SortableContext, verticalListSortingStrategy } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Course } from "@/types/course.types";
import { CourseSchema } from "@/validators/course.schema";
import { cn } from "@/lib/utils";
import { formatCurrency } from "@/lib/utils";

// Sortable Row Component for a Course
function SortableCourseRow({ course, onEdit, onDelete, onPreview, onInlineUpdate }: { course: Course; onEdit: (c: Course) => void; onDelete: (c: Course) => void; onPreview: (c: Course) => void; onInlineUpdate: (id: number, data: Partial<CourseSchema>) => void; }) {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: course.id });
  const style = { transform: CSS.Transform.toString(transform), transition, zIndex: isDragging ? 10 : 'auto' };

  const [editingCell, setEditingCell] = useState<{ field: "title" | "price"; value: string } | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (editingCell) {
      inputRef.current?.focus();
      inputRef.current?.select();
    }
  }, [editingCell]);

  const handleSave = () => {
    if (!editingCell) return;
    const { field, value } = editingCell;

    if (field === 'title' && value.trim() !== '' && value.trim() !== course.title) {
        onInlineUpdate(course.id, { title: value.trim() });
    } else if (field === 'price') {
      const newPrice = parseFloat(value);
      if (!isNaN(newPrice) && newPrice > 0 && newPrice !== course.price) {
        onInlineUpdate(course.id, { price: newPrice });
      }
    }
    setEditingCell(null);
  };
  
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') handleSave();
    if (e.key === 'Escape') setEditingCell(null);
  };

  const renderEditableCell = (field: "title" | "price") => {
    const isEditing = editingCell?.field === field;
    const value = field === 'title' ? course.title : course.price;

    return (
      <div onClick={() => !isDragging && !editingCell && setEditingCell({ field, value: String(value) })} className="cursor-pointer">
        {isEditing ? (
          <Input
            ref={inputRef} type={field === 'price' ? 'number' : 'text'} value={editingCell.value}
            onChange={(e) => setEditingCell({ ...editingCell, value: e.target.value })}
            onBlur={handleSave} onKeyDown={handleKeyDown}
            className={cn("h-8 bg-transparent", field === 'price' && 'text-right')}
            onClick={(e) => e.stopPropagation()}
          />
        ) : (
          <span className="flex items-center gap-2">
            {field === 'title' ? course.title : formatCurrency(course.price)}
            <Pencil className="h-3 w-3 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
          </span>
        )}
      </div>
    );
  };

  return (
    <tr ref={setNodeRef} style={style} className={cn("group bg-transparent hover:bg-muted/50 transition-colors", isDragging && "bg-primary/20 shadow-xl")}>
      <TableCell className="w-[50px] pl-2"><div {...attributes} {...listeners} className="cursor-grab py-4"><GripVertical className="h-5 w-5 text-muted-foreground" /></div></TableCell>
      <TableCell className="w-[80px]"><div className="relative h-12 w-12"><Image src={course.thumbnail} alt={course.title} fill sizes="48px" className="rounded-md object-cover" /></div></TableCell>
      <TableCell className="font-medium">{renderEditableCell('title')}</TableCell>
      <TableCell><Badge variant="secondary">{course.category}</Badge></TableCell>
      <TableCell className="text-right w-[120px]">{renderEditableCell('price')}</TableCell>
      <TableCell className="text-right w-[120px]">{course.stock} Slots</TableCell>
      <TableCell className="w-[50px]">
         <DropdownMenu>
            <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onSelect={() => onPreview(course)}><Eye className="mr-2 h-4 w-4" />View Details</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onEdit(course)}><Pencil className="mr-2 h-4 w-4" />Edit</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onDelete(course)} className="text-destructive focus:text-destructive focus:bg-destructive/10"><Trash2 className="mr-2 h-4 w-4" />Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
      </TableCell>
    </tr>
  );
}

export function CourseTable({ courses, onEdit, onDelete, onInlineUpdate, onPreview }: { courses: Course[]; onEdit: (c: Course) => void; onDelete: (c: Course) => void; onInlineUpdate: (id: number, data: Partial<CourseSchema>) => void; onPreview: (c: Course) => void; }) {
  
  return (
    <div className="rounded-lg border bg-card backdrop-blur-xl overflow-hidden">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]"><span className="sr-only">Drag</span></TableHead>
            <TableHead className="w-[80px]">Image</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Category</TableHead>
            <TableHead className="text-right w-[120px]">Tuition</TableHead>
            <TableHead className="text-right w-[120px]">Slots</TableHead>
            <TableHead className="w-[50px]"><span className="sr-only">Actions</span></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <SortableContext items={courses.map(c => c.id)} strategy={verticalListSortingStrategy}>
            {courses.length > 0 ? (
              courses.map((course) => <SortableCourseRow key={course.id} course={course} onEdit={onEdit} onDelete={onDelete} onPreview={onPreview} onInlineUpdate={onInlineUpdate} />)
            ) : (
              <TableRow><TableCell colSpan={7} className="h-24 text-center">No courses to display.</TableCell></TableRow>
            )}
          </SortableContext>
        </TableBody>
      </Table>
    </div>
  );
}
```

# === components/features/course/course-preview-modal.tsx ===
```tsx
"use client";

import Image from "next/image";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Course } from "@/types/course.types";
import { formatCurrency } from "@/lib/utils";

interface CoursePreviewModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  course?: Course;
}

export function CoursePreviewModal({ isOpen, onOpenChange, course }: CoursePreviewModalProps) {
  if (!course) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Course Details</DialogTitle>
        </DialogHeader>
        <div className="mt-4 space-y-6">
          <div className="flex flex-col sm:flex-row gap-6">
            <div className="flex-shrink-0">
              <div className="relative h-[150px] w-[150px] p-1 bg-gradient-to-br from-primary to-secondary rounded-xl">
                <Image
                  src={course.thumbnail}
                  alt={course.title}
                  fill
                  sizes="150px"
                  className="rounded-lg object-cover"
                />
              </div>
            </div>
            <div className="flex-1 space-y-2">
              <h3 className="text-2xl font-bold">{course.title}</h3>
              <div className="flex items-center gap-2">
                <Badge variant="secondary">{course.category}</Badge>
                <span className="text-sm text-muted-foreground">
                  Rating: {course.rating.toFixed(1)}
                </span>
              </div>
              <p className="text-3xl font-light">{formatCurrency(course.price)}</p>
            </div>
          </div>
          
          <div>
            <h4 className="font-semibold text-lg mb-2">Description</h4>
            <p className="text-muted-foreground">{course.description}</p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/enrollment/enrollment-table.tsx ===
```tsx
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Cart } from "@/types/api.types";
import { formatCurrency } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";

export function EnrollmentTable({ enrollments }: { enrollments: Cart[] }) {
  return (
    <div className="rounded-lg border bg-card backdrop-blur-xl overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[120px]">Enrollment ID</TableHead>
              <TableHead>Student ID</TableHead>
              <TableHead className="text-center">Courses</TableHead>
              <TableHead className="text-center">Total Items</TableHead>
              <TableHead className="text-right">Total Price</TableHead>
              <TableHead className="text-right">Discounted Price</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {enrollments.map((cart) => (
              <TableRow key={cart.id}>
                <TableCell className="font-medium">#{cart.id}</TableCell>
                <TableCell>User #{cart.userId}</TableCell>
                <TableCell className="text-center">{cart.totalProducts}</TableCell>
                <TableCell className="text-center">{cart.totalQuantity}</TableCell>
                <TableCell className="text-right">{formatCurrency(cart.total)}</TableCell>
                <TableCell className="text-right font-semibold">
                  <Badge variant="default" className="button-gradient">{formatCurrency(cart.discountedTotal)}</Badge>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
    </div>
  );
}
```

# === components/features/enrollment/enrollment-table-skeleton.tsx ===
```tsx
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

export function EnrollmentTableSkeleton() {
  const skeletonRows = Array.from({ length: 10 });

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[120px]">Enrollment ID</TableHead>
            <TableHead>Student ID</TableHead>
            <TableHead className="text-center">Courses</TableHead>
            <TableHead className="text-center">Total Items</TableHead>
            <TableHead className="text-right">Total Price</TableHead>
            <TableHead className="text-right">Discounted Price</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {skeletonRows.map((_, index) => (
            <TableRow key={index}>
              <TableCell><Skeleton className="h-4 w-12" /></TableCell>
              <TableCell><Skeleton className="h-4 w-24" /></TableCell>
              <TableCell><Skeleton className="h-4 w-8 mx-auto" /></TableCell>
              <TableCell><Skeleton className="h-4 w-8 mx-auto" /></TableCell>
              <TableCell><Skeleton className="h-4 w-16 ml-auto" /></TableCell>
              <TableCell><div className="flex justify-end"><Skeleton className="h-6 w-24 rounded-full" /></div></TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

# === components/layout/header.tsx ===
```tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { Menu, Bell, MessageSquare, AlertCircle, LayoutDashboard, Users, BookOpen, ClipboardCheck, UserSquare } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../ui/card";
import { ThemeToggle } from "@/components/shared/theme-toggle";
import { useSidebar } from "@/hooks/use-sidebar";
import { cn } from "@/lib/utils";

const navLinks = [
  { href: "/", label: "Dashboard", icon: LayoutDashboard },
  { href: "/students", label: "Students", icon: Users },
  { href: "/teachers", label: "Teachers", icon: UserSquare },
  { href: "/courses", label: "Courses", icon: BookOpen },
  { href: "/enrollments", label: "Enrollments", icon: ClipboardCheck },
];

const notifications = [
    { icon: ClipboardCheck, title: "New Enrollment: Physics 101", description: "From Terry Medhurst, 1 minute ago" },
    { icon: AlertCircle, title: "Low Capacity: CS 101", description: "Only 3 slots remaining", isWarning: true },
    { icon: MessageSquare, title: "New Parent Query", description: "Regarding student #15" },
    { icon: ClipboardCheck, title: "Withdrawal Request", description: "For student #22 from Math 202" },
]

export function Header() {
  const { toggle } = useSidebar();
  const pathname = usePathname();

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background/50 px-4 backdrop-blur-lg sm:px-6">
      <Button variant="outline" size="icon" className="shrink-0 hidden lg:flex" onClick={toggle}>
        <Menu className="h-5 w-5" />
        <span className="sr-only">Toggle sidebar</span>
      </Button>

      <Sheet>
        <SheetTrigger asChild>
             <Button variant="outline" size="icon" className="shrink-0 lg:hidden" >
                <Menu className="h-5 w-5" />
                <span className="sr-only">Toggle navigation menu</span>
            </Button>
        </SheetTrigger>
        <SheetContent side="left" className="flex flex-col p-0">
             <div className="flex h-16 items-center justify-between border-b px-6">
                <Link href="/" className="flex items-center gap-2 font-bold tracking-tight">
                    <BookOpen className="h-7 w-7 text-primary" />
                    <span className="text-xl">EduDash</span>
                </Link>
            </div>
            
            <nav className="flex-1 space-y-2 p-4">
              {navLinks.map((link) => {
                const isActive = (link.href === "/" && pathname === "/") || (link.href !== "/" && pathname.startsWith(link.href));
                return (
                  <Link
                    key={link.href}
                    href={link.href}
                    className={cn(
                      "flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary hover:bg-muted",
                      isActive && "bg-primary/10 text-primary"
                    )}
                  >
                    <link.icon className="h-5 w-5" />
                    {link.label}
                  </Link>
                );
              })}
            </nav>
        </SheetContent>
      </Sheet>
      
      <div className="flex w-full items-center justify-end gap-4">
        <Popover>
            <PopoverTrigger asChild>
                <Button variant="outline" size="icon" className="relative">
                    <Bell className="h-5 w-5" />
                    <span className="absolute -top-1 -right-1 flex h-3 w-3">
                      <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75"></span>
                      <span className="relative inline-flex rounded-full h-3 w-3 bg-primary"></span>
                    </span>
                </Button>
            </PopoverTrigger>
            <PopoverContent align="end" className="w-80 p-0">
                <Card>
                    <CardHeader className="pb-2">
                        <CardTitle className="text-lg">Notifications</CardTitle>
                        <CardDescription>You have 4 new notifications.</CardDescription>
                    </CardHeader>
                    <CardContent className="p-2">
                        <div className="flex flex-col gap-1">
                            {notifications.map((item, index) => (
                                <div key={index} className="flex items-start gap-3 rounded-md p-2 hover:bg-muted transition-colors cursor-pointer">
                                    <item.icon className={cn("h-5 w-5 mt-1 flex-shrink-0", item.isWarning && "text-destructive")}/>
                                    <div>
                                        <p className="font-semibold text-sm">{item.title}</p>
                                        <p className="text-xs text-muted-foreground">{item.description}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            </PopoverContent>
        </Popover>

        <ThemeToggle />
      </div>
    </header>
  );
}
```

# === components/layout/sidebar.tsx ===
```tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  LayoutDashboard,
  Users,
  BookOpen,
  ClipboardCheck,
  ChevronLeft,
  ChevronRight,
  LucideProps,
  UserSquare,
} from "lucide-react";
import { useSidebar } from "@/hooks/use-sidebar";
import { cn } from "@/lib/utils";
import { Button } from "../ui/button";
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from "../ui/tooltip";
import { ForwardRefExoticComponent, RefAttributes } from "react";

type NavLink = 
  | { label: string; isHeader: true }
  | { 
      href: string; 
      label: string; 
      icon: ForwardRefExoticComponent<Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>>;
    };

const navLinks: NavLink[] = [
  { href: "/", label: "Dashboard", icon: LayoutDashboard },
  { label: "Management", isHeader: true },
  { href: "/students", label: "Students", icon: Users },
  { href: "/teachers", label: "Teachers", icon: UserSquare },
  { href: "/courses", label: "Courses", icon: BookOpen },
  { href: "/enrollments", label: "Enrollments", icon: ClipboardCheck },
];

export function Sidebar() {
  const { isOpen, toggle } = useSidebar();
  const pathname = usePathname();

  return (
    <aside
      className={cn(
        "fixed inset-y-0 left-0 z-10 hidden flex-col border-r bg-background/50 backdrop-blur-lg transition-all duration-300 ease-in-out lg:flex",
        isOpen ? "w-64" : "w-20"
      )}
    >
      <div className="flex h-16 items-center justify-between border-b px-6">
        <Link href="/" className={cn("flex items-center gap-2 font-bold tracking-tight", !isOpen && "justify-center")}>
          <BookOpen className="h-7 w-7 text-primary" />
          <span className={cn("text-xl", !isOpen && "hidden")}>EduDash</span>
        </Link>
        <Button variant="ghost" size="icon" className="hidden lg:flex" onClick={toggle}>
            {isOpen ? <ChevronLeft className="h-5 w-5"/> : <ChevronRight className="h-5 w-5"/>}
        </Button>
      </div>
      <nav className="flex-1 space-y-1 p-2">
        <TooltipProvider delayDuration={0}>
          {navLinks.map((link) => {
            if ("isHeader" in link) {
              return (
                <div key={link.label} className={cn(
                    "px-3 pt-4 pb-2 text-xs font-semibold uppercase text-muted-foreground/80 tracking-wider",
                    !isOpen && "hidden"
                )}>
                    {link.label}
                </div>
              );
            } else {
              const isActive = (link.href === "/" && pathname === "/") || (link.href !== "/" && pathname.startsWith(link.href));
              const LinkIcon = link.icon;
              
              const content = (
                  <Link
                    href={link.href}
                    className={cn(
                      "flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary hover:bg-muted",
                      isActive && "bg-primary/10 text-primary",
                      !isOpen && "justify-center"
                    )}
                  >
                    <LinkIcon className="h-5 w-5" />
                    <span className={cn("font-medium", !isOpen && "hidden")}>{link.label}</span>
                  </Link>
              );

              return (
                <div key={link.href}>
                  {isOpen ? (
                      content
                  ) : (
                    <Tooltip>
                      <TooltipTrigger asChild>{content}</TooltipTrigger>
                      <TooltipContent side="right">
                        <p>{link.label}</p>
                      </TooltipContent>
                    </Tooltip>
                  )}
                </div>
              );
            }
          })}
        </TooltipProvider>
      </nav>
    </aside>
  );
}
```
