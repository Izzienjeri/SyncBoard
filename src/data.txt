Excellent request. Adding "create" functionality is the next logical step to make this prototype more complete. It involves creating new UI components (modals with forms), handling form state and validation, and updating the application's state after a successful creation.

I'll demonstrate how to add the functionality to create both **new students/teachers** and **new subjects**. We'll follow the existing architectural patterns to ensure the new code integrates seamlessly.

Here is a breakdown of the required changes, followed by the new and modified code files.

### Strategy for Implementation

1.  **Add a "Create" Button:** Place an "Add Student," "Add Teacher," or "Add Subject" button in the header of the respective management pages.
2.  **Create a Form Modal:** Build a new reusable modal component for creation. This modal will contain a form.
3.  **Use a Form Library (Best Practice):** For the student/teacher form, we'll use `react-hook-form` for state management and `zod` for validation. This is a robust and scalable approach for handling complex forms.
4.  **Mock the API Call:** Since `dummyjson.com` doesn't support creating new users, we'll create a new mock `addUser` function in `lib/api.ts` that simulates a successful API response. For subjects, we'll directly manipulate the mock data array.
5.  **Update the UI Optimistically:** After "creating" a new record, we will use SWR's `mutate` function to instantly update the UI, providing a fast and responsive user experience.

---

### New and Modified Files

Here are the necessary code changes.

#### 1. Update API and Mock Data (`lib/api.ts`)

First, let's add a new `addUser` function to our API file. Since we can't actually post to `dummyjson.com`, this function will simulate the creation process.

```ts
// === lib/api.ts (Updated) ===
import { User, UsersApiResponse } from "@/types/api.types";
import { allSubjects } from "./mock-data";

const DUMMY_JSON_URL = "https://dummyjson.com";

// ... (getUsers, updateUser, deleteUser functions remain the same) ...

export async function addUser(userData: Omit<User, 'id' | 'image' | 'address'>): Promise<User> {
  console.log("Simulating adding user:", userData);
  try {
    // In a real app, this would be a POST request.
    // const res = await fetch(`${YOUR_REAL_API_URL}/users`, {
    //   method: "POST",
    //   headers: { "Content-Type": "application/json" },
    //   body: JSON.stringify(userData),
    // });
    // if (!res.ok) throw new Error("Failed to add user");
    // return await res.json();

    // Mocking the response for dummyjson
    const res = await fetch(`${DUMMY_JSON_URL}/users/add`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData),
    });
    if (!res.ok) throw new Error("DummyJSON failed to simulate add.");
    const newUser: User = await res.json();
    
    // DummyJSON doesn't return a full user object, so we'll merge and mock parts.
    return {
        ...newUser,
        ...userData,
        image: `https://i.pravatar.cc/150?u=${newUser.id}`,
        address: {
            address: "123 Mock St",
            city: "Testville",
            postalCode: "12345",
            state: "TS",
        }
    };
  } catch(e) {
    console.error("Add user failed:", e);
    throw new Error("Could not add the user.");
  }
}


export async function getTotalStudents(): Promise<number> {
  return 100;
}

export async function getTotalTeachers(): Promise<number> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users?limit=0`);
    if (!res.ok) {
      return 50;
    }
    const data: UsersApiResponse = await res.json();
    return data.total > 100 ? data.total - 100 : 0;
  } catch (e) {
    console.error("Failed to get total teachers:", e);
    return 50;
  }
}

export async function getSubjects(): Promise<string[]> {
  return Promise.resolve(allSubjects);
}
```

#### 2. Create the "Add User" Modal and Form

This is a new component that uses `react-hook-form` and `zod` for a robust form experience.

```tsx
// === NEW FILE: components/features/user/create-user-modal.tsx ===
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { User } from "@/types/api.types";
import { useState } from "react";

const userSchema = z.object({
  firstName: z.string().min(2, "First name must be at least 2 characters."),
  lastName: z.string().min(2, "Last name must be at least 2 characters."),
  email: z.string().email("Please enter a valid email address."),
  phone: z.string().min(10, "Phone number seems too short."),
});

type UserFormData = z.infer<typeof userSchema>;

export interface CreateUserModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onUserCreated: (newUser: Omit<User, 'id' | 'image' | 'address'>) => void;
  userType: 'student' | 'teacher';
}

export function CreateUserModal({ isOpen, onOpenChange, onUserCreated, userType }: CreateUserModalProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const form = useForm<UserFormData>({
    resolver: zodResolver(userSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
    },
  });

  const onSubmit = async (data: UserFormData) => {
    setIsSubmitting(true);
    await onUserCreated(data);
    setIsSubmitting(false);
    form.reset();
    onOpenChange(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Add New {userType === 'student' ? 'Student' : 'Teacher'}</DialogTitle>
          <DialogDescription>
            Enter the details below to create a new {userType} profile.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
                <FormField control={form.control} name="firstName" render={({ field }) => (
                    <FormItem>
                        <FormLabel>First Name</FormLabel>
                        <FormControl><Input placeholder="John" {...field} /></FormControl>
                        <FormMessage />
                    </FormItem>
                )}/>
                <FormField control={form.control} name="lastName" render={({ field }) => (
                    <FormItem>
                        <FormLabel>Last Name</FormLabel>
                        <FormControl><Input placeholder="Doe" {...field} /></FormControl>
                        <FormMessage />
                    </FormItem>
                )}/>
            </div>
            <FormField control={form.control} name="email" render={({ field }) => (
                <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl><Input type="email" placeholder="john.doe@example.com" {...field} /></FormControl>
                    <FormMessage />
                </FormItem>
            )}/>
            <FormField control={form.control} name="phone" render={({ field }) => (
                <FormItem>
                    <FormLabel>Phone Number</FormLabel>
                    <FormControl><Input placeholder="+1 234 567 890" {...field} /></FormControl>
                    <FormMessage />
                </FormItem>
            )}/>
            <DialogFooter className="pt-4">
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
              <Button type="submit" disabled={isSubmitting} className="button-gradient">
                {isSubmitting ? 'Saving...' : `Save ${userType === 'student' ? 'Student' : 'Teacher'}`}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```

#### 3. Integrate the Create Modal into the User Management Page

Now, we update `UserManagementPage` to include the button and handle the creation logic.

```tsx
// === components/features/user/user-management-page.tsx (Updated) ===
"use client";

import useSWR, { useSWRConfig } from "swr";
import { useState } from "react";
import { toast } from "sonner";
import dynamic from "next/dynamic";
import { AlertTriangle, PlusCircle } from "lucide-react";

import { PageHeader } from "@/components/shared/page-header";
import { UserTable } from "@/components/features/user/user-table";
import { UserTableSkeleton } from "@/components/features/user/user-table-skeleton";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
// MODIFIED: Import `addUser`
import { getUsers, updateUser, deleteUser, addUser, getTotalStudents, getTotalTeachers } from "@/lib/api";
import { User, UsersApiResponse } from "@/types/api.types";
import { Button } from "@/components/ui/button"; // NEW
import type { UserPreviewModalProps } from "./user-preview-modal";
// NEW: Import the create modal
import type { CreateUserModalProps } from "./create-user-modal";

const UserPreviewModal = dynamic<UserPreviewModalProps>(() => import("@/components/features/user/user-preview-modal").then(mod => mod.UserPreviewModal));
// NEW: Dynamically import the create modal
const CreateUserModal = dynamic<CreateUserModalProps>(() => import("@/components/features/user/create-user-modal").then(mod => mod.CreateUserModal));


interface UserManagementPageProps {
  userType: 'student' | 'teacher';
  pageTitle: string;
  pageDescription: string;
}

export function UserManagementPage({ userType, pageTitle, pageDescription }: UserManagementPageProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [selectedUser, setSelectedUser] = useState<User | undefined>(undefined);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false); // NEW

  const { mutate: globalMutate } = useSWRConfig();

  const skip = userType === 'student' 
    ? (currentPage - 1) * itemsPerPage 
    : 100 + (currentPage - 1) * itemsPerPage;
  const swrKey = `https://dummyjson.com/users?limit=${itemsPerPage}&skip=${skip}`;
  
  const { data, error, isLoading, mutate } = useSWR(swrKey, getUsers, { keepPreviousData: true });
  const { data: totalCount, isLoading: totalLoading } = useSWR(
    userType === 'student' ? 'totalStudents' : 'totalTeachers',
    userType === 'student' ? getTotalStudents : getTotalTeachers
  );

  const handleItemsPerPageChange = (value: string) => {
    setItemsPerPage(Number(value));
    setCurrentPage(1);
  };
  
  // NEW: Handler for creating a user
  const handleUserCreated = async (userData: Omit<User, 'id' | 'image' | 'address'>) => {
    try {
      const newUser = await addUser(userData);
      
      // Optimistically update the UI if on the first page
      if (currentPage === 1) {
          mutate(async (currentData?: UsersApiResponse) => {
            if (!currentData) return currentData;
            return { ...currentData, users: [newUser, ...currentData.users].slice(0, itemsPerPage) };
          }, { revalidate: false });
      }

      toast.success(`${userType === 'student' ? 'Student' : 'Teacher'} created successfully!`, {
        description: "Note: This is a simulation. The new user will disappear on page refresh.",
      });
    } catch {
      toast.error(`Failed to create ${userType}.`);
    }
  };

  const handleUserUpdate = async (id: number, userData: Partial<User>) => {
    // ... (existing code)
  };

  const handleViewUser = (user: User) => {
    // ... (existing code)
  };

  const handleDeleteUser = async (userId: number) => {
    // ... (existing code)
  };

  const renderContent = () => {
    // ... (existing code)
  };

  const totalPages = totalCount ? Math.ceil(totalCount / itemsPerPage) : 0;
  const capitalizedUserType = userType.charAt(0).toUpperCase() + userType.slice(1);

  return (
    <div className="flex flex-col gap-6">
      <PageHeader
        title={pageTitle}
        description={pageDescription}
      >
        {/* NEW: Add user button */}
        <Button onClick={() => setIsCreateModalOpen(true)} className="button-gradient">
          <PlusCircle className="mr-2 h-4 w-4" />
          Add {capitalizedUserType}
        </Button>
      </PageHeader>
      
      {renderContent()}

      {!totalLoading && (
         <TablePaginationControls
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
            itemsPerPage={itemsPerPage}
            onItemsPerPageChange={handleItemsPerPageChange}
            totalItems={totalCount ?? 0}
            itemType={`${userType}s`}
         />
      )}

      {isViewModalOpen && (
        <UserPreviewModal
            isOpen={isViewModalOpen}
            onOpenChange={setIsViewModalOpen}
            user={selectedUser}
        />
      )}
      
      {/* NEW: Render the create user modal */}
      <CreateUserModal
        isOpen={isCreateModalOpen}
        onOpenChange={setIsCreateModalOpen}
        onUserCreated={handleUserCreated}
        userType={userType}
      />
    </div>
  );
}
```

#### 4. Create the "Add Subject" Modal

This form is simpler, so we'll use basic `useState` instead of a full form library.

```tsx
// === NEW FILE: components/features/subject/create-subject-modal.tsx ===
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

export interface CreateSubjectModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onSubjectCreated: (subjectName: string) => void;
}

export function CreateSubjectModal({
  isOpen,
  onOpenChange,
  onSubjectCreated,
}: CreateSubjectModalProps) {
  const [subjectName, setSubjectName] = useState("");
  const [error, setError] = useState("");

  const handleSave = () => {
    const trimmedName = subjectName.trim();
    if (trimmedName.length < 3) {
      setError("Subject name must be at least 3 characters long.");
      return;
    }
    // Convert to a slug format to match existing data
    const slug = trimmedName.toLowerCase().replace(/\s+/g, '-');
    onSubjectCreated(slug);
    setSubjectName("");
    setError("");
    onOpenChange(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Add New Subject</DialogTitle>
          <DialogDescription>
            Enter a name for the new subject.
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-2 py-4">
            <Label htmlFor="subject-name">Subject Name</Label>
            <Input 
              id="subject-name"
              value={subjectName}
              onChange={(e) => {
                setSubjectName(e.target.value);
                if (error) setError("");
              }}
              placeholder="e.g., Creative Writing"
            />
            {error && <p className="text-sm text-destructive">{error}</p>}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
          <Button onClick={handleSave} className="button-gradient">Add Subject</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
```

#### 5. Integrate "Add Subject" into the Subjects Page

Finally, update the `SubjectsPage` to include the new modal and functionality.

```tsx
// === app/(dashboard)/subjects/page.tsx (Updated) ===
"use client";

import { useState } from "react";
import useSWR from "swr";
import dynamic from "next/dynamic";
// MODIFIED: Import PlusCircle
import { AlertTriangle, Pencil, Trash2, PlusCircle } from "lucide-react"; 
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { getSubjects } from "@/lib/api";
import { PageHeader } from "@/components/shared/page-header";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// MODIFIED: Import all necessary data from mock-data
import { allSubjects, mockTeachers, subjectTeacherMapping, subjectScoreData, Teacher } from "@/lib/mock-data";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { User } from "@/types/api.types";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
import type { UserPreviewModalProps } from "@/components/features/user/user-preview-modal";
// NEW: Import the create subject modal
import type { CreateSubjectModalProps } from "@/components/features/subject/create-subject-modal";

const ManageInstructorsModal = dynamic(() => import("@/components/features/subject/manage-instructors-modal").then(mod => mod.ManageInstructorsModal));
const UserPreviewModal = dynamic<UserPreviewModalProps>(() => import("@/components/features/user/user-preview-modal").then(mod => mod.UserPreviewModal));
// NEW: Dynamically import create subject modal
const CreateSubjectModal = dynamic<CreateSubjectModalProps>(() => import("@/components/features/subject/create-subject-modal").then(mod => mod.CreateSubjectModal));


// ... (TeacherAvatar component remains the same) ...

export default function SubjectsPage() {
  const [period, setPeriod] = useState<Period>("this_term");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(6);
  
  const { data: subjects, error, isLoading, mutate } = useSWR("subjects", getSubjects);
  // ... (allUsers SWR fetch remains the same) ...

  const [modalState, setModalState] = useState<{
    manageInstructors: boolean;
    viewTeacher: boolean;
    createSubject: boolean; // NEW
    subject: string | null;
    teacher: User | null;
  }>({ manageInstructors: false, viewTeacher: false, createSubject: false, subject: null, teacher: null });
  
  // ... (handleItemsPerPageChange, handleDeleteSubject, handleManageInstructors, handleViewTeacher, handleSaveInstructors remain the same) ...

  // NEW: Handler for creating a subject
  const handleSubjectCreated = (newSubjectName: string) => {
    // Check for duplicates
    if (allSubjects.includes(newSubjectName)) {
      toast.error(`Subject "${newSubjectName.replace(/-/g, ' ')}" already exists.`);
      return;
    }

    // Mutate mock data directly (since there's no backend)
    allSubjects.push(newSubjectName);
    subjectTeacherMapping[newSubjectName] = [];
    Object.keys(subjectScoreData).forEach(p => {
        subjectScoreData[p].push({ name: newSubjectName, averageScore: 0 });
    });

    // Trigger re-render for components using 'subjects' SWR key
    mutate();
    toast.success(`Subject "${newSubjectName.replace(/-/g, ' ')}" created successfully.`, {
      description: "Note: This is a simulation. The new subject will disappear on page refresh.",
    });
  };

  const totalPages = subjects ? Math.ceil(subjects.length / itemsPerPage) : 0;

  // ... (renderContent function remains the same, it will automatically pick up the new subject after mutate() is called) ...

  return (
    <div className="flex flex-col gap-6">
      <PageHeader title="Subjects Overview" description="View details for each subject offered.">
        {/* NEW: Add Subject Button */}
        <Button onClick={() => setModalState({ ...modalState, createSubject: true })} className="button-gradient order-first md:order-last">
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Subject
        </Button>
        <Select value={period} onValueChange={(value) => setPeriod(value as Period)}>
          <SelectTrigger className="w-full sm:w-[180px]"><SelectValue placeholder="Filter period" /></SelectTrigger>
          <SelectContent>
            <SelectItem value="this_term">This Term</SelectItem>
            <SelectItem value="last_term">Last Term</SelectItem>
            <SelectItem value="full_year">Full Year</SelectItem>
          </SelectContent>
        </Select>
      </PageHeader>
      
      {renderContent()}
      
      {/* ... (pagination and other modals remain the same) ... */}
      
      {/* NEW: Render the Create Subject Modal */}
      <CreateSubjectModal
        isOpen={modalState.createSubject}
        onOpenChange={(isOpen) => setModalState({ ...modalState, createSubject: isOpen })}
        onSubjectCreated={handleSubjectCreated}
      />
    </div>
  );
}
```

### Summary of Changes

You now have a fully functional (within the prototype's limits) "create" flow for both users and subjects.

-   **User Creation:** A robust, validated form inside a modal allows for adding new students and teachers. The UI updates optimistically, making the app feel very fast.
-   **Subject Creation:** A simpler modal lets you add new subjects by name. The app's local mock data is updated, and SWR's `mutate` function ensures the UI reflects the change immediately.
-   **Consistent UX:** The "Add" buttons are placed logically in the page headers, and the new modals match the style and behavior of the existing ones (`UserPreviewModal`, `ManageInstructorsModal`).

This significantly enhances the practical feel of the prototype, even though the data persistence remains simulated.