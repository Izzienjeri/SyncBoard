Excellent feedback. I've implemented all your requested features, focusing on robust sorting, a cleaner editing experience, and more functionality when creating subjects.

Here is a summary of the key improvements:

1.  **Comprehensive Sorting:**
    *   **Students Page:** You can now sort students by `Name` or `Grade` (ascending/descending) using a new dropdown menu.
    *   **Teachers Page:** Similarly, teachers can be sorted by `Name` or `Subject`.
    *   **Subjects Page:** The subjects list can now be sorted by `Name`, `Number of Students`, or `Average Grade`.
    *   All sorting is integrated with pagination and search, ensuring a consistent experience.

2.  **Improved Inline Editing UI:**
    *   The previous "click to edit" text has been replaced. Now, when you hover over a student's or teacher's name in the table, a subtle **pencil icon** appears, indicating that the row is editable. Clicking the icon opens the pre-filled edit modal.

3.  **Enhanced "Add Subject" Modal:**
    *   You can now **assign instructors directly when creating a new subject**. The "Add Subject" modal now includes the same instructor selection list that was previously only available in the "Edit" modal.

Here are the updated files with these new features:

# âœ¨ Modified Files

# === app/api/students/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import { createRandomStudent, Student } from '@/lib/fake-generators';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const limit = parseInt(searchParams.get('limit') || '10');
  const skip = parseInt(searchParams.get('skip') || '0');
  const search = searchParams.get('search')?.toLowerCase() || '';
  const sortBy = searchParams.get('sortBy');
  const sortOrder = searchParams.get('sortOrder') || 'asc';

  let filteredStudents = db.students;

  if (search) {
    filteredStudents = db.students.filter(student =>
      student.firstName.toLowerCase().includes(search) ||
      student.lastName.toLowerCase().includes(search) ||
      student.email.toLowerCase().includes(search)
    );
  }

  // Sorting logic
  if (sortBy) {
    filteredStudents.sort((a, b) => {
      let valA, valB;

      switch (sortBy) {
        case 'name':
          valA = `${a.firstName} ${a.lastName}`;
          valB = `${b.firstName} ${b.lastName}`;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        case 'grade':
          valA = a.grade;
          valB = b.grade;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        default:
          return 0;
      }
    });
  }


  const total = filteredStudents.length;
  const paginatedStudents = filteredStudents.slice(skip, skip + limit);

  return NextResponse.json({
    users: paginatedStudents,
    total: total,
    skip,
    limit,
  });
}

export async function POST(request: Request) {
  const body = await request.json();
  const newStudent: Student = {
    ...createRandomStudent(),
    ...body,
  };
  db.students.unshift(newStudent);
  return NextResponse.json(newStudent, { status: 201 });
}
```

# === app/api/teachers/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import { createRandomTeacher, Teacher } from '@/lib/fake-generators';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const limit = parseInt(searchParams.get('limit') || '10');
  const skip = parseInt(searchParams.get('skip') || '0');
  const search = searchParams.get('search')?.toLowerCase() || '';
  const sortBy = searchParams.get('sortBy');
  const sortOrder = searchParams.get('sortOrder') || 'asc';

  let filteredTeachers = db.teachers;

  if (search) {
    filteredTeachers = db.teachers.filter(teacher =>
      teacher.firstName.toLowerCase().includes(search) ||
      teacher.lastName.toLowerCase().includes(search) ||
      teacher.email.toLowerCase().includes(search)
    );
  }

  // Sorting logic
  if (sortBy) {
    filteredTeachers.sort((a, b) => {
      let valA, valB;
      switch (sortBy) {
        case 'name':
          valA = `${a.firstName} ${a.lastName}`;
          valB = `${b.firstName} ${b.lastName}`;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        case 'subject':
          valA = a.subject;
          valB = b.subject;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        default:
          return 0;
      }
    });
  }
  
  const total = filteredTeachers.length;
  const paginatedTeachers = filteredTeachers.slice(skip, skip + limit);

  return NextResponse.json({
    users: paginatedTeachers,
    total: total,
    skip,
    limit,
  });
}

export async function POST(request: Request) {
  const body = await request.json();
  const newTeacher: Teacher = {
    ...createRandomTeacher(),
    ...body,
  };
  db.teachers.unshift(newTeacher);
  return NextResponse.json(newTeacher, { status: 201 });
}
```

# === app/api/subjects/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import { Teacher } from '@/lib/fake-generators';

export async function GET() {
  return NextResponse.json(db.subjects.sort());
}

export async function POST(request: Request) {
  const { subjectName, teacherIds } = await request.json();
  if (!subjectName) {
    return NextResponse.json({ message: "Subject name is required." }, { status: 400 });
  }
  
  const formattedName = subjectName.charAt(0).toUpperCase() + subjectName.slice(1).toLowerCase();

  if (db.subjects.find(s => s.toLowerCase() === formattedName.toLowerCase())) {
    return NextResponse.json({ message: "Subject already exists." }, { status: 409 });
  }

  db.subjects.push(formattedName);

  if (teacherIds && Array.isArray(teacherIds)) {
    teacherIds.forEach((id: number) => {
      const teacher = db.teachers.find(t => t.id === id);
      if (teacher) {
        teacher.subject = formattedName;
      }
    });
  }

  return NextResponse.json({ name: formattedName }, { status: 201 });
}
```

# === lib/api.ts ===
```ts
import { User } from "@/types/api.types";
import { Teacher } from "./fake-generators";

/**
 * A generic fetcher function for use with SWR.
 * @param url The URL to fetch.
 * @returns The JSON response.
 */
export const fetcher = (url: string) => fetch(url).then(res => res.json());


/**
 * Adds a new student or teacher to the database.
 * @param userType - The type of user to add ('student' or 'teacher').
 * @param userData - The form data for the new user.
 * @returns The newly created user object.
 */
export async function addUser(userType: 'student' | 'teacher', userData: Partial<User>): Promise<User> {
  const res = await fetch(`/api/${userType}s`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(userData),
  });
  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.message || `Failed to add ${userType}`);
  }
  return res.json();
}

/**
 * Updates an existing student or teacher in the database.
 * @param userType - The type of user to update ('student' or 'teacher').
 * @param userId - The ID of the user to update.
 * @param userData - The updated form data.
 * @returns The updated user object.
 */
export async function updateUser(userType: 'student' | 'teacher', userId: number, userData: Partial<User>): Promise<User> {
  const res = await fetch(`/api/${userType}s/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(userData),
  });
  if (!res.ok) {
      const errorData = await res.json();
      throw new Error(errorData.message || `Failed to update ${userType}`);
  }
  return res.json();
}

/**
 * Deletes a student or teacher from the database.
 * @param userType - The type of user to delete ('student' or 'teacher').
 * @param userId - The ID of the user to delete.
 * @returns A confirmation object.
 */
export async function deleteUser(userType: 'student' | 'teacher', userId: number): Promise<{ id: number, isDeleted: boolean }> {
  const res = await fetch(`/api/${userType}s/${userId}`, { method: "DELETE" });
  if (!res.ok) {
      const errorData = await res.json();
      throw new Error(errorData.message || `Failed to delete ${userType}`);
  }
  return res.json();
}



/**
 * Gets the total number of students.
 * @returns The total count of students.
 */
export async function getTotalStudents(): Promise<number> {
    const res = await fetch('/api/students?limit=0');
    if (!res.ok) return 0;
    const data = await res.json();
    return data.total;
}

/**
 * Gets the total number of teachers.
 * @returns The total count of teachers.
 */
export async function getTotalTeachers(): Promise<number> {
    const res = await fetch('/api/teachers?limit=0');
    if (!res.ok) return 0;
    const data = await res.json();
    return data.total;
}

/**
 * Gets the complete list of all teachers (not paginated).
 * @returns An array of all teacher objects.
 */
export async function getAllTeachers(): Promise<Teacher[]> {
    return fetcher('/api/teachers/all');
}



/**
 * Gets the list of all available subjects.
 * @returns An array of subject names.
 */
export async function getSubjects(): Promise<string[]> {
    return fetcher('/api/subjects');
}

/**
 * Adds a new subject to the database.
 * @param data - The data for the new subject including name and assigned teacher IDs.
 * @returns The newly created subject object.
 */
export async function addSubject(data: { subjectName: string; teacherIds: number[] }): Promise<{ name: string }> {
    const res = await fetch('/api/subjects', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });
    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || 'Failed to add subject');
    }
    return res.json();
}

/**
 * Updates a subject's details (name and/or assigned teachers).
 * @param oldName - The current name of the subject.
 * @param data - An object containing the new name and an array of teacher IDs.
 * @returns A confirmation message.
 */
export async function updateSubject(oldName: string, data: { newSubjectName: string, teacherIds: number[] }): Promise<{ message: string }> {
    const res = await fetch(`/api/subjects/${encodeURIComponent(oldName)}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });
    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || 'Failed to update subject');
    }
    return res.json();
}

/**
 * Deletes a subject from the database.
 * @param subjectName - The name of the subject to delete.
 * @returns A confirmation message.
 */
export async function deleteSubject(subjectName: string): Promise<{ message: string }> {
    const res = await fetch(`/api/subjects/${encodeURIComponent(subjectName)}`, {
        method: 'DELETE',
    });
    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || 'Failed to delete subject');
    }
    return res.json();
}
```

# === hooks/user-management.ts ===
```ts
import { useState, useMemo } from "react";
import useSWR, { MutatorCallback } from "swr";
import { toast } from "sonner";
import { User, UsersApiResponse } from "@/types/api.types";
import { addUser, updateUser, deleteUser as deleteUserApi, fetcher } from "@/lib/api";
import { UserFormValues } from "@/lib/schemas";

interface UseUserManagementProps {
  userType: 'student' | 'teacher';
  itemsPerPage: number;
  currentPage: number;
  searchTerm: string;
  sortBy: string;
  sortOrder: string;
}

export function useUserManagement({ userType, itemsPerPage, currentPage, searchTerm, sortBy, sortOrder }: UseUserManagementProps) {
  const [userToEdit, setUserToEdit] = useState<User | undefined>(undefined);
  const [userToDelete, setUserToDelete] = useState<User | null>(null);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  
  const entityName = useMemo(() => (userType === 'student' ? 'Student' : 'Teacher'), [userType]);

  const skip = (currentPage - 1) * itemsPerPage;
  const swrKey = `/api/${userType}s?limit=${itemsPerPage}&skip=${skip}&search=${encodeURIComponent(searchTerm)}&sortBy=${sortBy}&sortOrder=${sortOrder}`;
  
  const { data, error, isLoading, mutate } = useSWR<UsersApiResponse>(swrKey, fetcher, { keepPreviousData: true });
  

  const handleFormSubmit = async (formData: UserFormValues, userId?: number) => {
    try {
      if (userId) {
        await updateUser(userType, userId, formData);
        toast.success(`${entityName} updated successfully!`);
      } else {
        await addUser(userType, formData);
        toast.success(`${entityName} added successfully.`);
      }
      mutate(); 
    } catch (err) {
      const message = err instanceof Error ? err.message : `Failed to save ${entityName.toLowerCase()}.`;
      toast.error(message);
    }
  };
  
  const handleDeleteUser = async (userId: number) => {
    const optimisticData: MutatorCallback<UsersApiResponse> = (currentData) => {
      if (!currentData) return currentData;
      return { ...currentData, users: currentData.users.filter(u => u.id !== userId) };
    };
    await mutate(optimisticData, { revalidate: false });

    try {
      await deleteUserApi(userType, userId);
      toast.success(`${entityName} deleted successfully.`);
    } catch {
      toast.error(`Failed to delete ${entityName.toLowerCase()}.`);
      mutate();
    } finally {
      setUserToDelete(null);
    }
  };
  
  const openCreateModal = () => {
    setUserToEdit(undefined);
    setIsFormModalOpen(true);
  };
  
  const openEditModal = (user: User) => {
    setUserToEdit(user);
    setIsFormModalOpen(true);
  };
  
  const openDeleteDialog = (user: User) => {
    setUserToDelete(user);
  };

  const closeFormModal = () => setIsFormModalOpen(false);
  const closeDeleteDialog = () => setUserToDelete(null);

  return {
    data,
    error,
    isLoading,
    isFormModalOpen,
    userToEdit,
    openCreateModal,
    openEditModal,
    closeFormModal,
    handleFormSubmit,
    userToDelete,
    openDeleteDialog,
    closeDeleteDialog,
    handleDeleteUser,
  };
}
```

# === app/(dashboard)/subjects/page.tsx ===
```tsx
"use client";

import { useState, useMemo } from "react";
import useSWR from "swr";
import Image from "next/image";
import { AlertTriangle, Pencil, PlusCircle, Trash2, Eye, Search } from "lucide-react";
import { addSubject, getSubjects, getAllTeachers, updateSubject, deleteSubject } from "@/lib/api";
import { Teacher } from "@/lib/fake-generators";

import { PageHeader } from "@/components/shared/page-header";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
import { toast } from "sonner";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AddSubjectModal } from "@/components/features/subject/add-subject-modal";
import { ConfirmationDialog } from "@/components/shared/confirmation-dialog";
import { EditSubjectModal } from "@/components/features/subject/EditSubjectModal";
import { SubjectDetailsModal } from "@/components/features/subject/SubjectDetailsModal";
import { Input } from "@/components/ui/input";

type SubjectDetails = {
  name: string;
  teachers: Teacher[];
  studentCount: number;
  avgGrade: number;
}

const TeacherAvatar = ({ teacher }: { teacher: Teacher }) => (
  <div className="group relative" title={`${teacher.firstName} ${teacher.lastName}`}>
    <Image
      src={teacher.image}
      alt={teacher.firstName}
      width={32}
      height={32}
      className="rounded-full border-2 border-card transition-transform group-hover:scale-110"
    />
  </div>
);

export default function SubjectsPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(6);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("name-asc");
  
  const [modalState, setModalState] = useState<{
    add: boolean;
    edit: string | null;
    delete: string | null;
    view: SubjectDetails | null;
  }>({ add: false, edit: null, delete: null, view: null });

  const { data: subjects, error: subjectsError, isLoading: subjectsLoading, mutate: mutateSubjects } = useSWR("/api/subjects", getSubjects);
  const { data: allTeachers, isLoading: teachersLoading, mutate: mutateTeachers } = useSWR("/api/teachers/all", getAllTeachers);

  const subjectDetailsMap = useMemo(() => {
    const map = new Map<string, SubjectDetails>();
    if (subjects && allTeachers) {
      subjects.forEach((subject: string) => {
        map.set(subject, {
          name: subject,
          teachers: allTeachers.filter((t: Teacher) => t.subject === subject),
          studentCount: Math.floor(Math.random() * 80) + 20,
          avgGrade: Math.random() * (95 - 70) + 70,
        });
      });
    }
    return map;
  }, [subjects, allTeachers]);

  const sortedSubjects = useMemo(() => {
    if (!subjects) return [];
    
    let subjectsToProcess = subjects.filter(subject => 
      subject.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const [sortBy, sortOrder] = sortOption.split('-');

    subjectsToProcess.sort((a, b) => {
        const detailsA = subjectDetailsMap.get(a);
        const detailsB = subjectDetailsMap.get(b);
        if (!detailsA || !detailsB) return 0;

        let comparison = 0;
        switch (sortBy) {
            case 'students':
                comparison = detailsA.studentCount - detailsB.studentCount;
                break;
            case 'grade':
                comparison = detailsA.avgGrade - detailsB.avgGrade;
                break;
            case 'name':
            default:
                comparison = a.localeCompare(b);
        }
        return sortOrder === 'asc' ? comparison : -comparison;
    });

    return subjectsToProcess;
  }, [subjects, searchQuery, sortOption, subjectDetailsMap]);


  const handleSubjectAdded = async (data: { newSubjectName: string; teacherIds: number[] }) => {
    try {
      const newSubject = await addSubject({ subjectName: data.newSubjectName, teacherIds: data.teacherIds });
      toast.success(`Subject "${newSubject.name}" added successfully.`);
      await Promise.all([mutateSubjects(), mutateTeachers()]);
    } catch (e: unknown) {
      if (e instanceof Error) toast.error(e.message);
      throw e;
    }
  };
  
  const handleDeleteSubject = async (subjectName: string) => {
    try {
      await deleteSubject(subjectName);
      toast.success(`Subject "${subjectName}" deleted.`);
      await mutateSubjects();
    } catch(e: unknown) {
      if (e instanceof Error) toast.error(e.message);
    }
  };

  const handleSubjectUpdate = async (oldName: string, data: { newSubjectName: string, teacherIds: number[] }) => {
    try {
        await updateSubject(oldName, data);
        toast.success(`Subject "${data.newSubjectName}" updated successfully.`);
        await Promise.all([mutateSubjects(), mutateTeachers()]);
    } catch(e: unknown) {
        if (e instanceof Error) toast.error(e.message);
        throw e;
    }
  };

  const totalPages = sortedSubjects ? Math.ceil(sortedSubjects.length / itemsPerPage) : 0;

  const renderContent = () => {
    if (subjectsLoading || teachersLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: itemsPerPage }).map((_, i) => <Skeleton key={i} className="h-56 rounded-xl" />)}
        </div>
      );
    }
    if (subjectsError) {
      return ( <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" /> <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load subjects. Please try again.</AlertDescription>
        </Alert> );
    }
    if (!sortedSubjects || sortedSubjects.length === 0) {
      return ( <div className="text-center py-10 glass-card rounded-lg">
          <h3 className="text-xl font-medium">No Subjects Found</h3>
          <p className="text-muted-foreground">{searchQuery ? "Try a different search term." : "Click \"Add Subject\" to get started."}</p>
        </div> );
    }

    const paginatedSubjects = sortedSubjects.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {paginatedSubjects.map((subjectName) => {
          const details = subjectDetailsMap.get(subjectName);
          if (!details) return null;
          
          return (
            <Card key={details.name} className="glass-card flex flex-col justify-between rounded-xl overflow-hidden shadow-lg hover:shadow-primary/20 transition-all duration-300 group cursor-pointer"
              onClick={() => setModalState({...modalState, view: details})}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle className="capitalize text-lg font-bold text-foreground">{details.name}</CardTitle>
                  <div className="flex items-center -mr-2 -mt-2 opacity-0 group-hover:opacity-100 transition-opacity" onClick={(e) => e.stopPropagation()}>
                    <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => setModalState({...modalState, view: details})}>
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => setModalState({...modalState, edit: details.name})}>
                      <Pencil className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" className="h-8 w-8 text-destructive hover:text-destructive" onClick={() => setModalState({...modalState, delete: details.name})}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="grid grid-cols-2 gap-4 text-sm">
                <div>
                    <p className="text-muted-foreground">Students</p>
                    <p className="font-semibold text-xl">{details.studentCount}</p>
                </div>
                <div>
                    <p className="text-muted-foreground">Avg. Grade</p>
                    <p className="font-semibold text-xl">{details.avgGrade.toFixed(1)}%</p>
                </div>
              </CardContent>
              <CardFooter className="pt-4">
                <div className="w-full">
                  <p className="text-xs font-semibold text-muted-foreground mb-2">INSTRUCTORS ({details.teachers.length})</p>
                  {details.teachers.length > 0 ? (
                    <div className="flex -space-x-2">
                      {details.teachers.slice(0, 6).map(teacher => <TeacherAvatar key={teacher.id} teacher={teacher} />)}
                    </div>
                  ) : (
                    <p className="text-xs text-muted-foreground italic">No instructors assigned.</p>
                  )}
                </div>
              </CardFooter>
            </Card>
          );
        })}
      </div>
    );
  };

  const assignedTeacherIdsForEdit = useMemo(() => {
      if (!modalState.edit || !allTeachers) return [];
      return allTeachers.filter(t => t.subject === modalState.edit).map(t => t.id);
  }, [modalState.edit, allTeachers]);

  return (
    <div className="flex flex-col gap-6">
      <PageHeader title="Subjects Overview" description="View and manage all subjects offered.">
        <Button onClick={() => setModalState({...modalState, add: true})} className="button-gradient">
          <PlusCircle className="h-4 w-4 mr-2"/> Add Subject
        </Button>
      </PageHeader>
      
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative w-full sm:w-64">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search subjects..."
            value={searchQuery}
            onChange={(e) => {
                setSearchQuery(e.target.value);
                setCurrentPage(1);
            }}
            className="pl-9"
          />
        </div>
        <Select value={sortOption} onValueChange={setSortOption}>
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="Sort by..." />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="name-asc">Name (A-Z)</SelectItem>
            <SelectItem value="name-desc">Name (Z-A)</SelectItem>
            <SelectItem value="students-desc">Most Students</SelectItem>
            <SelectItem value="students-asc">Fewest Students</SelectItem>
            <SelectItem value="grade-desc">Highest Grade</SelectItem>
            <SelectItem value="grade-asc">Lowest Grade</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {renderContent()}
      
      {sortedSubjects && sortedSubjects.length > 0 && (
        <TablePaginationControls
          currentPage={currentPage} totalPages={totalPages}
          onPageChange={setCurrentPage} itemsPerPage={itemsPerPage}
          onItemsPerPageChange={(v) => { setItemsPerPage(Number(v)); setCurrentPage(1); }}
          totalItems={sortedSubjects.length} itemType="subjects"
          itemsPerPageOptions={[6, 9, 12, 18]}
        />
      )}
      
      <ConfirmationDialog
        isOpen={!!modalState.delete}
        onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, delete: null})}
        onConfirm={() => { if (modalState.delete) handleDeleteSubject(modalState.delete); }}
        title="Are you sure?"
        description={`This will permanently delete the subject "${modalState.delete}". This action cannot be undone.`}
        confirmText="Yes, delete"
      />
      {allTeachers && <AddSubjectModal isOpen={modalState.add} onOpenChange={(isOpen) => setModalState({...modalState, add: isOpen})} onSubjectAdded={handleSubjectAdded} allTeachers={allTeachers} />}
      
      {modalState.edit && allTeachers && (
        <EditSubjectModal
            isOpen={!!modalState.edit}
            onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, edit: null})}
            subjectName={modalState.edit}
            allTeachers={allTeachers}
            assignedTeacherIds={assignedTeacherIdsForEdit}
            onSubjectUpdate={handleSubjectUpdate}
        />
      )}
      <SubjectDetailsModal isOpen={!!modalState.view} onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, view: null})} subjectDetails={modalState.view} />
    </div>
  );
}
```

# === components/features/user/user-table.tsx ===
```tsx
"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { User } from "@/types/api.types";
import { Student, Teacher } from "@/lib/fake-generators";
import { Eye, Trash2, MoreHorizontal, Pencil } from "lucide-react";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";

interface UserTableProps {
  users: User[];
  type: 'student' | 'teacher';
  onViewUser: (user: User) => void;
  onEditUser: (user: User) => void;
  onDeleteUser: (user: User) => void;
}

export function UserTable({ users, type, onViewUser, onEditUser, onDeleteUser }: UserTableProps) {
  return (
    <Table className="min-w-full">
      <TableHeader>
        <TableRow className="border-b hover:bg-transparent">
          <TableHead className="w-[70px] px-3 py-2 font-semibold text-foreground">User ID</TableHead>
          <TableHead className="px-3 py-2 font-semibold text-foreground">Name</TableHead>
          <TableHead className="px-3 py-2 font-semibold text-foreground">Email</TableHead>
          <TableHead className="px-3 py-2 font-semibold text-foreground">Phone</TableHead>
          {type === 'student' && <TableHead className="px-3 py-2 font-semibold text-foreground">Current Grade</TableHead>}
          {type === 'teacher' && <TableHead className="px-3 py-2 font-semibold text-foreground">Main Subject</TableHead>}
          <TableHead className="w-[50px] px-3 py-2 text-right font-semibold text-foreground">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.id} className="hover:bg-muted/50">
            <TableCell className="px-3 py-2 text-muted-foreground">{user.id}</TableCell>
            <TableCell className="px-3 py-2 font-medium text-foreground">
              <div className="flex items-center justify-between group -mr-4">
                <span>{`${user.firstName} ${user.lastName}`}</span>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity"
                  onClick={() => onEditUser(user)}
                >
                  <Pencil className="h-4 w-4" />
                </Button>
              </div>
            </TableCell>
            <TableCell className="px-3 py-2">{user.email}</TableCell>
            <TableCell className="px-3 py-2">{user.phone}</TableCell>
            
            {type === 'student' && (
              <TableCell className="px-3 py-2 font-medium text-center">{(user as Student).grade}</TableCell>
            )}
            {type === 'teacher' && (
              <TableCell className="capitalize px-3 py-2">{(user as Teacher).subject}</TableCell>
            )}

            <TableCell className="text-right px-3 py-2">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0">
                    <span className="sr-only">Open menu</span>
                    <MoreHorizontal className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => onViewUser(user)}>
                    <Eye className="mr-2 h-4 w-4" /> View
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onEditUser(user)}>
                    <Pencil className="mr-2 h-4 w-4" /> Edit
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onDeleteUser(user)} className="text-destructive focus:text-destructive focus:bg-destructive/10">
                    <Trash2 className="mr-2 h-4 w-4" /> Delete
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}
```

# === components/features/user/user-management-page.tsx ===
```tsx
"use client";

import { useState, useEffect, useMemo } from "react";
import dynamic from "next/dynamic";
import { AlertTriangle, PlusCircle, Search } from "lucide-react";
import { useUserManagement } from "@/hooks/user-management";
import { PageHeader } from "@/components/shared/page-header";
import { UserTable } from "@/components/features/user/user-table";
import { UserTableSkeleton } from "@/components/features/user/user-table-skeleton";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
import { User } from "@/types/api.types";
import type { UserPreviewModalProps } from "./user-preview-modal";
import { Button } from "@/components/ui/button";
import { UserFormModal } from "./user-form-modal";
import { ConfirmationDialog } from "@/components/shared/confirmation-dialog";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const UserPreviewModal = dynamic<UserPreviewModalProps>(() => import("@/components/features/user/user-preview-modal").then(mod => mod.UserPreviewModal));

interface UserManagementPageProps {
  userType: 'student' | 'teacher';
  pageTitle: string;
  pageDescription: string;
}

export function UserManagementPage({ userType, pageTitle, pageDescription }: UserManagementPageProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [selectedUserForView, setSelectedUserForView] = useState<User | undefined>(undefined);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');
  const [sortOption, setSortOption] = useState('name-asc');

  const { sortBy, sortOrder } = useMemo(() => {
    const [by, order] = sortOption.split('-');
    return { sortBy: by, sortOrder: order };
  }, [sortOption]);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
      setCurrentPage(1);
    }, 300);

    return () => {
      clearTimeout(timer);
    };
  }, [searchTerm]);

  const {
    data, error, isLoading,
    isFormModalOpen, userToEdit, openCreateModal, openEditModal, closeFormModal, handleFormSubmit,
    userToDelete, openDeleteDialog, closeDeleteDialog, handleDeleteUser
  } = useUserManagement({ userType, itemsPerPage, currentPage, searchTerm: debouncedSearchTerm, sortBy, sortOrder });
  
  const totalCount = data?.total;
  
  const handleItemsPerPageChange = (value: string) => {
    setItemsPerPage(Number(value));
    setCurrentPage(1);
  };
  
  const handleViewUser = (user: User) => {
    setSelectedUserForView(user);
    setIsViewModalOpen(true);
  };

  const totalPages = totalCount ? Math.ceil(totalCount / itemsPerPage) : 0;

  return (
    <>
      <div className="flex flex-col rounded-lg border bg-card overflow-hidden">
        <div className="p-4 sm:p-6 space-y-4">
          <PageHeader title={pageTitle} description={pageDescription}>
            <Button onClick={openCreateModal} className="button-gradient">
              <PlusCircle className="mr-2 h-4 w-4" />
              Add New {userType}
            </Button>
          </PageHeader>
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder={`Search ${userType}s by name or email...`}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-9 w-full"
              />
            </div>
            <Select value={sortOption} onValueChange={setSortOption}>
              <SelectTrigger className="w-full sm:w-[200px]">
                <SelectValue placeholder="Sort by..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="name-asc">Name (A-Z)</SelectItem>
                <SelectItem value="name-desc">Name (Z-A)</SelectItem>
                {userType === 'student' && <>
                    <SelectItem value="grade-asc">Grade (A-F)</SelectItem>
                    <SelectItem value="grade-desc">Grade (F-A)</SelectItem>
                </>}
                {userType === 'teacher' && <>
                    <SelectItem value="subject-asc">Subject (A-Z)</SelectItem>
                    <SelectItem value="subject-desc">Subject (Z-A)</SelectItem>
                </>}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="overflow-x-auto">
          {isLoading && !data && <UserTableSkeleton type={userType} items={itemsPerPage} />}
          {error && (
            <Alert variant="destructive" className="glass-card m-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>Failed to load {userType}s. Please try again.</AlertDescription>
            </Alert>
          )}
          {data && !data.users.length && <p className="py-10 text-center text-muted-foreground">No {userType}s found.</p>}
          {data?.users && data.users.length > 0 && (
            <UserTable
              users={data.users}
              type={userType}
              onViewUser={handleViewUser}
              onEditUser={openEditModal}
              onDeleteUser={openDeleteDialog}
            />
          )}
        </div>

        {data && (data.users.length > 0 || searchTerm) && (
          <div className="p-4 border-t">
            <TablePaginationControls
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
              itemsPerPage={itemsPerPage}
              onItemsPerPageChange={handleItemsPerPageChange}
              totalItems={totalCount ?? 0}
              itemType={`${userType}s`}
            />
          </div>
        )}
      </div>

      <UserFormModal
        isOpen={isFormModalOpen}
        onOpenChange={closeFormModal}
        userToEdit={userToEdit}
        userType={userType}
        onSubmit={handleFormSubmit}
      />

      {isViewModalOpen && (
        <UserPreviewModal
            isOpen={isViewModalOpen}
            onOpenChange={setIsViewModalOpen}
            user={selectedUserForView}
        />
      )}

      <ConfirmationDialog
        isOpen={!!userToDelete}
        onOpenChange={(isOpen) => !isOpen && closeDeleteDialog()}
        onConfirm={() => {
          if (userToDelete) {
            handleDeleteUser(userToDelete.id);
          }
        }}
        title={`Delete ${userType}?`}
        description={`Are you sure you want to delete ${userToDelete?.firstName} ${userToDelete?.lastName}? All of their data will be removed.`}
        confirmText={`Yes, delete ${userType}`}
      />
    </>
  );
}
```

# === components/features/subject/add-subject-modal.tsx ===
```tsx
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Teacher } from "@/lib/fake-generators";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Checkbox } from "@/components/ui/checkbox";

interface AddSubjectModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onSubjectAdded: (data: { newSubjectName: string; teacherIds: number[] }) => Promise<void>;
  allTeachers: Teacher[];
}

export function AddSubjectModal({ isOpen, onOpenChange, onSubjectAdded, allTeachers }: AddSubjectModalProps) {
  const [subjectName, setSubjectName] = useState("");
  const [selectedTeacherIds, setSelectedTeacherIds] = useState(new Set<number>());
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleToggleTeacher = (teacherId: number) => {
    setSelectedTeacherIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(teacherId)) {
        newSet.delete(teacherId);
      } else {
        newSet.add(teacherId);
      }
      return newSet;
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    if (!subjectName.trim()) {
      setError("Subject name cannot be empty.");
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubjectAdded({
        newSubjectName: subjectName,
        teacherIds: Array.from(selectedTeacherIds)
      });
      onOpenChange(false);
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message || "An unknown error occurred.");
      }
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleOpenChange = (open: boolean) => {
      if (!open) {
          setSubjectName("");
          setSelectedTeacherIds(new Set());
          setError(null);
          setIsSubmitting(false);
      }
      onOpenChange(open);
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Add New Subject</DialogTitle>
          <DialogDescription>
            Enter the name for the new subject and optionally assign instructors.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-6 pt-4">
          <div>
            <Label htmlFor="subjectName">Subject Name</Label>
            <Input id="subjectName" value={subjectName} onChange={(e) => setSubjectName(e.target.value)} className="mt-2" />
          </div>

          <div>
            <Label>Assign Instructors ({selectedTeacherIds.size} selected)</Label>
            <ScrollArea className="h-48 mt-2 border rounded-md p-4">
              <div className="space-y-3">
                {allTeachers.map(teacher => (
                  <div key={teacher.id} className="flex items-center gap-3">
                    <Checkbox
                      id={`add-teacher-${teacher.id}`}
                      checked={selectedTeacherIds.has(teacher.id)}
                      onCheckedChange={() => handleToggleTeacher(teacher.id)}
                    />
                    <Label htmlFor={`add-teacher-${teacher.id}`} className="font-normal">{teacher.firstName} {teacher.lastName}</Label>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </div>

          {error && <p className="text-sm text-destructive text-center">{error}</p>}
          <DialogFooter className="pt-2">
            <Button type="button" variant="outline" onClick={() => handleOpenChange(false)} disabled={isSubmitting}>Cancel</Button>
            <Button type="submit" className="button-gradient" disabled={isSubmitting}>
              {isSubmitting ? 'Saving...' : 'Save Subject'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
```