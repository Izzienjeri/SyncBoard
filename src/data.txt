# Extracted Code (.ts, .tsx, .css)
# Date and Time: 2025-08-01 20:32:20
# Files Included: 37

# === lib/mock-db.ts ===
```ts
import { createRandomStudent, createRandomTeacher } from './fake-generators';
import type { Student, Teacher } from './schemas';

const initialSubjects = [
  "mathematics", "physics", "history", "english", "computer-science",
  "biology", "chemistry", "art-history", "philosophy", "economics",
  "political-science", "music-theory",
];

const globalForDb = global as unknown as {
  db: {
    students: Student[];
    teachers: Teacher[];
    subjects: string[];
  }
};

const seedDatabase = () => {
  console.log("ðŸŒ± Seeding database with mock data...");
  const students = Array.from({ length: 100 }, createRandomStudent);
  const teachers = Array.from({ length: 25 }, createRandomTeacher);
  
  return {
    students,
    teachers,
    subjects: initialSubjects.map((s: string) => s.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())),
  };
};

const db = globalForDb.db || seedDatabase();

if (process.env.NODE_ENV !== "production") globalForDb.db = db;

export default db;
```

# === lib/mock-data.ts ===
```ts
export type StudentAttendance = {
  month: string;
  attendance: number;
};

export type GradeDistribution = {
  grade: string;
  count: number;
};

export type SubjectScore = {
  name: string;
  averageScore: number;
};



export const subjectScoreData: Record<string, SubjectScore[]> = {
  this_term: [ { name: "computer-science", averageScore: 95.1 }, { name: "physics", averageScore: 90.2 }, { name: "history", averageScore: 84.0 }, { name: "english", averageScore: 88.8 }, { name: "mathematics", averageScore: 89.5 } ],
  last_term: [ { name: "computer-science", averageScore: 93.5 }, { name: "physics", averageScore: 92.1 }, { name: "history", averageScore: 86.0 }, { name: "english", averageScore: 90.2 }, { name: "mathematics", averageScore: 87.5 } ],
  full_year: [ { name: "computer-science", averageScore: 94.1 }, { name: "physics", averageScore: 91.2 }, { name: "history", averageScore: 85.0 }, { name: "english", averageScore: 89.8 }, { name: "mathematics", averageScore: 88.5 } ],
};

export const attendanceData: StudentAttendance[] = [
  { month: "Jan", attendance: 95 }, { month: "Feb", attendance: 92 }, { month: "Mar", attendance: 93 }, { month: "Apr", attendance: 88 }, { month: "May", attendance: 90 }, { month: "Jun", attendance: 85 },
  { month: "Jul", attendance: 89 }, { month: "Aug", attendance: 91 }, { month: "Sep", attendance: 94 }, { month: "Oct", attendance: 96 }, { month: "Nov", attendance: 93 }, { month: "Dec", attendance: 87 },
];
```

# === lib/utils.ts ===
```ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
```

# === lib/api.ts ===
```ts
import type { AppUser, Teacher } from "@/lib/schemas";

/**
 * A generic fetcher function for use with SWR.
 * @param url The URL to fetch.
 * @returns The JSON response.
 */
export const fetcher = (url: string) => fetch(url).then(res => res.json());


/**
 * Adds a new student or teacher to the database.
 * @param userType - The type of user to add ('student' or 'teacher').
 * @param userData - The form data for the new user.
 * @returns The newly created user object.
 */
export async function addUser(userType: 'student' | 'teacher', userData: Partial<AppUser>): Promise<AppUser> {
  const res = await fetch(`/api/${userType}s`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(userData),
  });
  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.message || `Failed to add ${userType}`);
  }
  return res.json();
}

/**
 * Updates an existing student or teacher in the database.
 * @param userType - The type of user to update ('student' or 'teacher').
 * @param userId - The ID of the user to update.
 * @param userData - The updated form data.
 * @returns The updated user object.
 */
export async function updateUser(userType: 'student' | 'teacher', userId: number, userData: Partial<AppUser>): Promise<AppUser> {
  const res = await fetch(`/api/${userType}s/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(userData),
  });
  if (!res.ok) {
      const errorData = await res.json();
      throw new Error(errorData.message || `Failed to update ${userType}`);
  }
  return res.json();
}

/**
 * Deletes a student or teacher from the database.
 * @param userType - The type of user to delete ('student' or 'teacher').
 * @param userId - The ID of the user to delete.
 * @returns A confirmation object.
 */
export async function deleteUser(userType: 'student' | 'teacher', userId: number): Promise<{ id: number, isDeleted: boolean }> {
  const res = await fetch(`/api/${userType}s/${userId}`, { method: "DELETE" });
  if (!res.ok) {
      const errorData = await res.json();
      throw new Error(errorData.message || `Failed to delete ${userType}`);
  }
  return res.json();
}

/**
 * Gets the total number of students.
 * @returns The total count of students.
 */
export async function getTotalStudents(): Promise<number> {
    const res = await fetch('/api/students?limit=0');
    if (!res.ok) return 0;
    const data = await res.json();
    return data.total;
}

/**
 * Gets the total number of teachers.
 * @returns The total count of teachers.
 */
export async function getTotalTeachers(): Promise<number> {
    const res = await fetch('/api/teachers?limit=0');
    if (!res.ok) return 0;
    const data = await res.json();
    return data.total;
}

/**
 * Gets the complete list of all teachers (not paginated).
 * @returns An array of all teacher objects.
 */
export async function getAllTeachers(): Promise<Teacher[]> {
    return fetcher('/api/teachers/all');
}

/**
 * Gets the list of all available subjects.
 * @returns An array of subject names.
 */
export async function getSubjects(): Promise<string[]> {
    return fetcher('/api/subjects');
}

/**
 * Adds a new subject to the database.
 * @param data - The data for the new subject including name and assigned teacher IDs.
 * @returns The newly created subject object.
 */
export async function addSubject(data: { subjectName: string; teacherIds: number[] }): Promise<{ name: string }> {
    const res = await fetch('/api/subjects', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });
    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || 'Failed to add subject');
    }
    return res.json();
}

/**
 * Updates a subject's details (name and/or assigned teachers).
 * @param oldName - The current name of the subject.
 * @param data - An object containing the new name and an array of teacher IDs.
 * @returns A confirmation message.
 */
export async function updateSubject(oldName: string, data: { newSubjectName: string, teacherIds: number[] }): Promise<{ message: string }> {
    const res = await fetch(`/api/subjects/${encodeURIComponent(oldName)}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });
    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || 'Failed to update subject');
    }
    return res.json();
}

/**
 * Deletes a subject from the database.
 * @param subjectName - The name of the subject to delete.
 * @returns A confirmation message.
 */
export async function deleteSubject(subjectName: string): Promise<{ message: string }> {
    const res = await fetch(`/api/subjects/${encodeURIComponent(subjectName)}`, {
        method: 'DELETE',
    });
    if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || 'Failed to delete subject');
    }
    return res.json();
}
```

# === lib/schemas.ts ===
```ts
import { z } from "zod";

export interface BaseUser {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  image: string;
  address: {
    address: string;
    city: string;
    postalCode: string;
    state: string;
  };
}

export interface Student extends BaseUser {
  type: 'student';
  grade: string;
}

export interface Teacher extends BaseUser {
  type: 'teacher';
  subject: string;
}

export type AppUser = Student | Teacher;

export const userSchema = z.object({
  firstName: z.string().min(2, { message: "First name must be at least 2 characters." }),
  lastName: z.string().min(2, { message: "Last name must be at least 2 characters." }),
  email: z.string().email({ message: "Please enter a valid email address." }),
  phone: z.string().optional(),
});

export type UserFormValues = z.infer<typeof userSchema>;

export const subjectSchema = z.object({
  name: z.string().min(2, { message: "Subject name must be at least 2 characters." }),
  teacherIds: z.array(z.number()),
});

export type SubjectFormValues = z.infer<typeof subjectSchema>;
```

# === lib/fake-generators.ts ===
```ts
import { faker } from '@faker-js/faker';
import type { Student, Teacher } from './schemas';

const allSubjects = [
    'Mathematics', 'Physics', 'History', 'English', 'Computer Science', 
    'Biology', 'Chemistry', 'Art History', 'Philosophy', 'Economics'
];

export const createRandomStudent = (): Student => {
  const firstName = faker.person.firstName();
  const lastName = faker.person.lastName();
  return {
    type: 'student',
    id: faker.number.int({ min: 1, max: 100000 }),
    firstName,
    lastName,
    email: faker.internet.email({ firstName, lastName }),
    phone: `(${faker.string.numeric(3)}) ${faker.string.numeric(3)}-${faker.string.numeric(4)}`,
    image: faker.image.avatar(),
    address: {
      address: faker.location.streetAddress(),
      city: faker.location.city(),
      postalCode: faker.location.zipCode(),
      state: faker.location.state({ abbreviated: true }),
    },
    grade: faker.helpers.arrayElement(['A', 'B', 'C', 'D', 'F']),
  };
};

export const createRandomTeacher = (): Teacher => {
  const firstName = faker.person.firstName();
  const lastName = faker.person.lastName();
  return {
    type: 'teacher',
    id: faker.number.int({ min: 100001, max: 200000 }),
    firstName,
    lastName,
    email: faker.internet.email({ firstName, lastName }),
    phone: `(${faker.string.numeric(3)}) ${faker.string.numeric(3)}-${faker.string.numeric(4)}`,
    image: faker.image.avatar(),
    address: {
      address: faker.location.streetAddress(),
      city: faker.location.city(),
      postalCode: faker.location.zipCode(),
      state: faker.location.state({ abbreviated: true }),
    },
    subject: faker.helpers.arrayElement(allSubjects),
  };
};
```

# === app/globals.css ===
```css
@import "tailwindcss";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-inter);
  --font-mono: var(--font-geist-mono);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.75rem;
  --background: oklch(0.99 0.005 240);
  --foreground: oklch(0.1 0.03 250);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.1 0.03 250);
  --popover: oklch(1 0 0 / 0.8);
  --popover-foreground: oklch(0.1 0.03 250);
  --primary: oklch(0.60 0.18 265);
  --primary-foreground: oklch(0.99 0.005 240);
  --secondary: oklch(0.92 0.03 260);
  --secondary-foreground: oklch(0.1 0.03 250);
  --muted: oklch(0.95 0.02 260);
  --muted-foreground: oklch(0.45 0.04 255);
  --accent: oklch(0.95 0.02 260);
  --accent-foreground: oklch(0.09 0.08 265);
  --destructive: oklch(0.65 0.22 20);
  --border: oklch(0.1 0.03 250 / 0.15);
  --input: oklch(0.1 0.03 250 / 0.05);
  --ring: oklch(0.60 0.18 265);
  --chart-1: oklch(0.7 0.15 290);
  --chart-2: oklch(0.75 0.18 200);
  --chart-3: oklch(0.65 0.2 260);
  --chart-4: oklch(0.8 0.18 150);
  --chart-5: oklch(0.8 0.2 80);
}

.dark {
  --background: oklch(0.08 0.02 250);
  --foreground: oklch(0.95 0.01 240);
  --card: oklch(0.12 0.03 260);
  --card-foreground: oklch(0.95 0.01 240);
  --popover: oklch(0.05 0.02 250 / 0.8);
  --popover-foreground: oklch(0.95 0.01 240);
  --primary: oklch(0.7 0.2 275);
  --primary-foreground: oklch(0.98 0.01 275);
  --secondary: oklch(0.2 0.05 270);
  --secondary-foreground: oklch(0.95 0.01 240);
  --muted: oklch(0.2 0.05 270 / 0.5);
  --muted-foreground: oklch(0.65 0.05 260);
  --accent: oklch(0.2 0.05 270);
  --accent-foreground: oklch(0.95 0.01 240);
  --destructive: oklch(0.7 0.2 25);
  --border: oklch(1 1 1 / 0.15);
  --input: oklch(1 1 1 / 0.08);
  --ring: oklch(0.75 0.22 280);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply font-sans text-foreground antialiased bg-background;
  }
}

@layer utilities {
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-br from-primary to-secondary;
  }
  .button-gradient {
    @apply bg-gradient-to-br from-primary to-primary/70 text-primary-foreground transition-[background-color,box-shadow,transform] duration-300 shadow-lg shadow-primary/20 hover:from-primary/90 hover:to-primary/60 hover:shadow-xl hover:shadow-primary/30 hover:scale-[1.03];
  }
  .glass-card {
    @apply bg-card/80 dark:bg-card/70 backdrop-blur-lg border shadow-lg shadow-black/10 dark:shadow-black/20;
  }
  .background-gradient-custom {
    background: hsla(191, 75%, 60%, 1);
    background: linear-gradient(90deg, hsla(191, 75%, 60%, 1) 0%, hsla(248, 87%, 36%, 1) 100%);
  }
}
```

# === app/layout.tsx ===
```tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ 
  subsets: ["latin"],
  variable: '--font-inter',
});

export const metadata: Metadata = {
  title: "Student Management Dashboard",
  description: "A dashboard for managing students and their performance.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className={`${inter.variable} scroll-smooth`}>
      <body>{children}</body>
    </html>
  );
}
```

# === app/(dashboard)/layout.tsx ===
```tsx
import { StudentDashboardSidebar } from "@/components/dashboard/student-sidebar";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="min-h-screen w-full p-4 sm:p-6 lg:p-8 background-gradient-custom">
      <div className="mx-auto w-full max-w-7xl rounded-2xl bg-card/90 p-4 shadow-xl backdrop-blur-lg sm:p-6 lg:p-8 flex flex-col lg:flex-row gap-4 lg:gap-8 lg:items-start">
        <StudentDashboardSidebar />
        <div className="flex-1 flex flex-col gap-8 min-w-0">
          {children}
        </div>
      </div>
    </main>
  );
}
```

# === app/(dashboard)/page.tsx ===
```tsx
"use client";

import { useState } from "react";
import useSWR from "swr";
import Link from "next/link";
import dynamic from "next/dynamic";
import { PageHeader } from "@/components/shared/page-header";
import { StatCard } from "@/components/dashboard/stat-card";
import { getTotalStudents, getTotalTeachers, fetcher } from "@/lib/api";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { attendanceData } from "@/lib/mock-data";
import { Skeleton } from "@/components/ui/skeleton";
import type { GradeDistribution } from "@/lib/mock-data";

const AttendanceChart = dynamic(() => import("@/components/dashboard/attendance-chart").then(mod => mod.AttendanceChart), {
  ssr: false,
  loading: () => <Skeleton className="h-[400px] rounded-lg" />,
});
const StudentPerformanceSummary = dynamic(() => import("@/components/dashboard/student-performance-summary").then(mod => mod.StudentPerformanceSummary), {
  ssr: false,
  loading: () => <Skeleton className="h-[400px] rounded-lg" />,
});


type Period = "this_term" | "last_term" | "full_year";
type StatsData = {
  passRate: string;
  gradeDistribution: GradeDistribution[];
};


export default function DashboardPage() {
  const [period, setPeriod] = useState<Period>("this_term");

  const { data: totalStudents, isLoading: studentsLoading } = useSWR('totalStudents', getTotalStudents);
  const { data: totalTeachers, isLoading: teachersLoading } = useSWR('totalTeachers', getTotalTeachers);
  const { data: statsData, isLoading: statsLoading } = useSWR<StatsData>('/api/stats', fetcher);


  const periodAvgAttendance = {
    this_term: { avgAttendance: "91%", changeLabel: "This Term" },
    last_term: { avgAttendance: "89%", changeLabel: "Last Term" },
    full_year: { avgAttendance: "90%", changeLabel: "Full Year" },
  };
  const currentAvgAttendance = periodAvgAttendance[period];

  const getAttendanceDataForPeriod = () => {
    switch (period) {
      case "this_term": return attendanceData.slice(8, 12);
      case "last_term": return attendanceData.slice(4, 8);
      case "full_year": default: return attendanceData;
    }
  };
  const currentAttendanceData = getAttendanceDataForPeriod();

  return (
    <>
      <PageHeader title="Student Dashboard">
        <Select value={period} onValueChange={(value) => setPeriod(value as Period)}>
          <SelectTrigger className="w-full sm:w-[180px]"><SelectValue placeholder="Filter period" /></SelectTrigger>
          <SelectContent><SelectItem value="this_term">This Term</SelectItem><SelectItem value="last_term">Last Term</SelectItem><SelectItem value="full_year">Full Year</SelectItem></SelectContent>
        </Select>
      </PageHeader>

      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
         {studentsLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <Link href="/students"><StatCard title="Total Students" value={totalStudents?.toString() ?? '0'} change="+5%" className="bg-chart-1/20 border-chart-1/50 hover:border-chart-1 transition-colors" /></Link>}
         {teachersLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <Link href="/teachers"><StatCard title="Total Teachers" value={totalTeachers?.toString() ?? '0'} change="+2" className="bg-chart-2/20 border-chart-2/50 hover:border-chart-2 transition-colors" /></Link>}
         {statsLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <StatCard title="Pass Rate" value={statsData?.passRate ?? 'N/A'} change="Calculated" className="bg-chart-3/20 border-chart-3/50" />}
         <StatCard title="Avg. Attendance" value={currentAvgAttendance.avgAttendance} change={currentAvgAttendance.changeLabel} className="bg-chart-4/20 border-chart-4/50" />
      </div>

      {/* ACCESSIBILITY FIX: Add a visually hidden h2 to maintain heading order */}
      <h2 className="sr-only">Performance and Attendance Overview</h2>

      <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
        <div className="xl:col-span-3">
          <AttendanceChart data={currentAttendanceData} />
        </div>
        <div className="xl:col-span-2">
          {statsLoading 
            ? <Skeleton className="h-full min-h-[400px] rounded-lg" /> 
            : <StudentPerformanceSummary gradeDistribution={statsData?.gradeDistribution} />
          }
        </div>
      </div>
    </>
  );
}
```

# === app/(dashboard)/students/page.tsx ===
```tsx
import { UserManagementPage } from "@/components/features/user/user-management-page";

export default function StudentsPage() {
  return (
    <UserManagementPage
      userType="student"
      pageTitle="Student Management"
      pageDescription="View and manage student profiles."
    />
  );
}
```

# === app/(dashboard)/teachers/page.tsx ===
```tsx
import { UserManagementPage } from "@/components/features/user/user-management-page";

export default function TeachersPage() {
  return (
    <UserManagementPage
      userType="teacher"
      pageTitle="Teacher Management"
      pageDescription="View and manage teacher profiles."
    />
  );
}
```

# === app/(dashboard)/subjects/page.tsx ===
```tsx
"use client";

import { useState, useMemo } from "react";
import useSWR from "swr";
import Image from "next/image";
import { AlertTriangle, Pencil, PlusCircle, Trash2, Eye, Search, MoreHorizontal } from "lucide-react";
import { addSubject, getSubjects, getAllTeachers, updateSubject, deleteSubject } from "@/lib/api";
import type { Teacher } from "@/lib/schemas";

import { PageHeader } from "@/components/shared/page-header";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
import { toast } from "sonner";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ConfirmationDialog } from "@/components/shared/confirmation-dialog";
import { SubjectDetailsModal } from "@/components/features/subject/SubjectDetailsModal";
import { SubjectFormModal } from "@/components/features/subject/SubjectFormModal";
import { Input } from "@/components/ui/input";
import type { SubjectFormValues } from "@/lib/schemas";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

type SubjectDetails = {
  name: string;
  teachers: Teacher[];
  studentCount: number;
  avgGrade: number;
}

const TeacherAvatar = ({ teacher }: { teacher: Teacher }) => (
  <div className="group relative" title={`${teacher.firstName} ${teacher.lastName}`}>
    <Image
      src={teacher.image}
      alt={teacher.firstName}
      width={32}
      height={32}
      className="rounded-full border-2 border-card transition-transform group-hover:scale-110"
    />
  </div>
);

const getGradeColorClass = (grade: number) => {
  if (grade >= 90) return "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300";
  if (grade >= 80) return "bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300";
  if (grade >= 70) return "bg-amber-100 text-amber-800 dark:bg-amber-900/50 dark:text-amber-300";
  return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
};

export default function SubjectsPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(6);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("name-asc");
  
  const [modalState, setModalState] = useState<{
    formOpen: boolean;
    editingSubjectName: string | null;
    delete: string | null;
    view: SubjectDetails | null;
  }>({ formOpen: false, editingSubjectName: null, delete: null, view: null });

  const { data: subjects, error: subjectsError, isLoading: subjectsLoading, mutate: mutateSubjects } = useSWR("/api/subjects", getSubjects);
  const { data: allTeachers, isLoading: teachersLoading, mutate: mutateTeachers } = useSWR("/api/teachers/all", getAllTeachers);

  const subjectDetailsMap = useMemo(() => {
    const map = new Map<string, SubjectDetails>();
    if (subjects && allTeachers) {
      subjects.forEach((subject: string) => {
        map.set(subject, {
          name: subject,
          teachers: allTeachers.filter((t: Teacher) => t.subject === subject),
          studentCount: Math.floor(Math.random() * 80) + 20,
          avgGrade: Math.random() * (95 - 70) + 70,
        });
      });
    }
    return map;
  }, [subjects, allTeachers]);

  const sortedSubjects = useMemo(() => {
    if (!subjects) return [];
    
    const subjectsToProcess = subjects.filter(subject => 
      subject.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const [sortBy, sortOrder] = sortOption.split('-');

    subjectsToProcess.sort((a, b) => {
        const detailsA = subjectDetailsMap.get(a);
        const detailsB = subjectDetailsMap.get(b);
        if (!detailsA || !detailsB) return 0;

        let comparison = 0;
        switch (sortBy) {
            case 'students':
                comparison = detailsA.studentCount - detailsB.studentCount;
                break;
            case 'grade':
                comparison = detailsA.avgGrade - detailsB.avgGrade;
                break;
            case 'name':
            default:
                comparison = a.localeCompare(b);
        }
        return sortOrder === 'asc' ? comparison : -comparison;
    });

    return subjectsToProcess;
  }, [subjects, searchQuery, sortOption, subjectDetailsMap]);

  const handleSubjectSubmit = async (data: SubjectFormValues) => {
    try {
      if (modalState.editingSubjectName) {
        await updateSubject(modalState.editingSubjectName, { newSubjectName: data.name, teacherIds: data.teacherIds });
        toast.success(`Subject "${data.name}" updated successfully.`);
      } else {
        const newSubject = await addSubject({ subjectName: data.name, teacherIds: data.teacherIds });
        toast.success(`Subject "${newSubject.name}" added successfully.`);
      }
      await Promise.all([mutateSubjects(), mutateTeachers()]);
    } catch (e: unknown) {
      if (e instanceof Error) toast.error(e.message);
      throw e;
    }
  };
  
  const handleDeleteSubject = async (subjectName: string) => {
    try {
      await deleteSubject(subjectName);
      toast.success(`Subject "${subjectName}" deleted.`);
      await mutateSubjects();
    } catch(e: unknown) {
      if (e instanceof Error) toast.error(e.message);
    }
  };

  const totalPages = sortedSubjects ? Math.ceil(sortedSubjects.length / itemsPerPage) : 0;

  const renderContent = () => {
    if (subjectsLoading || teachersLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: itemsPerPage }).map((_, i) => <Skeleton key={i} className="h-56 rounded-xl" />)}
        </div>
      );
    }
    if (subjectsError) return ( <Alert variant="destructive" className="glass-card"><AlertTriangle className="h-4 w-4" /> <AlertTitle>Error</AlertTitle><AlertDescription>Failed to load subjects. Please try again.</AlertDescription></Alert> );
    if (!sortedSubjects || sortedSubjects.length === 0) return ( <div className="text-center py-10 glass-card rounded-lg"><h3 className="text-xl font-medium">No Subjects Found</h3><p className="text-muted-foreground">{searchQuery ? "Try a different search term." : "Click \"Add Subject\" to get started."}</p></div> );
    
    const paginatedSubjects = sortedSubjects.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {paginatedSubjects.map((subjectName) => {
          const details = subjectDetailsMap.get(subjectName);
          if (!details) return null;
          
          return (
            <Card key={details.name} className="glass-card flex flex-col justify-between rounded-xl overflow-hidden shadow-lg hover:shadow-primary/20 transition-shadow duration-300 cursor-pointer"
              onClick={() => setModalState({...modalState, view: details})}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle className="capitalize text-lg font-bold text-foreground">{details.name}</CardTitle>
                  <div className="-mr-2 -mt-2" onClick={(e) => e.stopPropagation()}>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <span className="sr-only">Open menu</span>
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => setModalState({...modalState, view: details})}>
                          <Eye className="mr-2 h-4 w-4" />
                          <span>View</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => setModalState({...modalState, editingSubjectName: details.name, formOpen: true})}>
                          <Pencil className="mr-2 h-4 w-4" />
                          <span>Edit</span>
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => setModalState({...modalState, delete: details.name})} className="text-destructive focus:text-destructive focus:bg-destructive/10">
                          <Trash2 className="mr-2 h-4 w-4" />
                          <span>Delete</span>
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="grid grid-cols-2 gap-4 text-sm">
                <div><p className="text-muted-foreground">Students</p><p className="font-semibold text-lg sm:text-xl">{details.studentCount}</p></div>
                <div>
                  <p className="text-muted-foreground">Avg. Grade</p>
                  <Badge className={cn("text-lg sm:text-xl font-semibold border-none px-3 py-1", getGradeColorClass(details.avgGrade))}>
                    {details.avgGrade.toFixed(1)}%
                  </Badge>
                </div>
              </CardContent>
              <CardFooter className="pt-4">
                <div className="w-full">
                  <p className="text-xs font-semibold text-muted-foreground mb-2">INSTRUCTORS ({details.teachers.length})</p>
                  {details.teachers.length > 0 ? (<div className="flex -space-x-2">{details.teachers.slice(0, 6).map(teacher => <TeacherAvatar key={teacher.id} teacher={teacher} />)}</div>) : (<p className="text-xs text-muted-foreground italic">No instructors assigned.</p>)}
                </div>
              </CardFooter>
            </Card>
          );
        })}
      </div>
    );
  };

  const formInitialData = useMemo(() => {
    if (!modalState.editingSubjectName || !allTeachers) return null;
    const assignedTeacherIds = allTeachers.filter(t => t.subject === modalState.editingSubjectName).map(t => t.id);
    return { name: modalState.editingSubjectName, teacherIds: assignedTeacherIds };
  }, [modalState.editingSubjectName, allTeachers]);

  return (
    <div className="flex flex-col gap-6">
      <PageHeader title="Subjects Overview" description="View and manage all subjects offered.">
        <Button onClick={() => setModalState({...modalState, editingSubjectName: null, formOpen: true})} className="button-gradient">
          <PlusCircle className="h-4 w-4 mr-2"/> Add Subject
        </Button>
      </PageHeader>
      
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative w-full sm:w-64"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" /><Input placeholder="Search subjects..." value={searchQuery} onChange={(e) => {setSearchQuery(e.target.value); setCurrentPage(1);}} className="pl-9"/></div>
        <Select value={sortOption} onValueChange={setSortOption}><SelectTrigger className="w-full sm:w-[200px]"><SelectValue placeholder="Sort by..." /></SelectTrigger><SelectContent><SelectItem value="name-asc">Name (A-Z)</SelectItem><SelectItem value="name-desc">Name (Z-A)</SelectItem><SelectItem value="students-desc">Most Students</SelectItem><SelectItem value="students-asc">Fewest Students</SelectItem><SelectItem value="grade-desc">Highest Grade</SelectItem><SelectItem value="grade-asc">Lowest Grade</SelectItem></SelectContent></Select>
      </div>

      {/* ACCESSIBILITY: Add sr-only heading to fix heading order */}
      <h2 className="sr-only">All Subjects</h2>
      {renderContent()}
      
      {sortedSubjects && sortedSubjects.length > 0 && (
        <TablePaginationControls currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} itemsPerPage={itemsPerPage} onItemsPerPageChange={(v) => { setItemsPerPage(Number(v)); setCurrentPage(1); }} totalItems={sortedSubjects.length} itemType="subjects" itemsPerPageOptions={[6, 9, 12, 18]} />
      )}
      
      <ConfirmationDialog isOpen={!!modalState.delete} onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, delete: null})} onConfirm={() => { if (modalState.delete) handleDeleteSubject(modalState.delete); }} title="Are you sure?" description={`This will permanently delete the subject "${modalState.delete}". This action cannot be undone.`} confirmText="Yes, delete" />
      
      {allTeachers && (
        <SubjectFormModal isOpen={modalState.formOpen} onOpenChange={(isOpen) => setModalState({ ...modalState, formOpen: isOpen })} onSubmit={handleSubjectSubmit} allTeachers={allTeachers} initialData={formInitialData} />
      )}

      <SubjectDetailsModal isOpen={!!modalState.view} onOpenChange={(isOpen) => !isOpen && setModalState({...modalState, view: null})} subjectDetails={modalState.view} />
    </div>
  );
}
```

# === app/api/stats/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import type { Student } from '@/lib/schemas';

export async function GET() {
  const students: Student[] = db.students;
  const totalStudents = students.length;

  if (totalStudents === 0) {
    return NextResponse.json({
      passRate: "0.0%",
      gradeDistribution: [
        { grade: "A", count: 0 }, { grade: "B", count: 0 },
        { grade: "C", count: 0 }, { grade: "D", count: 0 },
        { grade: "F", count: 0 }
      ]
    });
  }

  // Calculate Grade Distribution
  const gradeCounts = { A: 0, B: 0, C: 0, D: 0, F: 0 };
  students.forEach(student => {
    if (student.grade in gradeCounts) {
      gradeCounts[student.grade as keyof typeof gradeCounts]++;
    }
  });
  
  const gradeDistribution = Object.entries(gradeCounts).map(([grade, count]) => ({ grade, count }));

  // Calculate Pass Rate (all grades except 'F' are passing)
  const failingStudents = gradeCounts.F;
  const passingStudents = totalStudents - failingStudents;
  const passRate = ((passingStudents / totalStudents) * 100).toFixed(1) + '%';
  
  return NextResponse.json({ passRate, gradeDistribution });
}
```

# === app/api/students/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import { createRandomStudent } from '@/lib/fake-generators';
import type { Student } from '@/lib/schemas';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const limit = parseInt(searchParams.get('limit') || '10');
  const skip = parseInt(searchParams.get('skip') || '0');
  const search = searchParams.get('search')?.toLowerCase() || '';
  const sortBy = searchParams.get('sortBy');
  const sortOrder = searchParams.get('sortOrder') || 'asc';

  let filteredStudents = db.students;

  if (search) {
    filteredStudents = db.students.filter(student =>
      student.firstName.toLowerCase().includes(search) ||
      student.lastName.toLowerCase().includes(search) ||
      student.email.toLowerCase().includes(search)
    );
  }

  // Sorting logic
  if (sortBy) {
    filteredStudents.sort((a, b) => {
      let valA, valB;

      switch (sortBy) {
        case 'name':
          valA = `${a.firstName} ${a.lastName}`;
          valB = `${b.firstName} ${b.lastName}`;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        case 'grade':
          valA = a.grade;
          valB = b.grade;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        default:
          return 0;
      }
    });
  }


  const total = filteredStudents.length;
  const paginatedStudents = filteredStudents.slice(skip, skip + limit);

  return NextResponse.json({
    users: paginatedStudents,
    total: total,
    skip,
    limit,
  });
}

export async function POST(request: Request) {
  const body = await request.json();
  const newStudent: Student = {
    ...createRandomStudent(),
    ...body,
  };
  db.students.unshift(newStudent);
  return NextResponse.json(newStudent, { status: 201 });
}
```

# === app/api/students/[id]/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import type { Student } from '@/lib/schemas';

export async function PUT(
  request: Request,
  context: { params: { id: string } }
) {
  const studentId = parseInt(context.params.id);
  const studentIndex = db.students.findIndex((s: Student) => s.id === studentId);

  if (studentIndex === -1) {
    return NextResponse.json({ message: 'Student not found' }, { status: 404 });
  }
  
  const body = await request.json();
  db.students[studentIndex] = { ...db.students[studentIndex], ...body };
  return NextResponse.json(db.students[studentIndex]);
}

export async function DELETE(
  request: Request,
  context: { params: { id: string } }
) {
  const studentId = parseInt(context.params.id);
  const studentIndex = db.students.findIndex((s: Student) => s.id === studentId);

  if (studentIndex === -1) {
    return NextResponse.json({ message: 'Student not found' }, { status: 404 });
  }
  
  const [deletedStudent] = db.students.splice(studentIndex, 1);
  return NextResponse.json({ ...deletedStudent, isDeleted: true });
}
```

# === app/api/teachers/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import { createRandomTeacher } from '@/lib/fake-generators';
import type { Teacher } from '@/lib/schemas';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const limit = parseInt(searchParams.get('limit') || '10');
  const skip = parseInt(searchParams.get('skip') || '0');
  const search = searchParams.get('search')?.toLowerCase() || '';
  const sortBy = searchParams.get('sortBy');
  const sortOrder = searchParams.get('sortOrder') || 'asc';

  let filteredTeachers = db.teachers;

  if (search) {
    filteredTeachers = db.teachers.filter(teacher =>
      teacher.firstName.toLowerCase().includes(search) ||
      teacher.lastName.toLowerCase().includes(search) ||
      teacher.email.toLowerCase().includes(search)
    );
  }

  // Sorting logic
  if (sortBy) {
    filteredTeachers.sort((a, b) => {
      let valA, valB;
      switch (sortBy) {
        case 'name':
          valA = `${a.firstName} ${a.lastName}`;
          valB = `${b.firstName} ${b.lastName}`;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        case 'subject':
          valA = a.subject;
          valB = b.subject;
          return sortOrder === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
        default:
          return 0;
      }
    });
  }
  
  const total = filteredTeachers.length;
  const paginatedTeachers = filteredTeachers.slice(skip, skip + limit);

  return NextResponse.json({
    users: paginatedTeachers,
    total: total,
    skip,
    limit,
  });
}

export async function POST(request: Request) {
  const body = await request.json();
  const newTeacher: Teacher = {
    ...createRandomTeacher(),
    ...body,
  };
  db.teachers.unshift(newTeacher);
  return NextResponse.json(newTeacher, { status: 201 });
}
```

# === app/api/teachers/[id]/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import type { Teacher } from '@/lib/schemas';

export async function PUT(request: Request, context: { params: { id: string } }) {
  const teacherId = parseInt(context.params.id);
  const teacherIndex = db.teachers.findIndex((t: Teacher) => t.id === teacherId);

  if (teacherIndex === -1) {
    return NextResponse.json({ message: 'Teacher not found' }, { status: 404 });
  }
  const body = await request.json();
  db.teachers[teacherIndex] = { ...db.teachers[teacherIndex], ...body };
  return NextResponse.json(db.teachers[teacherIndex]);
}

export async function DELETE(request: Request, context: { params: { id: string } }) {
  const teacherId = parseInt(context.params.id);
  const teacherIndex = db.teachers.findIndex((t: Teacher) => t.id === teacherId);

  if (teacherIndex === -1) {
    return NextResponse.json({ message: 'Teacher not found' }, { status: 404 });
  }
  const [deletedTeacher] = db.teachers.splice(teacherIndex, 1);
  return NextResponse.json({ ...deletedTeacher, isDeleted: true });
}
```

# === app/api/teachers/all/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';

export async function GET() {
  return NextResponse.json(db.teachers);
}
```

# === app/api/subjects/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';

export async function GET() {
  return NextResponse.json(db.subjects.sort());
}

export async function POST(request: Request) {
  const { subjectName, teacherIds } = await request.json();
  if (!subjectName) {
    return NextResponse.json({ message: "Subject name is required." }, { status: 400 });
  }
  
  const formattedName = subjectName.charAt(0).toUpperCase() + subjectName.slice(1).toLowerCase();

  if (db.subjects.find(s => s.toLowerCase() === formattedName.toLowerCase())) {
    return NextResponse.json({ message: "Subject already exists." }, { status: 409 });
  }

  db.subjects.push(formattedName);

  if (teacherIds && Array.isArray(teacherIds)) {
    teacherIds.forEach((id: number) => {
      const teacher = db.teachers.find(t => t.id === id);
      if (teacher) {
        teacher.subject = formattedName;
      }
    });
  }

  return NextResponse.json({ name: formattedName }, { status: 201 });
}
```

# === app/api/subjects/[name]/route.ts ===
```ts
import { NextResponse } from 'next/server';
import db from '@/lib/mock-db';
import type { Teacher } from '@/lib/schemas';

export async function PUT(request: Request, context: { params: { name: string } }) {
  const oldSubjectName = decodeURIComponent(context.params.name);
  const { newSubjectName, teacherIds } = await request.json();

  const subjectIndex = db.subjects.findIndex(s => s.toLowerCase() === oldSubjectName.toLowerCase());
  if (subjectIndex === -1) {
    return NextResponse.json({ message: 'Subject not found' }, { status: 404 });
  }

  const finalName = newSubjectName || oldSubjectName;

  if (newSubjectName && newSubjectName !== oldSubjectName) {
    db.subjects[subjectIndex] = newSubjectName;
    db.teachers.forEach((teacher: Teacher) => {
      if (teacher.subject.toLowerCase() === oldSubjectName.toLowerCase()) {
        teacher.subject = finalName;
      }
    });
  }

  if (teacherIds && Array.isArray(teacherIds)) {
    db.teachers.forEach((teacher: Teacher) => {
        if (teacher.subject.toLowerCase() === finalName.toLowerCase() && !teacherIds.includes(teacher.id)) {
            teacher.subject = 'Unassigned';
        }
    });
    
    teacherIds.forEach((id: number) => {
      const teacher = db.teachers.find(t => t.id === id);
      if (teacher) {
        teacher.subject = finalName;
      }
    });
  }

  return NextResponse.json({ message: "Subject updated successfully." });
}

export async function DELETE(request: Request, context: { params: { name: string } }) {
    const subjectNameToDelete = decodeURIComponent(context.params.name);
    const subjectIndex = db.subjects.findIndex(s => s.toLowerCase() === subjectNameToDelete.toLowerCase());

    if (subjectIndex === -1) {
        return NextResponse.json({ message: 'Subject not found' }, { status: 404 });
    }

    db.subjects.splice(subjectIndex, 1);

    db.teachers.forEach((teacher: Teacher) => {
        if (teacher.subject.toLowerCase() === subjectNameToDelete.toLowerCase()) {
            teacher.subject = 'Unassigned';
        }
    });
    
    return NextResponse.json({ message: `Subject "${subjectNameToDelete}" deleted successfully.` });
}
```

# === hooks/user-management.ts ===
```ts
import { useState, useMemo } from "react";
import useSWR, { MutatorCallback } from "swr";
import { toast } from "sonner";
import { UsersApiResponse } from "@/types/api.types";
import { addUser, deleteUser as deleteUserApi, fetcher, updateUser } from "@/lib/api";
import { UserFormValues, AppUser } from "@/lib/schemas";

interface UseUserManagementProps {
  userType: 'student' | 'teacher';
  itemsPerPage: number;
  currentPage: number;
  searchTerm: string;
  sortBy: string;
  sortOrder: string;
}

export function useUserManagement({ userType, itemsPerPage, currentPage, searchTerm, sortBy, sortOrder }: UseUserManagementProps) {
  const [userToDelete, setUserToDelete] = useState<AppUser | null>(null);
  const [userToEdit, setUserToEdit] = useState<AppUser | null>(null);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  
  const entityName = useMemo(() => (userType === 'student' ? 'Student' : 'Teacher'), [userType]);

  const skip = (currentPage - 1) * itemsPerPage;
  const swrKey = `/api/${userType}s?limit=${itemsPerPage}&skip=${skip}&search=${encodeURIComponent(searchTerm)}&sortBy=${sortBy}&sortOrder=${sortOrder}`;
  
  const { data, error, isLoading, mutate } = useSWR<UsersApiResponse>(swrKey, fetcher, { keepPreviousData: true });

  const handleCreateUser = async (userData: Partial<AppUser>) => {
    // Add the discriminator type for creation
    const finalUserData = { ...userData, type: userType };
    await addUser(userType, finalUserData);
    toast.success(`${entityName} added successfully.`);
    mutate(); 
  }

  const handleUpdateUser = async (userId: number, userData: Partial<AppUser>) => {
    await updateUser(userType, userId, userData);
    toast.success(`${entityName} updated successfully.`);
    mutate();
  }

  const handleFormSubmit = async (formData: UserFormValues) => {
    try {
      if (userToEdit) {
        await handleUpdateUser(userToEdit.id, formData);
      } else {
        await handleCreateUser(formData);
      }
      closeFormModal();
    } catch(err) {
      const message = err instanceof Error ? err.message : `Failed to save ${entityName.toLowerCase()}.`;
      toast.error(message);
      throw err;
    }
  };
  
  const handleDeleteUser = async (userId: number) => {
    const optimisticData: MutatorCallback<UsersApiResponse> = (currentData) => {
      if (!currentData) return currentData;
      return { ...currentData, users: currentData.users.filter(u => u.id !== userId) };
    };
    await mutate(optimisticData, { revalidate: false });

    try {
      await deleteUserApi(userType, userId);
      toast.success(`${entityName} deleted successfully.`);
    } catch {
      toast.error(`Failed to delete ${entityName.toLowerCase()}.`);
      mutate();
    } finally {
      setUserToDelete(null);
    }
  };
  
  const openCreateModal = () => { setUserToEdit(null); setIsFormModalOpen(true); };
  const openEditModal = (user: AppUser) => { setUserToEdit(user); setIsFormModalOpen(true); };
  const closeFormModal = () => setIsFormModalOpen(false);
  const openDeleteDialog = (user: AppUser) => setUserToDelete(user);
  const closeDeleteDialog = () => setUserToDelete(null);

  return {
    data, error, isLoading, isFormModalOpen,
    openCreateModal, openEditModal, closeFormModal, handleFormSubmit,
    userToEdit, userToDelete, openDeleteDialog, closeDeleteDialog, handleDeleteUser,
  };
}
```

# === types/recharts.d.ts ===
```ts
declare module 'recharts/lib/chart/LineChart';
declare module 'recharts/lib/chart/BarChart';

declare module 'recharts/lib/component/ResponsiveContainer';
declare module 'recharts/lib/component/Tooltip';
declare module 'recharts/lib/component/Cell';

declare module 'recharts/lib/cartesian/XAxis';
declare module 'recharts/lib/cartesian/YAxis';
declare module 'recharts/lib/cartesian/Area';
declare module 'recharts/lib/cartesian/Line';
declare module 'recharts/lib/cartesian/Bar';

declare module 'recharts/lib/shape/Rectangle';
```

# === types/api.types.ts ===
```ts
import type { AppUser } from "@/lib/schemas";

export interface UsersApiResponse {
    users: AppUser[];
    total: number;
    skip: number;
    limit: number;
}
```

# === components/shared/table-pagination-controls.tsx ===
```tsx
"use client";

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Pagination } from "@/components/ui/pagination";

interface TablePaginationControlsProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  itemsPerPage: number;
  onItemsPerPageChange: (value: string) => void;
  totalItems: number;
  itemType: string;
  itemsPerPageOptions?: number[];
}

export function TablePaginationControls({
  currentPage,
  totalPages,
  onPageChange,
  itemsPerPage,
  onItemsPerPageChange,
  totalItems,
  itemType,
  itemsPerPageOptions = [10, 20, 30, 40, 50],
}: TablePaginationControlsProps) {
  const startItem = totalItems > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0;
  const endItem = Math.min(currentPage * itemsPerPage, totalItems);

  return (
    <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
      <div className="text-sm text-muted-foreground">
        {totalItems > 0 ? `Showing ${startItem}-${endItem} of ${totalItems} ${itemType}` : `No ${itemType} found`}
      </div>
      <div className="flex items-center gap-4 sm:gap-6">
          <div className="flex items-center gap-2">
            <p className="text-sm font-medium whitespace-nowrap">Rows per page</p>
            <Select
              value={`${itemsPerPage}`}
              onValueChange={onItemsPerPageChange}
            >
              <SelectTrigger className="h-8 w-[70px]">
                <SelectValue placeholder={itemsPerPage} />
              </SelectTrigger>
              <SelectContent side="top">
                {itemsPerPageOptions.map((pageSize) => (
                  <SelectItem key={pageSize} value={`${pageSize}`}>
                    {pageSize}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        {totalPages > 1 && (
            <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={onPageChange}
            />
        )}
      </div>
    </div>
  );
}
```

# === components/shared/confirmation-dialog.tsx ===
```tsx
// === NEW FILE: components/shared/confirmation-dialog.tsx ===
"use client";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

interface ConfirmationDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onConfirm: () => void;
  title: string;
  description: string;
  confirmText?: string;
  isDestructive?: boolean;
}

export function ConfirmationDialog({
  isOpen,
  onOpenChange,
  onConfirm,
  title,
  description,
  confirmText = "Confirm",
  isDestructive = true,
}: ConfirmationDialogProps) {
  
  const handleConfirm = () => {
    onConfirm();
    onOpenChange(false);
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
          <DialogDescription>{description}</DialogDescription>
        </DialogHeader>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button
            onClick={handleConfirm}
            className={cn(isDestructive && "bg-destructive text-destructive-foreground hover:bg-destructive/90")}
          >
            {confirmText}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/shared/page-header.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export function PageHeader({
  title,
  description,
  className,
  children,
  ...props
}: PageHeaderProps) {
  return (
    <div className={cn("flex flex-col md:flex-row items-start md:items-center justify-between gap-4", className)} {...props}>
      <div className="space-y-2">
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight text-foreground">
          {title}
        </h1>
        {description && <p className="text-muted-foreground">{description}</p>}
      </div>
      {children && <div className="flex items-center gap-4 w-full md:w-auto justify-end">{children}</div>}
    </div>
  );
}
```

# === components/dashboard/stat-card.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface StatCardProps {
  title: string;
  value: string;
  change: string;
  isNegative?: boolean;
  className?: string;
}

export function StatCard({ title, value, change, isNegative = false, className }: StatCardProps) {
  return (
    <div className={cn("rounded-lg p-4", "bg-muted/50", className)}>
      <p className="text-sm text-muted-foreground">{title}</p>
      <p className="text-2xl font-bold text-foreground my-1">{value}</p>
      <p
        className={cn(
          "text-xs font-semibold",
          isNegative ? "text-destructive" : "text-emerald-600 dark:text-emerald-400"
        )}
      >
        {change}
      </p>
    </div>
  );
}
```

# === components/dashboard/attendance-chart.tsx ===
```tsx
"use client";
import { Area } from 'recharts/lib/cartesian/Area';
import { Line } from 'recharts/lib/cartesian/Line';
import { XAxis } from 'recharts/lib/cartesian/XAxis';
import { YAxis } from 'recharts/lib/cartesian/YAxis';
import { LineChart } from 'recharts/lib/chart/LineChart';
import { ResponsiveContainer } from 'recharts/lib/component/ResponsiveContainer';
import { Tooltip } from 'recharts/lib/component/Tooltip';

import { StudentAttendance } from "@/lib/mock-data";

export function AttendanceChart({ data }: { data: StudentAttendance[] }) {
  return (
    <div className="rounded-lg border bg-white p-4 h-[400px] flex flex-col">
      <h3 className="font-semibold text-lg mb-2">Monthly Attendance Trends</h3>
      <div className="flex-grow">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={data}
            margin={{ top: 5, right: 10, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorAttendance" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.3} />
                <stop offset="100%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>

            <XAxis
              dataKey="month"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              // FIX: Explicitly type 'value' as number
              tickFormatter={(value: number) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: "white",
                border: "1px solid #e2e8f0",
                borderRadius: "0.5rem",
              }}
              // FIX: Explicitly type 'value' as number (already done here, but good practice to confirm)
              formatter={(value: number) => [`${value}%`, "Attendance"]}
            />
            <Area
              type="monotone"
              dataKey="attendance"
              stroke="none"
              fill="url(#colorAttendance)"
            />
            <Line
              type="monotone"
              dataKey="attendance"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={{ r: 4 }}
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
```

# === components/dashboard/student-sidebar.tsx ===
```tsx
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { LayoutDashboard, Users, UserSquare, BookOpen, Menu, X } from "lucide-react";
import { cn } from "@/lib/utils";
import { useEffect, useState } from "react";

const navItems = [
  { href: "/", icon: LayoutDashboard, label: "Dashboard" },
  { href: "/students", icon: Users, label: "Students" },
  { href: "/teachers", icon: UserSquare, label: "Teachers" },
  { href: "/subjects", icon: BookOpen, label: "Subjects" },
];

export function StudentDashboardSidebar() {
  const pathname = usePathname();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    setIsMenuOpen(false);
  }, [pathname]);

  const navLinks = navItems.map((item) => {
    const isActive = (item.href === "/" && pathname === "/") || (item.href !== "/" && pathname.startsWith(item.href));
    return (
      <Link
        key={item.label}
        href={item.href}
        className={cn(
          "flex items-center gap-3 rounded-md px-3 py-2 text-muted-foreground transition-all hover:bg-secondary hover:text-primary",
          isActive && "bg-secondary text-primary font-semibold"
        )}
      >
        <item.icon className="h-5 w-5" />
        {item.label}
      </Link>
    )
  });

  return (
    <aside className="w-full lg:w-56 lg:flex-shrink-0">
      <div className="flex justify-between items-center mb-4 lg:mb-8">
        <div className="flex items-center gap-2">
          <div className="p-2 bg-primary rounded-lg">
            <BookOpen className="h-6 w-6 text-primary-foreground" />
          </div>
          <span className="text-xl font-bold">SyncBoard</span>
        </div>
        <button
          className="lg:hidden rounded-md p-2 -mr-2"
          onClick={() => setIsMenuOpen(!isMenuOpen)}
        >
          <span className="sr-only">Toggle menu</span>
          {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
        </button>
      </div>
      
      <div
        className={cn(
          "transition-all duration-300 ease-in-out overflow-hidden lg:hidden",
          isMenuOpen ? 'max-h-screen' : 'max-h-0'
        )}
      >
        <nav className="flex flex-col gap-2 border-t pt-4">
          {navLinks}
        </nav>
      </div>

      <nav className="hidden lg:flex flex-col gap-2">
        {navLinks}
      </nav>
    </aside>
  );
}
```

# === components/dashboard/student-performance-summary.tsx ===
```tsx
"use client"

import {
  Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Rectangle } from 'recharts/lib/shape/Rectangle';
import type { RectangleProps } from 'recharts';

import { Bar } from 'recharts/lib/cartesian/Bar';
import { XAxis } from 'recharts/lib/cartesian/XAxis';
import { YAxis } from 'recharts/lib/cartesian/YAxis';
import { BarChart } from 'recharts/lib/chart/BarChart';
import { Cell } from 'recharts/lib/component/Cell';
import { ResponsiveContainer } from 'recharts/lib/component/ResponsiveContainer';
import { Tooltip } from 'recharts/lib/component/Tooltip';

import type { GradeDistribution, SubjectScore } from "@/lib/mock-data";
import { subjectScoreData } from "@/lib/mock-data";
import { ValueType } from "recharts/types/component/DefaultTooltipContent";

const GRADE_COLORS = ['#2dd4bf', '#3b82f6', '#fbbd23', '#f87171', '#ef4444'];

interface CustomTooltipProps {
  active?: boolean;
  payload?: { value: ValueType }[];
  label?: string;
}

const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {
  if (active && payload && payload.length) {
    return (
      <div className="p-2 text-sm rounded-md border bg-popover text-popover-foreground shadow-md glass-card">
        <p className="font-bold">{`Grade ${label}`}</p>
        <p>{`Number of Students: ${payload[0].value}`}</p>
      </div>
    );
  }
  return null;
};

const ActiveBar = (props: RectangleProps) => {
  const { x = 0, y = 0, width = 0, height = 0, ...rest } = props;
  return <Rectangle {...rest} x={x} width={width} height={height + 5} y={y - 5} />;
};


const GradeDistributionChart = ({ data }: { data: GradeDistribution[] }) => (
  <div className="h-56">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data} margin={{ top: 10, right: 10, left: -15, bottom: 5 }}>
        <XAxis dataKey="grade" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} allowDecimals={false}/>
        <Tooltip cursor={false} content={<CustomTooltip />} />
        <Bar dataKey="count" radius={[6, 6, 0, 0]} activeBar={<ActiveBar />}>
          {data.map((_entry, index) => (
            <Cell key={`cell-${index}`} fill={GRADE_COLORS[index % GRADE_COLORS.length]} />
          ))}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const TopSubjectsList = ({ data }: { data: SubjectScore[] }) => (
  <Table>
    <TableHeader><TableRow><TableHead>Subject</TableHead><TableHead className="text-right">Avg. Score</TableHead></TableRow></TableHeader>
    <TableBody>
      {data.sort((a, b) => b.averageScore - a.averageScore).slice(0, 5).map((subject) => (
        <TableRow key={subject.name} className="hover:bg-muted/50 text-sm">
          <TableCell className="font-medium capitalize">{subject.name.replace(/-/g, ' ')}</TableCell>
          <TableCell className="text-right"><Badge variant="secondary" className={subject.averageScore >= 90 ? "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300" : subject.averageScore >= 80 ? "bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-300" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300"}>{subject.averageScore.toFixed(1)}%</Badge></TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

export function StudentPerformanceSummary({ gradeDistribution }: { gradeDistribution?: GradeDistribution[] }) {
  const currentTopSubjectsData = subjectScoreData["full_year"];

  return (
    <div className="rounded-lg border bg-card p-4 h-full flex flex-col gap-4">
      <div>
        <h2 className="font-semibold text-lg mb-2">Grade Distribution</h2>
        {gradeDistribution ? <GradeDistributionChart data={gradeDistribution} /> : <p className="text-center text-muted-foreground p-8">Loading stats...</p>}
      </div>
      <div className="border-t pt-2">
        <h2 className="font-semibold text-lg mb-2">Top Subjects</h2>
        <div className="overflow-auto">
          <TopSubjectsList data={currentTopSubjectsData} />
        </div>
      </div>
    </div>
  );
}
```

# === components/features/user/user-table.tsx ===
```tsx
"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import type { AppUser } from "@/lib/schemas";
import { Trash2, Pencil, MoreHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";

interface UserTableProps {
  users: AppUser[];
  type: 'student' | 'teacher';
  onDelete: (user: AppUser) => void;
  onEdit: (user: AppUser) => void;
}

export function UserTable({ users, type, onDelete, onEdit }: UserTableProps) {
  return (
    <Table className="min-w-full">
      <TableHeader>
        <TableRow className="border-b hover:bg-transparent">
          <TableHead className="w-[70px] px-3 py-2 font-semibold text-foreground">ID</TableHead>
          <TableHead className="min-w-[150px] px-3 py-2 font-semibold text-foreground">Name</TableHead>
          <TableHead className="hidden sm:table-cell px-3 py-2 font-semibold text-foreground">Email</TableHead>
          <TableHead className="hidden md:table-cell px-3 py-2 font-semibold text-foreground">Phone</TableHead>
          {type === 'student' && <TableHead className="w-[120px] px-3 py-2 font-semibold text-foreground">Grade</TableHead>}
          {type === 'teacher' && <TableHead className="px-3 py-2 font-semibold text-foreground">Subject</TableHead>}
          <TableHead className="w-[120px] px-3 py-2 text-right font-semibold text-foreground">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.id} className="hover:bg-muted/50">
            <TableCell className="px-3 py-2 text-muted-foreground">{user.id}</TableCell>
            <TableCell className="px-3 py-2 font-medium text-foreground">
              {`${user.firstName} ${user.lastName}`}
            </TableCell>
            <TableCell className="hidden sm:table-cell px-3 py-2">{user.email}</TableCell>
            <TableCell className="hidden md:table-cell px-3 py-2">{user.phone}</TableCell>
            
            {/* TYPE-SAFE: No more casting! TypeScript understands the properties based on user.type */}
            {user.type === 'student' && (
              <TableCell className="px-3 py-2 text-center">
                <Badge className={cn(
                  "font-semibold",
                  {
                    "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300": user.grade === 'A',
                    "bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300": user.grade === 'B',
                    "bg-amber-100 text-amber-800 dark:bg-amber-900/50 dark:text-amber-300": user.grade === 'C',
                    "bg-orange-100 text-orange-800 dark:bg-orange-900/50 dark:text-orange-300": user.grade === 'D',
                    "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300": user.grade === 'F',
                  }
                )}>
                  {user.grade}
                </Badge>
              </TableCell>
            )}
            {user.type === 'teacher' && (
              <TableCell className="capitalize px-3 py-2">
                {user.subject}
              </TableCell>
            )}

            <TableCell className="text-right px-3 py-2">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0">
                    <span className="sr-only">Open menu</span>
                    <MoreHorizontal className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => onEdit(user)}>
                    <Pencil className="mr-2 h-4 w-4" />
                    <span>Edit</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onDelete(user)} className="text-destructive focus:text-destructive focus:bg-destructive/10">
                    <Trash2 className="mr-2 h-4 w-4" />
                    <span>Delete</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}
```

# === components/features/user/user-form-modal.tsx ===
```tsx
"use client";

import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { userSchema, type UserFormValues, type AppUser } from "@/lib/schemas";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useEffect, useState } from "react";

interface UserFormModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  userType: 'student' | 'teacher';
  onSubmit: (data: UserFormValues) => Promise<void>;
  initialData?: AppUser | null;
}

export function UserFormModal({ isOpen, onOpenChange, userType, onSubmit, initialData }: UserFormModalProps) {
  // ... rest of the component logic remains the same
  const [isSubmitting, setIsSubmitting] = useState(false);
  const isEditMode = !!initialData;

  const form = useForm<UserFormValues>({
    resolver: zodResolver(userSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
    },
  });

  useEffect(() => {
    if (isOpen) {
      if (isEditMode && initialData) {
        form.reset({
          firstName: initialData.firstName,
          lastName: initialData.lastName,
          email: initialData.email,
          phone: initialData.phone || "",
        });
      } else {
        form.reset();
      }
    }
  }, [isOpen, isEditMode, initialData, form]);

  const handleFormSubmit = async (data: UserFormValues) => {
    setIsSubmitting(true);
    try {
      await onSubmit(data);
    } catch {
      // Error is handled by the hook
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>{isEditMode ? `Edit ${userType}` : `Add New ${userType}`}</DialogTitle>
          <DialogDescription>
            {isEditMode ? `Update the details for this ${userType}.` : `Enter the details for the new ${userType}.`}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <FormField control={form.control} name="firstName" render={({ field }) => ( <FormItem><FormLabel>First Name</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )}/>
              <FormField control={form.control} name="lastName" render={({ field }) => ( <FormItem><FormLabel>Last Name</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )}/>
            </div>
            <FormField control={form.control} name="email" render={({ field }) => ( <FormItem><FormLabel>Email</FormLabel><FormControl><Input type="email" {...field} /></FormControl><FormMessage /></FormItem> )}/>
            <FormField control={form.control} name="phone" render={({ field }) => ( <FormItem><FormLabel>Phone (Optional)</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )}/>
            <div className="flex justify-end gap-2 pt-4">
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isSubmitting}> Cancel </Button>
              <Button type="submit" className="button-gradient" disabled={isSubmitting || !form.formState.isDirty}> {isSubmitting ? 'Saving...' : (isEditMode ? 'Save Changes' : `Save ${userType}`)} </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/user/user-table-skeleton.tsx ===
```tsx
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

interface UserTableSkeletonProps {
  type: 'student' | 'teacher';
  items: number; // New prop to control how many skeleton rows to show
}

export function UserTableSkeleton({ type, items = 10 }: UserTableSkeletonProps) {
  const skeletonRows = Array.from({ length: items });

  return (
    <Table className="min-w-full">
      <TableHeader>
        <TableRow>
          <TableHead className="w-[70px] px-3 py-2">User ID</TableHead>
          <TableHead className="px-3 py-2">Name</TableHead>
          <TableHead className="hidden sm:table-cell px-3 py-2">Email</TableHead>
          <TableHead className="hidden md:table-cell px-3 py-2">Phone</TableHead>
          {type === 'student' && <TableHead className="px-3 py-2">Grade</TableHead>}
          {type === 'teacher' && <TableHead className="px-3 py-2">Subject</TableHead>}
          <TableHead className="w-[50px] px-3 py-2 text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {skeletonRows.map((_, index) => (
          <TableRow key={index}>
            <TableCell className="px-3 py-2"><Skeleton className="h-4 w-12" /></TableCell>
            <TableCell className="px-3 py-2"><Skeleton className="h-4 w-32" /></TableCell>
            <TableCell className="hidden sm:table-cell px-3 py-2"><Skeleton className="h-4 w-48" /></TableCell>
            <TableCell className="hidden md:table-cell px-3 py-2"><Skeleton className="h-4 w-40" /></TableCell>
            <TableCell className="px-3 py-2"><Skeleton className="h-4 w-24" /></TableCell>
            <TableCell className="text-right px-3 py-2"><Skeleton className="h-8 w-8 rounded-md" /></TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}
```

# === components/features/user/user-management-page.tsx ===
```tsx
"use client";

import { useState, useEffect, useMemo } from "react";
import { AlertTriangle, PlusCircle, Search } from "lucide-react";
import { useUserManagement } from "@/hooks/user-management";
import { PageHeader } from "@/components/shared/page-header";
import { UserTable } from "@/components/features/user/user-table";
import { UserTableSkeleton } from "@/components/features/user/user-table-skeleton";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { TablePaginationControls } from "@/components/shared/table-pagination-controls";
import { Button } from "@/components/ui/button";
import { UserFormModal } from "./user-form-modal";
import { ConfirmationDialog } from "@/components/shared/confirmation-dialog";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface UserManagementPageProps {
  userType: 'student' | 'teacher';
  pageTitle: string;
  pageDescription: string;
}

export function UserManagementPage({ userType, pageTitle, pageDescription }: UserManagementPageProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [searchTerm, setSearchTerm] = useState('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');
  const [sortOption, setSortOption] = useState('name-asc');

  const { sortBy, sortOrder } = useMemo(() => {
    const [by, order] = sortOption.split('-');
    return { sortBy: by, sortOrder: order };
  }, [sortOption]);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
      setCurrentPage(1);
    }, 300);
    return () => clearTimeout(timer);
  }, [searchTerm]);

  const {
    data, error, isLoading, handleFormSubmit,
    isFormModalOpen, openCreateModal, openEditModal, closeFormModal, userToEdit,
    userToDelete, openDeleteDialog, closeDeleteDialog, handleDeleteUser
  } = useUserManagement({ userType, itemsPerPage, currentPage, searchTerm: debouncedSearchTerm, sortBy, sortOrder });
  
  const totalCount = data?.total;
  
  const handleItemsPerPageChange = (value: string) => {
    setItemsPerPage(Number(value));
    setCurrentPage(1);
  };

  const totalPages = totalCount ? Math.ceil(totalCount / itemsPerPage) : 0;

  return (
    <>
      <div className="flex flex-col rounded-lg border bg-card overflow-hidden">
        <div className="p-4 sm:p-6 space-y-4">
          <PageHeader title={pageTitle} description={pageDescription}>
            <Button onClick={openCreateModal} className="button-gradient">
              <PlusCircle className="mr-2 h-4 w-4" />
              Add New {userType}
            </Button>
          </PageHeader>
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder={`Search ${userType}s by name or email...`}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-9 w-full"
              />
            </div>
            <Select value={sortOption} onValueChange={setSortOption}>
              <SelectTrigger className="w-full sm:w-[200px]">
                <SelectValue placeholder="Sort by..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="name-asc">Name (A-Z)</SelectItem>
                <SelectItem value="name-desc">Name (Z-A)</SelectItem>
                {userType === 'student' && <>
                    <SelectItem value="grade-asc">Grade (A-F)</SelectItem>
                    <SelectItem value="grade-desc">Grade (F-A)</SelectItem>
                </>}
                {userType === 'teacher' && <>
                    <SelectItem value="subject-asc">Subject (A-Z)</SelectItem>
                    <SelectItem value="subject-desc">Subject (Z-A)</SelectItem>
                </>}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="overflow-x-auto">
          {isLoading && !data && <UserTableSkeleton type={userType} items={itemsPerPage} />}
          {error && (
            <Alert variant="destructive" className="glass-card m-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>Failed to load {userType}s. Please try again.</AlertDescription>
            </Alert>
          )}
          {data && !data.users.length && <p className="py-10 text-center text-muted-foreground">No {userType}s found.</p>}
          {data?.users && data.users.length > 0 && (
            <UserTable
              users={data.users}
              type={userType}
              onDelete={openDeleteDialog}
              onEdit={openEditModal}
            />
          )}
        </div>

        {data && (data.users.length > 0 || searchTerm) && (
          <div className="p-4 border-t">
            <TablePaginationControls
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
              itemsPerPage={itemsPerPage}
              onItemsPerPageChange={handleItemsPerPageChange}
              totalItems={totalCount ?? 0}
              itemType={`${userType}s`}
            />
          </div>
        )}
      </div>

      <UserFormModal
        isOpen={isFormModalOpen}
        onOpenChange={closeFormModal}
        userType={userType}
        onSubmit={handleFormSubmit}
        initialData={userToEdit}
      />
      
      <ConfirmationDialog
        isOpen={!!userToDelete}
        onOpenChange={(isOpen) => !isOpen && closeDeleteDialog()}
        onConfirm={() => {
          if (userToDelete) {
            handleDeleteUser(userToDelete.id);
          }
        }}
        title={`Delete ${userType}?`}
        description={`Are you sure you want to delete ${userToDelete?.firstName} ${userToDelete?.lastName}? All of their data will be removed.`}
        confirmText={`Yes, delete ${userType}`}
      />
    </>
  );
}
```

# === components/features/subject/SubjectDetailsModal.tsx ===
```tsx
"use client";

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import type { Teacher } from "@/lib/schemas";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
import { cn } from "@/lib/utils";

interface SubjectDetailsModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  subjectDetails: {
    name: string;
    teachers: Teacher[];
    studentCount: number;
    avgGrade: number;
  } | null;
}

const getGradeColorClass = (grade: number) => {
  if (grade >= 90) return "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300";
  if (grade >= 80) return "bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300";
  if (grade >= 70) return "bg-amber-100 text-amber-800 dark:bg-amber-900/50 dark:text-amber-300";
  return "bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300";
};

export function SubjectDetailsModal({ isOpen, onOpenChange, subjectDetails }: SubjectDetailsModalProps) {
  if (!subjectDetails) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle className="text-2xl text-primary">{subjectDetails.name}</DialogTitle>
          <DialogDescription>
            An overview of the subject and its instructors.
          </DialogDescription>
        </DialogHeader>
        <div className="grid grid-cols-2 gap-4 py-4 text-sm">
            <div className="flex flex-col gap-1">
                <span className="text-muted-foreground">Students Enrolled</span>
                <span className="font-semibold text-lg">{subjectDetails.studentCount}</span>
            </div>
            <div className="flex flex-col gap-1">
                <span className="text-muted-foreground">Average Grade</span>
                <Badge className={cn("w-fit text-base border-none", getGradeColorClass(subjectDetails.avgGrade))}>{subjectDetails.avgGrade.toFixed(1)}%</Badge>
            </div>
        </div>
        <div>
            <h4 className="font-semibold mb-3">Instructors ({subjectDetails.teachers.length})</h4>
            <div className="space-y-3">
                {subjectDetails.teachers.length > 0 ? (
                    subjectDetails.teachers.map(teacher => (
                        <div key={teacher.id} className="flex items-center gap-3 p-2 rounded-md hover:bg-muted/50">
                            <Image src={teacher.image} alt={teacher.firstName} width={40} height={40} className="rounded-full" />
                            <div className="flex flex-col">
                                <span className="font-medium">{teacher.firstName} {teacher.lastName}</span>
                                <span className="text-xs text-muted-foreground">{teacher.email}</span>
                            </div>
                        </div>
                    ))
                ) : (
                    <p className="text-sm text-muted-foreground italic text-center py-8">No instructors are currently assigned to this subject.</p>
                )}
            </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/subject/SubjectFormModal.tsx ===
```tsx
"use client";

import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import type { Teacher } from "@/lib/schemas";
import { Checkbox } from "@/components/ui/checkbox";
import { subjectSchema, type SubjectFormValues } from "@/lib/schemas";
import { toast } from "sonner";

interface SubjectFormModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onSubmit: (data: SubjectFormValues) => Promise<void>;
  allTeachers: Teacher[];
  initialData?: SubjectFormValues | null;
}

export function SubjectFormModal({ isOpen, onOpenChange, onSubmit, allTeachers, initialData }: SubjectFormModalProps) {
  const isEditMode = !!initialData;

  const form = useForm<SubjectFormValues>({
    resolver: zodResolver(subjectSchema),
  });
  
  const { isSubmitting } = form.formState;

  useEffect(() => {
    if (isOpen) {
      form.reset(isEditMode && initialData ? initialData : { name: "", teacherIds: [] });
    }
  }, [isOpen, isEditMode, initialData, form]);

  const handleSubmit = async (data: SubjectFormValues) => {
    try {
      await onSubmit(data);
      onOpenChange(false);
    } catch (err) {
       if (err instanceof Error) {
        toast.error(err.message || "An unknown error occurred.");
      }
    }
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>{isEditMode ? "Edit Subject" : "Add New Subject"}</DialogTitle>
          <DialogDescription>
            {isEditMode 
              ? "Update the subject details and assign instructors." 
              : "Enter the name for the new subject and optionally assign instructors."
            }
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6 pt-4">
            <FormField
              control={form.control} name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Subject Name</FormLabel>
                  <FormControl><Input {...field} placeholder="e.g. Computer Science" /></FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control} name="teacherIds"
              render={() => (
                <FormItem>
                  <FormLabel>Assign Instructors ({form.watch('teacherIds')?.length || 0} selected)</FormLabel>
                  <div className="max-h-48 overflow-y-auto mt-2 border rounded-md p-4">
                    <div className="space-y-3">
                      {allTeachers.map((teacher) => (
                        <FormField
                           key={teacher.id} control={form.control} name="teacherIds"
                           render={({ field }) => (
                             <FormItem key={teacher.id} className="flex flex-row items-start space-x-3 space-y-0">
                               <FormControl>
                                 <Checkbox
                                   checked={field.value?.includes(teacher.id)}
                                   onCheckedChange={(checked) => {
                                     return checked
                                       ? field.onChange([...(field.value || []), teacher.id])
                                       : field.onChange(field.value?.filter((id) => id !== teacher.id));
                                   }}
                                 />
                               </FormControl>
                               <FormLabel className="font-normal">{`${teacher.firstName} ${teacher.lastName}`}</FormLabel>
                             </FormItem>
                           )}
                         />
                      ))}
                    </div>
                  </div>
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isSubmitting}>Cancel</Button>
              <Button type="submit" className="button-gradient" disabled={isSubmitting}>
                {isSubmitting ? 'Saving...' : (isEditMode ? 'Save Changes' : 'Save Subject')}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```
