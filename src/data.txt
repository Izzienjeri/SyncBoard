
**ðŸ“„ Create file `types/product.types.ts`:**

```typescript
// types/product.types.ts

// Based on the structure from DummyJSON API
export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

// We can also define the shape for creating/updating a product.
// Often, you don't need to provide an `id` or other read-only fields.
export type ProductFormData = Omit<Product, 'id' | 'rating'>;

```



**ðŸ”„ Update file `app/layout.tsx`:**

```typescript
// app/layout.tsx

import type { Metadata } from "next";
import { Inter as FontSans } from "next/font/google";
import { ThemeProvider } from "@/components/theme-provider";
import { Toaster } from "@/components/ui/sonner";
import { cn } from "@/lib/utils";
import "./globals.css";

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata: Metadata = {
  title: "SyncBoard",
  description: "A modern dashboard for managing products.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          fontSans.variable
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
          <Toaster position="top-center" richColors />
        </ThemeProvider>
      </body>
    </html>
  );
}
```

**ðŸ“„ Create file `components/theme-provider.tsx` (as per `next-themes` docs):**

```typescript
// components/theme-provider.tsx

"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
```


**ðŸ“„ Create file `components/shared/page-header.tsx`:**

```typescript
// components/shared/page-header.tsx

import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
}

export function PageHeader({ title, description, className, ...props }: PageHeaderProps) {
  return (
    <div className={cn("space-y-2", className)} {...props}>
      <h1 className="text-3xl font-bold tracking-tight">{title}</h1>
      {description && <p className="text-muted-foreground">{description}</p>}
    </div>
  );
}
```

**ðŸ”„ Update file `app/page.tsx`:**

```typescript
// app/page.tsx

import { PageHeader } from "@/components/shared/page-header";

export default function DashboardPage() {
  return (
    <main className="container py-8">
      <PageHeader
        title="Products"
        description="Manage your product inventory."
      />
      {/* Product table and actions will go here in the next phase */}
    </main>
  );
}
```

---

#### **Commit 5: Initial Page**

```bash
git add .
git commit -m "feat: Create initial dashboard page layout

- Builds the main entry point for the dashboard at `/`.
- Creates a reusable `PageHeader` component to ensure consistent
  page titles and styling throughout the app.
- Establishes the main container and padding for page content."
```

---

### **Phase 1 Complete**

We have now successfully laid the groundwork for SyncBoard.

**What we have achieved:**

*   âœ… A clean, logical, and scalable folder structure.
*   âœ… A fully configured environment with Next.js, TypeScript, and Tailwind CSS.
*   âœ… A component library (`shadcn/ui`) ready to be used.
*   âœ… Foundational providers for theming and notifications.
*   âœ… Strong type safety established with our first `Product` type.
*   âœ… A clear and documented Git history of our setup process.

The application is now primed for Phase 2, where we will fetch data from the API, display it in a table, and start building the core UI components.