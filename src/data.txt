# Extracted Code (.ts, .tsx, .css)
# Date and Time: 2025-07-31 17:43:33
# Files Included: 16

# === lib/utils.ts ===
```ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
```

# === lib/api.ts ===
```ts
import { Product } from "@/types/product.types";
import { ProductSchema } from "@/validators/product.schema";

const API_BASE_URL = "https://fakestoreapi.com";

export async function getProducts(url: string): Promise<Product[]> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch products");
    }
    const data: Product[] = await res.json();
    // Mock audit data since the API doesn't provide it
    return data.map((product) => ({
      ...product,
      createdAt: new Date(Date.now() - Math.random() * 1e10).toISOString(),
      createdBy: "Admin",
    }));
  } catch {
    throw new Error("Could not retrieve products. Please try again later.");
  }
}

export async function createProduct(
  productData: ProductSchema
): Promise<Product> {
  try {
    const payload = {
      ...productData,
      image: "https://i.pravatar.cc",
      category: "electronic",
    };
    const res = await fetch(`${API_BASE_URL}/products`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      throw new Error("Failed to create product");
    }

    const newProduct: Product = await res.json();
    // Add mocked audit data on creation
    return {
      ...newProduct,
      createdAt: new Date().toISOString(),
      createdBy: "System",
    };
  } catch {
    throw new Error("Could not create the product.");
  }
}

export async function updateProduct(
  productId: number,
  productData: Partial<ProductSchema>
): Promise<Product> {
  try {
    const res = await fetch(`${API_BASE_URL}/products/${productId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(productData),
    });

    if (!res.ok) {
      throw new Error("Failed to update product");
    }

    const updatedProduct: Product = await res.json();
    // Add mocked audit data on update
    return {
      ...updatedProduct,
      ...productData, // The API returns the old object, so we merge the new data
      updatedAt: new Date().toISOString(),
      updatedBy: "System",
    };
  } catch {
    throw new Error("Could not update the product.");
  }
}

export async function deleteProduct(productId: number): Promise<Product> {
  try {
    const res = await fetch(`${API_BASE_URL}/products/${productId}`, {
      method: "DELETE",
    });

    if (!res.ok) {
      throw new Error("Failed to delete product");
    }

    const deletedProduct: Product = await res.json();
    return deletedProduct;
  } catch {
    throw new Error("Could not delete the product.");
  }
}
```

# === app/globals.css ===
```css
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.208 0.042 265.755);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.208 0.042 265.755);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.929 0.013 255.508);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

# === app/layout.tsx ===
```tsx
import type { Metadata } from "next";
import { Inter as FontSans } from "next/font/google";
import { ThemeProvider } from "@/components/theme-provider";
import { Toaster } from "@/components/ui/sonner";
import { cn } from "@/lib/utils";
import "./globals.css";

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
  display: "swap",
});

export const metadata: Metadata = {
  title: "SyncBoard",
  description: "A modern dashboard for managing products.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          fontSans.variable
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
          <Toaster position="top-center" richColors />
        </ThemeProvider>
      </body>
    </html>
  );
}
```

# === app/page.tsx ===
```tsx
"use client";

import { useState, useMemo, useEffect } from "react";
import useSWR from "swr";
import { AlertTriangle, PlusCircle, Search } from "lucide-react";
import { toast } from "sonner";
import {
  DndContext,
  closestCenter,
  type DragEndEvent,
} from "@dnd-kit/core";
import { arrayMove } from "@dnd-kit/sortable";

import { PageHeader } from "@/components/shared/page-header";
import { ThemeToggle } from "@/components/shared/theme-toggle";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ProductTable } from "@/components/features/product/product-table";
import { ProductTableSkeleton } from "@/components/features/product/product-table-skeleton";
import { ProductFormModal } from "@/components/features/product/product-form-modal";
import { ProductPreviewModal } from "@/components/features/product/product-preview-modal";
import { Pagination } from "@/components/ui/pagination";
import { getProducts, deleteProduct, updateProduct } from "@/lib/api";
import { useDebounce } from "@/hooks/use-debounce";
import { Product } from "@/types/product.types";
import { ProductSchema } from "@/validators/product.schema";

const ITEMS_PER_PAGE = 10;

export default function DashboardPage() {
  // Modal States
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | undefined>(undefined);
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
  const [previewProduct, setPreviewProduct] = useState<Product | undefined>(undefined);
  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);
  const [productToDelete, setProductToDelete] = useState<Product | undefined>(undefined);

  // Data & Filtering States
  const [displayProducts, setDisplayProducts] = useState<Product[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState("title-asc");
  const [currentPage, setCurrentPage] = useState(1);
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  const { data: products, error, isLoading, mutate } = useSWR("https://fakestoreapi.com/products", getProducts);

  useEffect(() => {
    if (products) {
      setDisplayProducts(products);
    }
  }, [products]);

  const filteredAndSortedProducts = useMemo(() => {
    if (!displayProducts) return [];

    let processedProducts = [...displayProducts];

    // Filtering
    if (debouncedSearchTerm) {
      processedProducts = processedProducts.filter((product) =>
        product.title.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
      );
    }
    
    // Sorting (unless custom order is active)
    if (sortBy !== 'custom') {
      const [key, order] = sortBy.split("-");
      processedProducts.sort((a, b) => {
        const valA = key === "price" ? a.price : a.title.toLowerCase();
        const valB = key === "price" ? b.price : b.title.toLowerCase();
        if (valA < valB) return order === "asc" ? -1 : 1;
        if (valA > valB) return order === "asc" ? 1 : -1;
        return 0;
      });
    }

    return processedProducts;
  }, [displayProducts, debouncedSearchTerm, sortBy]);

  const paginatedProducts = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    return filteredAndSortedProducts.slice(startIndex, startIndex + ITEMS_PER_PAGE);
  }, [filteredAndSortedProducts, currentPage]);

  // Handlers
  const handleSuccess = () => mutate();
  
  const handleOpenCreateModal = () => {
    setEditingProduct(undefined);
    setIsFormModalOpen(true);
  };
  
  const handleOpenEditModal = (product: Product) => {
    setEditingProduct(product);
    setIsFormModalOpen(true);
  };
  
  const handleOpenPreviewModal = (product: Product) => {
    setPreviewProduct(product);
    setIsPreviewModalOpen(true);
  };

  const handleOpenDeleteAlert = (product: Product) => {
    setProductToDelete(product);
    setIsDeleteAlertOpen(true);
  };

  const handleDeleteProduct = async () => {
    if (!productToDelete || !products) return;
    const optimisticData = products.filter((p) => p.id !== productToDelete.id);
    mutate(optimisticData, { revalidate: false });
    try {
      await deleteProduct(productToDelete.id);
      toast.success(`Product "${productToDelete.title}" deleted.`);
    } catch {
      toast.error("Failed to delete product. Restoring data.");
      mutate(products, { revalidate: true });
    } finally {
      setIsDeleteAlertOpen(false);
      setProductToDelete(undefined);
    }
  };

  const handleInlineUpdate = async (productId: number, data: Partial<ProductSchema>) => {
    const originalProducts = [...displayProducts];
    const updatedProducts = displayProducts.map(p => p.id === productId ? { ...p, ...data } : p);
    setDisplayProducts(updatedProducts); // Optimistic update
    
    try {
      await updateProduct(productId, data);
      toast.success("Product updated successfully!");
      mutate(updatedProducts, { revalidate: false }); // Update SWR cache
    } catch (error) {
      toast.error("Failed to update product.");
      setDisplayProducts(originalProducts); // Revert on failure
    }
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      setDisplayProducts((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        return arrayMove(items, oldIndex, newIndex);
      });
      setSortBy('custom'); // Switch to custom sort
      setCurrentPage(1); // Reset to first page after reorder
    }
  };

  const renderContent = () => {
    if (isLoading) return <ProductTableSkeleton />;
    if (error) return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>Failed to load products. Please try again.</AlertDescription>
      </Alert>
    );
    if (paginatedProducts.length === 0 && debouncedSearchTerm) return (
      <div className="text-center py-10 border rounded-lg bg-card text-card-foreground">
        <h3 className="text-xl font-medium">No Products Found</h3>
        <p className="text-muted-foreground">Your search for "{debouncedSearchTerm}" did not match any products.</p>
      </div>
    );
    return (
      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
        <ProductTable
          products={paginatedProducts}
          onEdit={handleOpenEditModal}
          onDelete={handleOpenDeleteAlert}
          onPreview={handleOpenPreviewModal}
          onInlineUpdate={handleInlineUpdate}
        />
      </DndContext>
    );
  };

  return (
    <>
      <main className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col md:flex-row justify-between items-start gap-4 mb-6">
          <PageHeader title="SyncBoard" description="Modern product inventory management." />
          <div className="flex items-center gap-2 w-full md:w-auto">
            <ThemeToggle />
            <Button onClick={handleOpenCreateModal} className="w-full md:w-auto">
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Product
            </Button>
          </div>
        </div>

        <div className="flex flex-col md:flex-row items-center gap-4 mb-6">
          <div className="relative flex-1 w-full">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search by product title..."
              className="pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-full md:w-[220px]">
              <SelectValue placeholder="Sort by" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="custom" disabled={sortBy !== 'custom'}>Custom Order</SelectItem>
              <SelectItem value="title-asc">Title (A-Z)</SelectItem>
              <SelectItem value="title-desc">Title (Z-A)</SelectItem>
              <SelectItem value="price-asc">Price (Low to High)</SelectItem>
              <SelectItem value="price-desc">Price (High to Low)</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-6">
          {renderContent()}
          {filteredAndSortedProducts.length > ITEMS_PER_PAGE && (
            <Pagination
              currentPage={currentPage}
              totalPages={Math.ceil(filteredAndSortedProducts.length / ITEMS_PER_PAGE)}
              onPageChange={setCurrentPage}
            />
          )}
        </div>
      </main>

      <ProductFormModal isOpen={isFormModalOpen} onOpenChange={setIsFormModalOpen} product={editingProduct} onSuccess={handleSuccess} />
      <ProductPreviewModal isOpen={isPreviewModalOpen} onOpenChange={setIsPreviewModalOpen} product={previewProduct} />
      
      <AlertDialog open={isDeleteAlertOpen} onOpenChange={setIsDeleteAlertOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>This will permanently delete "{productToDelete?.title}".</AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteProduct} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
```

# === validators/product.schema.ts ===
```ts
import { z } from "zod";

export const productSchema = z.object({
  title: z.string().min(3, {
    message: "Title must be at least 3 characters long.",
  }),
  description: z.string().optional(),
  price: z.coerce.number().positive({
    message: "Price must be a positive number.",
  }),
});

export type ProductSchema = z.infer<typeof productSchema>;
```

# === hooks/use-debounce.ts ===
```ts
import { useState, useEffect } from "react";

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
```

# === types/product.types.ts ===
```ts
export interface Product {
  id: number;
  title: string;
  price: number;
  description: string;
  category: string;
  image: string;
  rating: {
    rate: number;
    count: number;
  };
  // Audit Trail
  createdAt?: string;
  updatedAt?: string;
  createdBy?: string;
  updatedBy?: string;
}
```

# === components/theme-provider.tsx ===
```tsx
"use client";

import * as React from "react";
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from "next-themes";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
```

# === components/shared/page-header.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
}

export function PageHeader({
  title,
  description,
  className,
  ...props
}: PageHeaderProps) {
  return (
    <div className={cn("space-y-2", className)} {...props}>
      <h1 className="text-3xl font-bold tracking-tight">{title}</h1>
      {description && <p className="text-muted-foreground">{description}</p>}
    </div>
  );
}
```

# === components/shared/theme-toggle.tsx ===
```tsx
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
```

# === components/features/product/product-form-modal.tsx ===
```tsx
"use client";

import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Product } from "@/types/product.types";
import { ProductSchema, productSchema } from "@/validators/product.schema";
import { createProduct, updateProduct } from "@/lib/api";

interface ProductFormModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  product?: Product;
  onSuccess: () => void;
}

const defaultValues: ProductSchema = {
  title: "",
  description: "",
  price: 0,
};

export function ProductFormModal({
  isOpen,
  onOpenChange,
  product,
  onSuccess,
}: ProductFormModalProps) {
  const isEditMode = !!product;

  const form = useForm({
    resolver: zodResolver(productSchema),
    defaultValues:
      isEditMode && product
        ? {
            title: product.title,
            description: product.description || "",
            price: product.price,
          }
        : defaultValues,
  });

  const {
    formState: { isSubmitting },
    reset,
  } = form;

  useEffect(() => {
    if (isOpen) {
      if (isEditMode && product) {
        reset({
          title: product.title,
          description: product.description || "",
          price: product.price,
        });
      } else {
        reset(defaultValues);
      }
    }
  }, [isOpen, product, isEditMode, reset]);

  const onSubmit = async (data: ProductSchema) => {
    try {
      if (isEditMode && product) {
        await updateProduct(product.id, data);
        toast.success("Product updated successfully!");
      } else {
        await createProduct(data);
        toast.success("Product created successfully!");
      }
      onSuccess();
      onOpenChange(false);
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : "An unknown error occurred."
      );
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>
            {isEditMode ? "Edit Product" : "Add New Product"}
          </DialogTitle>
          <DialogDescription>
            {isEditMode
              ? "Make changes to the product details."
              : "Fill in the details to create a new product."}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Title</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g. Classic T-Shirt" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Product description..."
                      {...field}
                      value={field.value || ""}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Price</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      step="0.01"
                      placeholder="19.99"
                      {...field}
                      value={field.value as number | string}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : isEditMode ? (
                  "Save Changes"
                ) : (
                  "Create Product"
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/product/product-table.tsx ===
```tsx
"use client";

import Image from "next/image";
import { useState, useRef, useEffect } from "react";
import { MoreHorizontal, Pencil, Trash2, GripVertical, Eye } from "lucide-react";
import { useSortable, SortableContext, verticalListSortingStrategy } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Product } from "@/types/product.types";
import { ProductSchema } from "@/validators/product.schema";
import { cn } from "@/lib/utils";

const formatCurrency = (amount: number) => new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);

// Sortable Row Component
function SortableProductRow({ product, onEdit, onDelete, onPreview, onInlineUpdate }: { product: Product; onEdit: (p: Product) => void; onDelete: (p: Product) => void; onPreview: (p: Product) => void; onInlineUpdate: (id: number, data: Partial<ProductSchema>) => void; }) {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: product.id });
  const style = { transform: CSS.Transform.toString(transform), transition, zIndex: isDragging ? 10 : 'auto' };

  const [editingCell, setEditingCell] = useState<{ field: "title" | "price"; value: string } | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    inputRef.current?.focus();
    inputRef.current?.select();
  }, [editingCell]);

  const handleSave = () => {
    if (!editingCell) return;
    const { field, value } = editingCell;
  
    if (field === "title") {
      const trimmed = value.trim();
      if (trimmed === "" || trimmed === product.title) {
        setEditingCell(null);
        return;
      }
      onInlineUpdate(product.id, { title: trimmed });
      setEditingCell(null);
    }
  
    if (field === "price") {
      const parsed = parseFloat(value);
      if (isNaN(parsed) || parsed <= 0 || parsed === product.price) {
        setEditingCell(null);
        return;
      }
      onInlineUpdate(product.id, { price: parsed });
      setEditingCell(null);
    }
  };
  
  
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') handleSave();
    if (e.key === 'Escape') setEditingCell(null);
  };

  const renderEditableCell = (field: "title" | "price") => {
    const isEditing = editingCell?.field === field;
    const value = field === 'title' ? product.title : product.price;

    return (
      <div onClick={() => !editingCell && setEditingCell({ field, value: String(value) })} className="cursor-pointer">
        {isEditing ? (
          <Input
            ref={inputRef}
            type={field === 'price' ? 'number' : 'text'}
            value={editingCell.value}
            onChange={(e) => setEditingCell({ ...editingCell, value: e.target.value })}
            onBlur={handleSave}
            onKeyDown={handleKeyDown}
            className={cn("h-8", field === 'price' && 'text-right')}
          />
        ) : (
          <span className="flex items-center gap-2">
            {field === 'title' ? product.title : formatCurrency(product.price)}
            <Pencil className="h-3 w-3 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
          </span>
        )}
      </div>
    );
  };

  // Mobile Card View
  return (
    <div ref={setNodeRef} style={style} className="md:table-row relative block border-b md:border-b-0 last:border-b-0 group bg-card hover:bg-muted/50" >
      {/* Desktop Table Cells */}
      <TableCell className="hidden md:table-cell w-[50px] pl-2">
        <div {...attributes} {...listeners} className="cursor-grab py-4">
          <GripVertical className="h-5 w-5 text-muted-foreground" />
        </div>
      </TableCell>
      <TableCell className="hidden md:table-cell w-[80px]">
        <div className="relative h-12 w-12">
          <Image
            src={product.image}
            alt={product.title}
            fill
            sizes="48px"
            className="rounded-md object-cover"
          />
        </div>
      </TableCell>
      <TableCell className="hidden md:table-cell font-medium">{renderEditableCell('title')}</TableCell>
      <TableCell className="hidden md:table-cell"><Badge variant="secondary">{product.category}</Badge></TableCell>
      <TableCell className="hidden md:table-cell text-right w-[120px]">{renderEditableCell('price')}</TableCell>
      <TableCell className="hidden md:table-cell text-right w-[100px]">{product.rating.rate.toFixed(2)}</TableCell>
      <TableCell className="hidden md:table-cell w-[50px]">
         <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onSelect={() => onPreview(product)}><Eye className="mr-2 h-4 w-4" />Quick View</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onEdit(product)}><Pencil className="mr-2 h-4 w-4" />Edit</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onDelete(product)} className="text-destructive focus:text-destructive focus:bg-destructive/10"><Trash2 className="mr-2 h-4 w-4" />Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
      </TableCell>

      {/* Mobile Card Layout */}
      <div className="md:hidden p-4 space-y-3">
        <div className="flex items-start justify-between gap-4">
          <div className="flex items-start gap-4">
            <div className="relative h-16 w-16 flex-shrink-0">
                <Image
                    src={product.image}
                    alt={product.title}
                    fill
                    sizes="64px"
                    className="rounded-lg object-cover"
                />
            </div>
            <div>
              <div className="font-bold text-base mb-1">{renderEditableCell('title')}</div>
              <Badge variant="outline">{product.category}</Badge>
            </div>
          </div>
          <div {...attributes} {...listeners} className="cursor-grab p-2">
            <GripVertical className="h-5 w-5 text-muted-foreground" />
          </div>
        </div>
        <div className="flex justify-between items-center text-sm">
          <div className="font-medium text-lg">{renderEditableCell('price')}</div>
          <div className="text-muted-foreground">Rating: {product.rating.rate.toFixed(2)}</div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild><Button variant="ghost" size="icon"><MoreHorizontal className="h-5 w-5" /></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onSelect={() => onPreview(product)}><Eye className="mr-2 h-4 w-4" />Quick View</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onEdit(product)}><Pencil className="mr-2 h-4 w-4" />Edit</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onDelete(product)} className="text-destructive focus:text-destructive focus:bg-destructive/10"><Trash2 className="mr-2 h-4 w-4" />Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>
  );
}

// Main Table Component
export function ProductTable({ products, ...props }: { products: Product[]; onEdit: (p: Product) => void; onDelete: (p: Product) => void; onPreview: (p: Product) => void; onInlineUpdate: (id: number, data: Partial<ProductSchema>) => void; }) {
  return (
    <div className="rounded-lg border">
      <Table className="hidden md:table">
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]"><span className="sr-only">Drag Handle</span></TableHead>
            <TableHead className="w-[80px]">Image</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Category</TableHead>
            <TableHead className="text-right w-[120px]">Price</TableHead>
            <TableHead className="text-right w-[100px]">Rating</TableHead>
            <TableHead className="w-[50px]"><span className="sr-only">Actions</span></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <SortableContext items={products.map(p => p.id)} strategy={verticalListSortingStrategy}>
            {products.length > 0 ? (
              products.map((product) => <SortableProductRow key={product.id} product={product} {...props} />)
            ) : (
              <TableRow><TableCell colSpan={7} className="h-24 text-center">No products to display.</TableCell></TableRow>
            )}
          </SortableContext>
        </TableBody>
      </Table>
      <div className="md:hidden grid grid-cols-1 divide-y">
        <SortableContext items={products.map(p => p.id)} strategy={verticalListSortingStrategy}>
            {products.length > 0 ? (
              products.map((product) => <SortableProductRow key={product.id} product={product} {...props} />)
            ) : (
              <div className="p-10 text-center">No products to display.</div>
            )}
        </SortableContext>
      </div>
    </div>
  );
}
```

# === components/features/product/product-preview-modal.tsx ===
```tsx
"use client";

import Image from "next/image";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Product } from "@/types/product.types";

interface ProductPreviewModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  product?: Product;
}

const formatCurrency = (amount: number) => new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
const formatDate = (dateString?: string) => dateString ? new Date(dateString).toLocaleString() : 'N/A';

export function ProductPreviewModal({ isOpen, onOpenChange, product }: ProductPreviewModalProps) {
  if (!product) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Product Details</DialogTitle>
        </DialogHeader>
        <div className="mt-4 space-y-6">
          <div className="flex flex-col sm:flex-row gap-6">
            <div className="flex-shrink-0">
              <div className="relative h-[150px] w-[150px]">
                <Image
                  src={product.image}
                  alt={product.title}
                  fill
                  sizes="150px"
                  className="rounded-lg object-cover"
                />
              </div>
            </div>
            <div className="flex-1 space-y-2">
              <h3 className="text-2xl font-bold">{product.title}</h3>
              <div className="flex items-center gap-2">
                <Badge variant="secondary">{product.category}</Badge>
                <span className="text-sm text-muted-foreground">
                  Rating: {product.rating.rate.toFixed(1)} ({product.rating.count} reviews)
                </span>
              </div>
              <p className="text-3xl font-light">{formatCurrency(product.price)}</p>
            </div>
          </div>
          
          <div>
            <h4 className="font-semibold text-lg mb-2">Description</h4>
            <p className="text-muted-foreground">{product.description}</p>
          </div>

          <div>
            <h4 className="font-semibold text-lg mb-2">Audit Information</h4>
            <div className="text-sm text-muted-foreground grid grid-cols-2 gap-2">
              <span>Created By:</span><span className="font-medium text-foreground">{product.createdBy}</span>
              <span>Created At:</span><span className="font-medium text-foreground">{formatDate(product.createdAt)}</span>
              <span>Updated By:</span><span className="font-medium text-foreground">{product.updatedBy || 'N/A'}</span>
              <span>Updated At:</span><span className="font-medium text-foreground">{formatDate(product.updatedAt)}</span>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/product/product-table-skeleton.tsx ===
```tsx
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

export function ProductTableSkeleton() {
  const skeletonRows = Array.from({ length: 10 });

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[80px]">Image</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Category</TableHead>
            <TableHead className="text-right w-[100px]">Price</TableHead>
            <TableHead className="text-right w-[100px]">Rating</TableHead>
            <TableHead className="w-[50px]">
              <span className="sr-only">Actions</span>
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {skeletonRows.map((_, index) => (
            <TableRow key={index}>
              <TableCell>
                <Skeleton className="h-12 w-12 rounded-md" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-48" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-24" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-16 ml-auto" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-4 w-16 ml-auto" />
              </TableCell>
              <TableCell>
                <Skeleton className="h-8 w-8" />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

# === src/components/features/product/product-table.tsx ===
```tsx
"use client";

import Image from "next/image";
import { useState, useRef, useEffect } from "react";
import { MoreHorizontal, Pencil, Trash2, GripVertical, Eye } from "lucide-react";
import { useSortable, SortableContext, verticalListSortingStrategy } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Product } from "@/types/product.types";
import { ProductSchema } from "@/validators/product.schema";
import { cn } from "@/lib/utils";

const formatCurrency = (amount: number) => new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);

// Sortable Row Component
function SortableProductRow({ product, onEdit, onDelete, onPreview, onInlineUpdate }: { product: Product; onEdit: (p: Product) => void; onDelete: (p: Product) => void; onPreview: (p: Product) => void; onInlineUpdate: (id: number, data: Partial<ProductSchema>) => void; }) {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: product.id });
  const style = { transform: CSS.Transform.toString(transform), transition, zIndex: isDragging ? 10 : 'auto' };

  const [editingCell, setEditingCell] = useState<{ field: "title" | "price"; value: string } | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    inputRef.current?.focus();
    inputRef.current?.select();
  }, [editingCell]);

  const handleSave = () => {
    if (!editingCell) return;
    const { field, value } = editingCell;

    if (field === 'title') {
      const newTitle = value.trim();
      if (newTitle === '' || newTitle === product.title) {
        setEditingCell(null);
        return;
      }
      onInlineUpdate(product.id, { title: newTitle });
    } else if (field === 'price') {
      const newPrice = parseFloat(value);
      if (isNaN(newPrice) || newPrice <= 0 || newPrice === product.price) {
        setEditingCell(null);
        return;
      }
      onInlineUpdate(product.id, { price: newPrice });
    }
    
    setEditingCell(null);
  };
  
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') handleSave();
    if (e.key === 'Escape') setEditingCell(null);
  };

  const renderEditableCell = (field: "title" | "price") => {
    const isEditing = editingCell?.field === field;
    const value = field === 'title' ? product.title : product.price;

    return (
      <div onClick={() => !editingCell && setEditingCell({ field, value: String(value) })} className="cursor-pointer">
        {isEditing ? (
          <Input
            ref={inputRef}
            type={field === 'price' ? 'number' : 'text'}
            value={editingCell.value}
            onChange={(e) => setEditingCell({ ...editingCell, value: e.target.value })}
            onBlur={handleSave}
            onKeyDown={handleKeyDown}
            className={cn("h-8", field === 'price' && 'text-right')}
          />
        ) : (
          <span className="flex items-center gap-2">
            {field === 'title' ? product.title : formatCurrency(product.price)}
            <Pencil className="h-3 w-3 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
          </span>
        )}
      </div>
    );
  };

  // Mobile Card View
  return (
    <div ref={setNodeRef} style={style} className="md:table-row relative block border-b md:border-b-0 last:border-b-0 group bg-card hover:bg-muted/50" >
      {/* Desktop Table Cells */}
      <TableCell className="hidden md:table-cell w-[50px] pl-2">
        <div {...attributes} {...listeners} className="cursor-grab py-4">
          <GripVertical className="h-5 w-5 text-muted-foreground" />
        </div>
      </TableCell>
      <TableCell className="hidden md:table-cell w-[80px]">
        <div className="relative h-12 w-12">
          <Image
            src={product.image}
            alt={product.title}
            fill
            sizes="48px"
            className="rounded-md object-cover"
          />
        </div>
      </TableCell>
      <TableCell className="hidden md:table-cell font-medium">{renderEditableCell('title')}</TableCell>
      <TableCell className="hidden md:table-cell"><Badge variant="secondary">{product.category}</Badge></TableCell>
      <TableCell className="hidden md:table-cell text-right w-[120px]">{renderEditableCell('price')}</TableCell>
      <TableCell className="hidden md:table-cell text-right w-[100px]">{product.rating.rate.toFixed(2)}</TableCell>
      <TableCell className="hidden md:table-cell w-[50px]">
         <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onSelect={() => onPreview(product)}><Eye className="mr-2 h-4 w-4" />Quick View</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onEdit(product)}><Pencil className="mr-2 h-4 w-4" />Edit</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onDelete(product)} className="text-destructive focus:text-destructive focus:bg-destructive/10"><Trash2 className="mr-2 h-4 w-4" />Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
      </TableCell>

      {/* Mobile Card Layout */}
      <div className="md:hidden p-4 space-y-3">
        <div className="flex items-start justify-between gap-4">
          <div className="flex items-start gap-4">
            <div className="relative h-16 w-16 flex-shrink-0">
                <Image
                    src={product.image}
                    alt={product.title}
                    fill
                    sizes="64px"
                    className="rounded-lg object-cover"
                />
            </div>
            <div>
              <div className="font-bold text-base mb-1">{renderEditableCell('title')}</div>
              <Badge variant="outline">{product.category}</Badge>
            </div>
          </div>
          <div {...attributes} {...listeners} className="cursor-grab p-2">
            <GripVertical className="h-5 w-5 text-muted-foreground" />
          </div>
        </div>
        <div className="flex justify-between items-center text-sm">
          <div className="font-medium text-lg">{renderEditableCell('price')}</div>
          <div className="text-muted-foreground">Rating: {product.rating.rate.toFixed(2)}</div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild><Button variant="ghost" size="icon"><MoreHorizontal className="h-5 w-5" /></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onSelect={() => onPreview(product)}><Eye className="mr-2 h-4 w-4" />Quick View</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onEdit(product)}><Pencil className="mr-2 h-4 w-4" />Edit</DropdownMenuItem>
              <DropdownMenuItem onSelect={() => onDelete(product)} className="text-destructive focus:text-destructive focus:bg-destructive/10"><Trash2 className="mr-2 h-4 w-4" />Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>
  );
}

// Main Table Component
export function ProductTable({ products, ...props }: { products: Product[]; onEdit: (p: Product) => void; onDelete: (p: Product) => void; onPreview: (p: Product) => void; onInlineUpdate: (id: number, data: Partial<ProductSchema>) => void; }) {
  return (
    <div className="rounded-lg border">
      <Table className="hidden md:table">
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]"><span className="sr-only">Drag Handle</span></TableHead>
            <TableHead className="w-[80px]">Image</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Category</TableHead>
            <TableHead className="text-right w-[120px]">Price</TableHead>
            <TableHead className="text-right w-[100px]">Rating</TableHead>
            <TableHead className="w-[50px]"><span className="sr-only">Actions</span></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <SortableContext items={products.map(p => p.id)} strategy={verticalListSortingStrategy}>
            {products.length > 0 ? (
              products.map((product) => <SortableProductRow key={product.id} product={product} {...props} />)
            ) : (
              <TableRow><TableCell colSpan={7} className="h-24 text-center">No products to display.</TableCell></TableRow>
            )}
          </SortableContext>
        </TableBody>
      </Table>
      <div className="md:hidden grid grid-cols-1 divide-y">
        <SortableContext items={products.map(p => p.id)} strategy={verticalListSortingStrategy}>
            {products.length > 0 ? (
              products.map((product) => <SortableProductRow key={product.id} product={product} {...props} />)
            ) : (
              <div className="p-10 text-center">No products to display.</div>
            )}
        </SortableContext>
      </div>
    </div>
  );
}
```
