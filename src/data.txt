# Extracted Code (.ts, .tsx, .css)
# Date and Time: 2025-08-01 04:06:24
# Files Included: 25

# === lib/mock-data.ts ===
```ts
export type StudentAttendance = {
  month: string;
  attendance: number;
};

export type GradeDistribution = {
  grade: string;
  count: number;
};

export type SubjectScore = {
  name: string;
  averageScore: number;
};

export type Teacher = {
  id: number;
  name: string;
};

export const periodStats = {
  this_term: {
    passRate: "85.3%",
    passRateChange: "-1.2%",
    isPassRateNegative: true,
    avgAttendance: "91%",
    changeLabel: "This Term",
  },
  last_term: {
    passRate: "86.5%",
    passRateChange: "+0.5%",
    isPassRateNegative: false,
    avgAttendance: "89%",
    changeLabel: "Last Term",
  },
  full_year: {
    passRate: "85.9%",
    passRateChange: "+2.1%",
    isPassRateNegative: false,
    avgAttendance: "90%",
    changeLabel: "Full Year",
  },
};

export const gradeDistributionData: Record<string, GradeDistribution[]> = {
  this_term: [
    { grade: "A", count: 23 }, { grade: "B", count: 40 }, { grade: "C", count: 25 }, { grade: "D", count: 8 }, { grade: "F", count: 4 },
  ],
  last_term: [
    { grade: "A", count: 25 }, { grade: "B", count: 45 }, { grade: "C", count: 20 }, { grade: "D", count: 7 }, { grade: "F", count: 3 },
  ],
  full_year: [
    { grade: "A", count: 24 }, { grade: "B", count: 42 }, { grade: "C", count: 22 }, { grade: "D", count: 8 }, { grade: "F", count: 4 },
  ],
};

export const subjectScoreData: Record<string, SubjectScore[]> = {
  this_term: [
    { name: "computer-science", averageScore: 95.1 },
    { name: "physics", averageScore: 90.2 },
    { name: "history", averageScore: 84.0 },
    { name: "english", averageScore: 88.8 },
    { name: "mathematics", averageScore: 89.5 },
    { name: "biology", averageScore: 85.5 },
    { name: "chemistry", averageScore: 87.9 },
    { name: "art-history", averageScore: 91.3 },
    { name: "philosophy", averageScore: 92.0 },
    { name: "economics", averageScore: 86.4 },
    { name: "political-science", averageScore: 89.1 },
    { name: "music-theory", averageScore: 93.7 },
  ],
  last_term: [
    { name: "computer-science", averageScore: 93.5 },
    { name: "physics", averageScore: 92.1 },
    { name: "history", averageScore: 86.0 },
    { name: "english", averageScore: 90.2 },
    { name: "mathematics", averageScore: 87.5 },
    { name: "biology", averageScore: 84.0 },
    { name: "chemistry", averageScore: 88.2 },
    { name: "art-history", averageScore: 89.9 },
    { name: "philosophy", averageScore: 93.1 },
    { name: "economics", averageScore: 85.0 },
    { name: "political-science", averageScore: 88.0 },
    { name: "music-theory", averageScore: 91.5 },
  ],
  full_year: [
    { name: "computer-science", averageScore: 94.1 },
    { name: "physics", averageScore: 91.2 },
    { name: "history", averageScore: 85.0 },
    { name: "english", averageScore: 89.8 },
    { name: "mathematics", averageScore: 88.5 },
    { name: "biology", averageScore: 84.8 },
    { name: "chemistry", averageScore: 88.0 },
    { name: "art-history", averageScore: 90.5 },
    { name: "philosophy", averageScore: 92.5 },
    { name: "economics", averageScore: 85.7 },
    { name: "political-science", averageScore: 88.5 },
    { name: "music-theory", averageScore: 92.6 },
  ]
};

export const attendanceData: StudentAttendance[] = [
  { month: "Jan", attendance: 95 },
  { month: "Feb", attendance: 92 },
  { month: "Mar", attendance: 93 },
  { month: "Apr", attendance: 88 },
  { month: "May", attendance: 90 },
  { month: "Jun", attendance: 85 },
  { month: "Jul", attendance: 89 },
  { month: "Aug", attendance: 91 },
  { month: "Sep", attendance: 94 },
  { month: "Oct", attendance: 96 },
  { month: "Nov", attendance: 93 },
  { month: "Dec", attendance: 87 },
];

export const allSubjects: string[] = [
  "mathematics",
  "physics",
  "history",
  "english",
  "computer-science",
  "biology",
  "chemistry",
  "art-history",
  "philosophy",
  "economics",
  "political-science",
  "music-theory",
];

export const mockTeachers: Teacher[] = [
  { id: 1, name: "Dr. Evelyn Reed" },
  { id: 2, name: "Mr. Samuel Carter" },
  { id: 3, name: "Ms. Eleanor Vance" },
  { id: 4, name: "Prof. Arthur Chen" },
  { id: 5, name: "Dr. Isabella Rossi" },
  { id: 6, name: "Mr. Benjamin Grant" },
  { id: 7, name: "Ms. Olivia Hayes" },
  { id: 8, name: "Prof. Liam Goldberg" },
];

export const subjectTeacherMapping: Record<string, number[]> = {
  "mathematics": [1, 6],
  "physics": [4, 1],
  "history": [3, 7],
  "english": [2, 5],
  "computer-science": [4, 8],
  "biology": [5, 1],
  "chemistry": [5, 4],
  "art-history": [3],
  "philosophy": [7],
  "economics": [2, 6],
  "political-science": [7, 8],
  "music-theory": [3, 2],
};
```

# === lib/utils.ts ===
```ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const formatCurrency = (amount: number) =>
  new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount);
```

# === lib/api.ts ===
```ts
import { User, UsersApiResponse } from "@/types/api.types";
import { Course } from "@/types/course.types";
import { CourseSchema } from "@/validators/course.schema";
import { allSubjects } from "./mock-data";

const DUMMY_JSON_URL = "https://dummyjson.com";

export async function getUsers(url: string): Promise<UsersApiResponse> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch users");
    }
    const data: UsersApiResponse = await res.json();
    return data;
  } catch {
    throw new Error("Could not retrieve users. Please try again later.");
  }
}

export async function updateUser(userId: number, userData: Partial<User>): Promise<User> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users/${userId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(userData),
    });
    if (!res.ok) throw new Error("Failed to update user");
    return await res.json();
  } catch {
    throw new Error("Could not update the user.");
  }
}


export async function getTotalStudents(): Promise<number> {
  return 100;
}

export async function getTotalTeachers(): Promise<number> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users?limit=0`);
    if (!res.ok) {
      return 50;
    }
    const data: UsersApiResponse = await res.json();
    return data.total > 100 ? data.total - 100 : 0;
  } catch (e) {
    console.error("Failed to get total teachers:", e);
    return 50;
  }
}

export async function getSubjects(): Promise<string[]> {
  return Promise.resolve(allSubjects);
}


export async function getTotalCourses(): Promise<number> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products?limit=0`);
    if (!res.ok) {
      return 194;
    }
    const data = await res.json();
    return data.total;
  } catch (e) {
    console.error("Failed to get total courses:", e);
    return 194;
  }
}

export async function getCourses(url: string): Promise<Course[]> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch courses");
    }
    const data = await res.json();
    return data.products.map((course: Course) => ({
      ...course,
      createdAt: new Date(Date.now() - Math.random() * 1e10).toISOString(),
      createdBy: "Admin",
    }));
  } catch {
    throw new Error("Could not retrieve courses. Please try again later.");
  }
}

export async function createCourse(courseData: CourseSchema): Promise<Course> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products/add`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(courseData),
    });
    if (!res.ok) throw new Error("Failed to create course");
    const newCourse: Course = await res.json();
    return { ...newCourse, createdAt: new Date().toISOString(), createdBy: "System" };
  } catch {
    throw new Error("Could not create the course.");
  }
}

export async function updateCourse(courseId: number, courseData: Partial<CourseSchema>): Promise<Course> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products/${courseId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(courseData),
    });
    if (!res.ok) throw new Error("Failed to update course");
    const updatedCourse: Course = await res.json();
    return { ...updatedCourse, ...courseData, updatedAt: new Date().toISOString(), updatedBy: "System" };
  } catch {
    throw new Error("Could not update the course.");
  }
}

export async function deleteCourse(courseId: number): Promise<Course> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/products/${courseId}`, {
      method: "DELETE",
    });
    if (!res.ok) throw new Error("Failed to delete course");
    return await res.json();
  } catch {
    throw new Error("Could not delete the course.");
  }
}
```

# === app/globals.css ===
```css
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.75rem;
  --background: oklch(0.99 0.005 240);
  --foreground: oklch(0.1 0.03 250);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.1 0.03 250);
  --popover: oklch(1 0 0 / 0.8);
  --popover-foreground: oklch(0.1 0.03 250);
  --primary: oklch(0.60 0.18 265);
  --primary-foreground: oklch(0.99 0.005 240);
  --secondary: oklch(0.92 0.03 260);
  --secondary-foreground: oklch(0.1 0.03 250);
  --muted: oklch(0.95 0.02 260);
  --muted-foreground: oklch(0.45 0.04 255);
  --accent: oklch(0.95 0.02 260);
  --accent-foreground: oklch(0.09 0.08 265);
  --destructive: oklch(0.65 0.22 20);
  --border: oklch(0.1 0.03 250 / 0.15);
  --input: oklch(0.1 0.03 250 / 0.05);
  --ring: oklch(0.60 0.18 265);
  --chart-1: oklch(0.7 0.15 290);
  --chart-2: oklch(0.75 0.18 200);
  --chart-3: oklch(0.65 0.2 260);
  --chart-4: oklch(0.8 0.18 150);
  --chart-5: oklch(0.8 0.2 80);
}

.dark {
  --background: oklch(0.08 0.02 250);
  --foreground: oklch(0.95 0.01 240);
  --card: oklch(0.12 0.03 260);
  --card-foreground: oklch(0.95 0.01 240);
  --popover: oklch(0.05 0.02 250 / 0.8);
  --popover-foreground: oklch(0.95 0.01 240);
  --primary: oklch(0.7 0.2 275);
  --primary-foreground: oklch(0.98 0.01 275);
  --secondary: oklch(0.2 0.05 270);
  --secondary-foreground: oklch(0.95 0.01 240);
  --muted: oklch(0.2 0.05 270 / 0.5);
  --muted-foreground: oklch(0.65 0.05 260);
  --accent: oklch(0.2 0.05 270);
  --accent-foreground: oklch(0.95 0.01 240);
  --destructive: oklch(0.7 0.2 25);
  --border: oklch(1 1 1 / 0.15);
  --input: oklch(1 1 1 / 0.08);
  --ring: oklch(0.75 0.22 280);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply text-foreground antialiased;
    background-color: oklch(var(--background));
    background: linear-gradient(300deg, hsl(var(--primary)/.15), hsl(var(--chart-2)/.15), hsl(var(--chart-4)/.15));
    background-size: 400% 400%;
    animation: gradient-animation 25s ease infinite;
  }
}

@keyframes gradient-animation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}


@layer utilities {
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-br from-primary to-secondary;
  }
  .button-gradient {
    @apply bg-gradient-to-br from-primary to-primary/70 text-primary-foreground transition-all duration-300 shadow-lg shadow-primary/20 hover:from-primary/90 hover:to-primary/60 hover:shadow-xl hover:shadow-primary/30;
  }
  .glass-card {
    @apply bg-card/80 dark:bg-card/70 backdrop-blur-lg border shadow-lg shadow-black/10 dark:shadow-black/20;
  }
}
```

# === app/layout.tsx ===
```tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Student Management Dashboard",
  description: "A dashboard for managing students and their performance.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}
```

# === app/(dashboard)/layout.tsx ===
```tsx
import { StudentDashboardSidebar } from "@/components/dashboard/student-sidebar";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="min-h-screen w-full bg-gradient-to-br from-blue-500 to-indigo-600 p-4 sm:p-6 lg:p-8">
      <div className="mx-auto w-full max-w-7xl rounded-2xl bg-card p-6 shadow-xl lg:p-8 flex flex-col lg:flex-row gap-8">
        <StudentDashboardSidebar />
        <div className="flex-1 flex flex-col gap-8">
          {children}
        </div>
      </div>
    </main>
  );
}
```

# === app/(dashboard)/page.tsx ===
```tsx
"use client";

import { useState } from "react";
import useSWR from "swr";
import Link from "next/link";
import { PageHeader } from "@/components/shared/page-header";
import { StatCard } from "@/components/dashboard/stat-card";
import { AttendanceChart } from "@/components/dashboard/attendance-chart";
import { StudentPerformanceSummary } from "@/components/dashboard/student-performance-summary";
import { getTotalStudents, getTotalTeachers } from "@/lib/api";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { attendanceData, periodStats } from "@/lib/mock-data";
import { Skeleton } from "@/components/ui/skeleton";

type Period = "this_term" | "last_term" | "full_year";

export default function DashboardPage() {
  const [period, setPeriod] = useState<Period>("this_term");

  const { data: totalStudents, isLoading: studentsLoading } = useSWR('totalStudents', getTotalStudents);
  const { data: totalTeachers, isLoading: teachersLoading } = useSWR('totalTeachers', getTotalTeachers);

  const currentStats = periodStats[period];

  const getAttendanceDataForPeriod = () => {
    switch (period) {
      case "this_term":
        return attendanceData.slice(8, 12); // Last 4 months
      case "last_term":
        return attendanceData.slice(4, 8); // Mid 4 months
      case "full_year":
      default:
        return attendanceData;
    }
  };
  const currentAttendanceData = getAttendanceDataForPeriod();

  return (
    <>
      <PageHeader title="Student Dashboard">
        <Select value={period} onValueChange={(value) => setPeriod(value as Period)}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter period" />
          </SelectTrigger>
          <SelectContent>
             <SelectItem value="this_term">This Term</SelectItem>
            <SelectItem value="last_term">Last Term</SelectItem>
            <SelectItem value="full_year">Full Year</SelectItem>
          </SelectContent>
        </Select>
        
      </PageHeader>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
         {studentsLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <Link href="/students"><StatCard title="Total Students" value={totalStudents?.toString() ?? '0'} change="+5%" className="bg-[--color-chart-1]/20 border border-[--color-chart-1]/50 hover:border-[--color-chart-1] transition-colors" /></Link>}
         {teachersLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <Link href="/teachers"><StatCard title="Total Teachers" value={totalTeachers?.toString() ?? '0'} change="+2" className="bg-[--color-chart-2]/20 border border-[--color-chart-2]/50 hover:border-[--color-chart-2] transition-colors" /></Link>}
         <StatCard title="Pass Rate" value={currentStats.passRate} change={currentStats.passRateChange} isNegative={currentStats.isPassRateNegative} className="bg-[--color-chart-3]/20 border border-[--color-chart-3]/50" />
         <StatCard title="Avg. Attendance" value={currentStats.avgAttendance} change={currentStats.changeLabel} className="bg-[--color-chart-4]/20 border border-[--color-chart-4]/50" />
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
        <div className="xl:col-span-3">
          <AttendanceChart data={currentAttendanceData} />
        </div>
        <div className="xl:col-span-2">
          <StudentPerformanceSummary period={period} />
        </div>
      </div>
    </>
  );
}
```

# === app/(dashboard)/students/page.tsx ===
```tsx
"use client";

import useSWR, { useSWRConfig } from "swr";
import { PageHeader } from "@/components/shared/page-header";
import { CustomerTable } from "@/components/features/customer/customer-table";
import { CustomerTableSkeleton } from "@/components/features/customer/customer-table-skeleton";
import { getUsers, updateUser } from "@/lib/api";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle } from "lucide-react";
import { Pagination } from "@/components/ui/pagination";
import { useState } from "react";
import { toast } from "sonner";
import { User, UsersApiResponse } from "@/types/api.types";
import { UserPreviewModal } from "@/components/features/customer/user-preview-modal";

const ITEMS_PER_PAGE = 10;
const STUDENT_COUNT = 100;

// This would be in lib/api.ts in a real app
const deleteUser = async (id: number) => {
  // Mocking deletion as dummyjson doesn't support it on all records
  return Promise.resolve({ id, isDeleted: true });
}

export default function StudentsPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedUser, setSelectedUser] = useState<User | undefined>(undefined);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  
  const swrKey = `https://dummyjson.com/users?limit=${ITEMS_PER_PAGE}&skip=${(currentPage - 1) * ITEMS_PER_PAGE}`;
  const { data, error, isLoading, mutate } = useSWR(swrKey, getUsers);
  const { mutate: globalMutate } = useSWRConfig();

  const handleUserUpdate = async (id: number, userData: Partial<User>) => {
    await mutate(async (currentData?: UsersApiResponse) => {
      if (!currentData) return currentData;
      const updatedUsers = currentData.users.map(u => u.id === id ? { ...u, ...userData } : u);
      return { ...currentData, users: updatedUsers };
    }, { revalidate: false });

    try {
      await updateUser(id, userData);
      toast.success("Student updated successfully!");
    } catch {
      toast.error("Failed to update student.");
    } finally {
        globalMutate(swrKey);
    }
  };

  const handleViewUser = (user: User) => {
    setSelectedUser(user);
    setIsViewModalOpen(true);
  };

  const handleDeleteUser = async (userId: number) => {
    await mutate(async (currentData?: UsersApiResponse) => {
        if (!currentData) return currentData;
        return { ...currentData, users: currentData.users.filter(u => u.id !== userId) };
    }, { revalidate: false });

    try {
        await deleteUser(userId);
        toast.success("Student deleted successfully.");
    } catch {
        toast.error("Failed to delete student.");
        globalMutate(swrKey);
    }
  };

  const renderContent = () => {
    if (isLoading) return <CustomerTableSkeleton type="student" />;
    if (error) return (
      <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load students. Please try again.</AlertDescription>
      </Alert>
    );
    if (!data?.users.length) return <p>No students found.</p>;
    
    return <CustomerTable 
      customers={data.users} 
      type="student" 
      startIndex={(currentPage - 1) * ITEMS_PER_PAGE}
      onUserUpdate={handleUserUpdate}
      onViewUser={handleViewUser}
      onDeleteUser={handleDeleteUser}
    />
  };

  return (
    <>
      <PageHeader
        title="Student Management"
        description="View and manage student profiles."
      />
      {renderContent()}
      {data && STUDENT_COUNT > ITEMS_PER_PAGE && (
        <Pagination
            currentPage={currentPage}
            totalPages={Math.ceil(STUDENT_COUNT / ITEMS_PER_PAGE)}
            onPageChange={setCurrentPage}
        />
      )}
      <UserPreviewModal
        isOpen={isViewModalOpen}
        onOpenChange={setIsViewModalOpen}
        user={selectedUser}
      />
    </>
  );
}
```

# === app/(dashboard)/teachers/page.tsx ===
```tsx
"use client";

import useSWR, { useSWRConfig } from "swr";
import { PageHeader } from "@/components/shared/page-header";
import { CustomerTable } from "@/components/features/customer/customer-table";
import { CustomerTableSkeleton } from "@/components/features/customer/customer-table-skeleton";
import { getUsers, updateUser } from "@/lib/api";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle } from "lucide-react";
import { Pagination } from "@/components/ui/pagination";
import { useState } from "react";
import { toast } from "sonner";
import { User, UsersApiResponse } from "@/types/api.types";
import { UserPreviewModal } from "@/components/features/customer/user-preview-modal";

const ITEMS_PER_PAGE = 10;

// This would be in lib/api.ts in a real app
const deleteUser = async (id: number) => {
  // Mocking deletion as dummyjson doesn't support it on all records
  return Promise.resolve({ id, isDeleted: true });
}

export default function TeachersPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedUser, setSelectedUser] = useState<User | undefined>(undefined);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  
  const swrKey = `https://dummyjson.com/users?limit=${ITEMS_PER_PAGE}&skip=${100 + (currentPage - 1) * ITEMS_PER_PAGE}`;
  const { data, error, isLoading, mutate } = useSWR(swrKey, getUsers);
  const { mutate: globalMutate } = useSWRConfig();

  const handleUserUpdate = async (id: number, userData: Partial<User>) => {
    await mutate(async (currentData?: UsersApiResponse) => {
      if (!currentData) return currentData;
      const updatedUsers = currentData.users.map(u => u.id === id ? { ...u, ...userData } : u);
      return { ...currentData, users: updatedUsers };
    }, { revalidate: false });

    try {
      await updateUser(id, userData);
      toast.success("Teacher updated successfully!");
    } catch {
      toast.error("Failed to update teacher.");
    } finally {
        globalMutate(swrKey);
    }
  };

  const handleViewUser = (user: User) => {
    setSelectedUser(user);
    setIsViewModalOpen(true);
  };

  const handleDeleteUser = async (userId: number) => {
     await mutate(async (currentData?: UsersApiResponse) => {
        if (!currentData) return currentData;
        return { ...currentData, users: currentData.users.filter(u => u.id !== userId) };
    }, { revalidate: false });

    try {
        await deleteUser(userId);
        toast.success("Teacher deleted successfully.");
    } catch {
        toast.error("Failed to delete teacher.");
        globalMutate(swrKey);
    }
  };

  const renderContent = () => {
    if (isLoading) return <CustomerTableSkeleton type="teacher" />;
    if (error) return (
      <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load teachers. Please try again.</AlertDescription>
      </Alert>
    );
    if (!data?.users.length) return <p>No teachers found.</p>;
    
    return <CustomerTable 
      customers={data.users} 
      type="teacher"
      startIndex={100 + (currentPage - 1) * ITEMS_PER_PAGE}
      onUserUpdate={handleUserUpdate}
      onViewUser={handleViewUser}
      onDeleteUser={handleDeleteUser}
    />
  };

  return (
    <div className="flex flex-col gap-8">
      <PageHeader
        title="Teacher Management"
        description="View and manage teacher profiles."
      />
      {renderContent()}
      {data && data.total > 100 && (
        <Pagination
            currentPage={currentPage}
            totalPages={Math.ceil((data.total - 100) / ITEMS_PER_PAGE)}
            onPageChange={setCurrentPage}
        />
      )}
       <UserPreviewModal
        isOpen={isViewModalOpen}
        onOpenChange={setIsViewModalOpen}
        user={selectedUser}
      />
    </div>
  );
}
```

# === app/(dashboard)/subjects/page.tsx ===
```tsx
"use client";

import { useState } from "react";
import useSWR from "swr";
import { AlertTriangle, Pencil, Trash2 } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { getSubjects } from "@/lib/api";
import { PageHeader } from "@/components/shared/page-header";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { mockTeachers, subjectTeacherMapping, subjectScoreData, Teacher } from "@/lib/mock-data";
import { Button } from "@/components/ui/button";
import { ManageInstructorsModal } from "@/components/features/subject/manage-instructors-modal";
import { toast } from "sonner";
import { User } from "@/types/api.types";
import { UserPreviewModal } from "@/components/features/customer/user-preview-modal";

type Period = "this_term" | "last_term" | "full_year";

const TeacherAvatar = ({ teacherName }: { teacherName: string }) => {
  const initials = teacherName.split(' ').map((n) => n[0]).slice(0, 2).join('');
  return (
    <div className="h-8 w-8 rounded-full bg-muted flex-shrink-0 flex items-center justify-center">
      <span className="text-xs font-semibold text-muted-foreground">{initials}</span>
    </div>
  );
};

export default function SubjectsPage() {
  const [period, setPeriod] = useState<Period>("this_term");
  const { data: subjects, error, isLoading, mutate } = useSWR("subjects", getSubjects);
  const { data: allUsers } = useSWR<User[]>(`https://dummyjson.com/users?limit=200`, async (url: string) => (await fetch(url)).json().then(res => res.users));

  const [modalState, setModalState] = useState<{
    manageInstructors: boolean;
    viewTeacher: boolean;
    subject: string | null;
    teacher: User | null;
  }>({ manageInstructors: false, viewTeacher: false, subject: null, teacher: null });

  const handleDeleteSubject = (subjectToDelete: string) => {
    mutate(subjects?.filter(s => s !== subjectToDelete), false);
    toast.success(`Subject "${subjectToDelete.replace(/-/g, ' ')}" deleted.`);
  };

  const handleManageInstructors = (subject: string) => {
    setModalState({ ...modalState, manageInstructors: true, subject });
  };
  
  const handleViewTeacher = (teacherId: number) => {
    const teacherUser = allUsers?.find(u => u.id === teacherId);
    if(teacherUser) {
        setModalState({ ...modalState, viewTeacher: true, teacher: teacherUser });
    } else {
        toast.warning("Could not find full details for this teacher.");
    }
  };

  const handleSaveInstructors = (subject: string, newTeacherIds: number[]) => {
    subjectTeacherMapping[subject] = newTeacherIds;
    mutate(subjects);
    toast.success(`Instructors for "${subject.replace(/-/g, ' ')}" updated.`);
  };

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 9 }).map((_, i) => <Skeleton key={i} className="h-48 rounded-lg" />)}
        </div>
      );
    }
    if (error) {
      return (
        <Alert variant="destructive" className="glass-card">
          <AlertTriangle className="h-4 w-4" /> <AlertTitle>Error</AlertTitle>
          <AlertDescription>Failed to load subjects. Please try again.</AlertDescription>
        </Alert>
      );
    }
    if (!subjects || subjects.length === 0) {
      return (
        <div className="text-center py-10 glass-card rounded-lg">
          <h3 className="text-xl font-medium">No Subjects Found</h3>
          <p className="text-muted-foreground">Could not find any subjects in the catalog.</p>
        </div>
      );
    }
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {subjects.map((subject) => {
          const meanGradeData = subjectScoreData[period].find(s => s.name === subject);
          const teacherIds = subjectTeacherMapping[subject] || [];
          const teachers = teacherIds.map(id => mockTeachers.find(t => t.id === id)).filter(Boolean) as Teacher[];

          return (
            <Card key={subject} className="glass-card flex flex-col">
              <CardHeader className="flex-row items-center justify-between">
                <CardTitle className="capitalize">{subject.replace(/-/g, ' ')}</CardTitle>
                <Button variant="ghost" size="icon" onClick={() => handleDeleteSubject(subject)}>
                  <Trash2 className="h-4 w-4 text-destructive" />
                </Button>
              </CardHeader>
              <CardContent className="flex flex-col flex-grow justify-between gap-4">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Mean Grade ({period.replace(/_/g, ' ')})</p>
                  <p className="text-3xl font-bold text-primary">{meanGradeData?.averageScore.toFixed(1)}%</p>
                </div>
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <p className="text-sm font-medium text-muted-foreground">Instructors</p>
                    <Button variant="outline" size="sm" onClick={() => handleManageInstructors(subject)}>
                        <Pencil className="h-3 w-3 mr-1.5" /> Manage
                    </Button>
                  </div>
                  <div className="flex flex-col gap-2">
                    {teachers.length > 0 ? (
                      teachers.map(teacher => (
                        <div key={teacher.id} className="flex items-center gap-3 cursor-pointer hover:bg-muted/50 p-1 rounded-md" onClick={() => handleViewTeacher(teacher.id)}>
                          <TeacherAvatar teacherName={teacher.name} />
                          <span className="font-medium text-sm">{teacher.name}</span>
                        </div>
                      ))
                    ) : (
                      <p className="text-sm text-muted-foreground">No instructors assigned.</p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    );
  };

  return (
    <div className="flex flex-col gap-6">
      <PageHeader title="Subjects Overview" description="View details for each subject offered.">
        <Select value={period} onValueChange={(value) => setPeriod(value as Period)}>
          <SelectTrigger className="w-[180px]"><SelectValue placeholder="Filter period" /></SelectTrigger>
          <SelectContent>
            <SelectItem value="this_term">This Term</SelectItem>
            <SelectItem value="last_term">Last Term</SelectItem>
            <SelectItem value="full_year">Full Year</SelectItem>
          </SelectContent>
        </Select>
      </PageHeader>
      {renderContent()}
      
      {modalState.manageInstructors && modalState.subject && (
        <ManageInstructorsModal
          isOpen={modalState.manageInstructors}
          onOpenChange={(isOpen) => setModalState({ ...modalState, manageInstructors: isOpen })}
          subjectName={modalState.subject}
          allTeachers={mockTeachers}
          assignedTeacherIds={subjectTeacherMapping[modalState.subject] || []}
          onSave={(newIds) => handleSaveInstructors(modalState.subject!, newIds)}
        />
      )}

      <UserPreviewModal 
        isOpen={modalState.viewTeacher}
        onOpenChange={(isOpen) => setModalState({ ...modalState, viewTeacher: isOpen, teacher: null })}
        user={modalState.teacher!}
      />
    </div>
  );
}
```

# === validators/course.schema.ts ===
```ts
import { z } from "zod";

export const courseSchema = z.object({
  title: z.string().min(3, {
    message: "Title must be at least 3 characters long.",
  }),
  description: z.string().optional(),
  price: z
    .union([z.string(), z.number()])
    .transform((val) => (typeof val === "string" ? parseFloat(val) || 0 : val))
    .refine((val) => val > 0, {
      message: "Price must be a positive number.",
    }),
});

export type CourseSchema = z.infer<typeof courseSchema>;
```

# === hooks/use-sidebar.ts ===
```ts
import { create } from "zustand";

interface SidebarState {
  isOpen: boolean;
  toggle: () => void;
  setOpen: (isOpen: boolean) => void;
}

// Set initial state based on window width for better UX on larger screens
const getInitialState = () => {
    if (typeof window !== 'undefined') {
        return window.innerWidth > 1024; // lg breakpoint
    }
    return true;
};

export const useSidebar = create<SidebarState>((set) => ({
  isOpen: getInitialState(),
  toggle: () => set((state) => ({ isOpen: !state.isOpen })),
  setOpen: (isOpen) => set({ isOpen }),
}));
```

# === hooks/use-debounce.ts ===
```ts
import { useState, useEffect } from "react";

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
```

# === types/course.types.ts ===
```ts
export interface Course {
  id: number;
  title: string;
  description?: string; // FIXED: Made optional to match schema
  price: number;
  category: string;
  thumbnail: string;
  stock: number; // Represents available slots
  rating: number;
  // Audit Trail
  createdAt?: string;
  updatedAt?: string;
  createdBy?: string;
  updatedBy?: string;
}
```

# === types/api.types.ts ===
```ts
export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

export interface ProductsApiResponse {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}


export interface User {
    id: number;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    image: string;
    address: {
        address: string;
        city: string;
        postalCode: string;
        state: string;
    }
}

export interface UsersApiResponse {
    users: User[];
    total: number;
    skip: number;
    limit: number;
}
```

# === components/theme-provider.tsx ===
```tsx
"use client";

import * as React from "react";
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from "next-themes";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
```

# === components/shared/page-header.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export function PageHeader({
  title,
  description,
  className,
  children,
  ...props
}: PageHeaderProps) {
  return (
    <div className={cn("flex flex-col md:flex-row items-start md:items-center justify-between gap-4", className)} {...props}>
      <div className="space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">
          <span className="text-gradient">{title}</span>
        </h1>
        {description && <p className="text-muted-foreground">{description}</p>}
      </div>
      {children && <div className="flex items-center gap-4 w-full md:w-auto justify-end">{children}</div>}
    </div>
  );
}
```

# === components/dashboard/stat-card.tsx ===
```tsx
import { cn } from "@/lib/utils";

interface StatCardProps {
  title: string;
  value: string;
  change: string;
  isNegative?: boolean;
  className?: string;
}

export function StatCard({ title, value, change, isNegative = false, className }: StatCardProps) {
  return (
    <div className={cn("rounded-lg p-4", "bg-muted/50", className)}>
      <p className="text-sm text-muted-foreground">{title}</p>
      <p className="text-2xl font-bold text-foreground my-1">{value}</p>
      <p
        className={cn(
          "text-xs font-semibold",
          isNegative ? "text-red-500" : "text-green-500"
        )}
      >
        {change}
      </p>
    </div>
  );
}
```

# === components/dashboard/attendance-chart.tsx ===
```tsx
"use client";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Area,
} from "recharts";
import { StudentAttendance } from "@/lib/mock-data";

export function AttendanceChart({ data }: { data: StudentAttendance[] }) {
  return (
    <div className="rounded-lg border bg-white p-4 h-full flex flex-col">
      <h3 className="font-semibold text-lg mb-2">Monthly Attendance Trends</h3>
      <div className="flex-grow">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={data}
            margin={{ top: 5, right: 10, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorAttendance" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.3} />
                <stop offset="100%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>

            <XAxis
              dataKey="month"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: "white",
                border: "1px solid #e2e8f0",
                borderRadius: "0.5rem",
              }}
              formatter={(value: number) => [`${value}%`, "Attendance"]}
            />
            <Area
              type="monotone"
              dataKey="attendance"
              stroke="none"
              fill="url(#colorAttendance)"
            />
            <Line
              type="monotone"
              dataKey="attendance"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={{ r: 4 }}
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
```

# === components/dashboard/student-sidebar.tsx ===
```tsx
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { LayoutDashboard, Users, UserSquare, BookOpen } from "lucide-react";
import { cn } from "@/lib/utils";

const navItems = [
  { href: "/", icon: LayoutDashboard, label: "Dashboard" },
  { href: "/students", icon: Users, label: "Students" },
  { href: "/teachers", icon: UserSquare, label: "Teachers" },
  { href: "/subjects", icon: BookOpen, label: "Subjects" },
];

export function StudentDashboardSidebar() {
  const pathname = usePathname();

  return (
    <aside className="hidden lg:flex flex-col w-56 flex-shrink-0">
      <div className="flex items-center gap-2 mb-8">
        <div className="p-2 bg-primary rounded-lg">
          <BookOpen className="h-6 w-6 text-primary-foreground" />
        </div>
        <span className="text-xl font-bold">EduDash</span>
      </div>
      <nav className="flex flex-col gap-2 flex-grow">
        {navItems.map((item) => {
          const isActive = (item.href === "/" && pathname === "/") || (item.href !== "/" && pathname.startsWith(item.href));
          return (
          <Link
            key={item.label}
            href={item.href}
            className={cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-muted-foreground transition-all hover:bg-muted hover:text-foreground",
              isActive && "bg-muted font-semibold text-foreground"
            )}
          >
            <item.icon className="h-5 w-5" />
            {item.label}
          </Link>
        )})}
      </nav>
     
    </aside>
  );
}
```

# === components/dashboard/student-performance-summary.tsx ===
```tsx
"use client"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Cell,
  Rectangle,
  type RectangleProps,
} from "recharts";
import {
  GradeDistribution,
  SubjectScore,
  gradeDistributionData,
  subjectScoreData
} from "@/lib/mock-data";
import { ValueType } from "recharts/types/component/DefaultTooltipContent";

const GRADE_COLORS = ['#2dd4bf', '#3b82f6', '#fbbd23', '#f87171', '#ef4444'];

interface CustomTooltipProps {
  active?: boolean;
  payload?: { value: ValueType }[];
  label?: string;
}

const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {
  if (active && payload && payload.length) {
    return (
      <div className="p-2 text-sm rounded-md border bg-popover text-popover-foreground shadow-md glass-card">
        <p className="font-bold">{`Grade ${label}`}</p>
        <p>{`Number of Students: ${payload[0].value}`}</p>
      </div>
    );
  }
  return null;
};

const ActiveBar = (props: RectangleProps) => {
  const { x = 0, y = 0, width = 0, height = 0, ...rest } = props;
  
  return <Rectangle {...rest} x={x} width={width} height={height + 5} y={y - 5} />;
};


const GradeDistributionChart = ({ data }: { data: GradeDistribution[] }) => (
  <div className="h-56">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data} margin={{ top: 10, right: 10, left: -15, bottom: 5 }}>
        <XAxis dataKey="grade" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} allowDecimals={false}/>
        <Tooltip
          cursor={false}
          content={<CustomTooltip />}
        />
        <Bar dataKey="count" radius={[6, 6, 0, 0]} activeBar={<ActiveBar />}>
          {data.map((_entry, index) => (
            <Cell key={`cell-${index}`} fill={GRADE_COLORS[index % GRADE_COLORS.length]} />
          ))}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const TopSubjectsList = ({ data }: { data: SubjectScore[] }) => (
  <Table>
    <TableHeader>
      <TableRow>
        <TableHead>Subject</TableHead>
        <TableHead className="text-right">Avg. Score</TableHead>
      </TableRow>
    </TableHeader>
    <TableBody>
      {data.sort((a, b) => b.averageScore - a.averageScore).slice(0, 5).map((subject) => (
        <TableRow key={subject.name} className="hover:bg-muted/50 text-sm">
          <TableCell className="font-medium capitalize">{subject.name.replace(/-/g, ' ')}</TableCell>
          <TableCell className="text-right">
            <Badge variant="secondary" className={
                subject.averageScore >= 90 ? "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300" :
                subject.averageScore >= 80 ? "bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-300" :
                "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300"
            }>
                {subject.averageScore.toFixed(1)}%
            </Badge>
          </TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

type Period = "this_term" | "last_term" | "full_year";

export function StudentPerformanceSummary({ period }: { period: Period }) {
  const currentGradeData = gradeDistributionData[period];
  const currentTopSubjectsData = subjectScoreData[period];


  return (
    <div className="rounded-lg border bg-card p-4 h-full flex flex-col gap-4">
      <div>
        <h3 className="font-semibold text-lg mb-2">Grade Distribution</h3>
        <GradeDistributionChart data={currentGradeData} />
      </div>
      <div className="border-t pt-2">
        <h3 className="font-semibold text-lg mb-2">Top Subjects</h3>
        <div className="overflow-auto">
          <TopSubjectsList data={currentTopSubjectsData} />
        </div>
      </div>
    </div>
  );
}
```

# === components/features/customer/customer-table-skeleton.tsx ===
```tsx
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

interface CustomerTableSkeletonProps {
  type: 'student' | 'teacher';
}

export function CustomerTableSkeleton({ type }: CustomerTableSkeletonProps) {
  const skeletonRows = Array.from({ length: 10 });

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]">ID</TableHead>
            <TableHead>Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Parent Phone</TableHead>
            {type === 'student' && <TableHead>This Term&apos;s Grade</TableHead>}
            {type === 'teacher' && <TableHead>Subject</TableHead>}
            {type === 'teacher' && <TableHead>Mean Grade</TableHead>}
          </TableRow>
        </TableHeader>
        <TableBody>
          {skeletonRows.map((_, index) => (
            <TableRow key={index}>
              <TableCell><Skeleton className="h-4 w-8" /></TableCell>
              <TableCell><Skeleton className="h-4 w-32" /></TableCell>
              <TableCell><Skeleton className="h-4 w-48" /></TableCell>
              <TableCell><Skeleton className="h-4 w-40" /></TableCell>
              <TableCell><Skeleton className="h-4 w-24" /></TableCell>
              {type === 'teacher' && <TableCell><Skeleton className="h-4 w-24" /></TableCell>}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

# === components/features/customer/user-preview-modal.tsx ===
```tsx
"use client";

import Image from "next/image";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { User } from "@/types/api.types";
import { Skeleton } from "@/components/ui/skeleton";
import { AtSign, MapPin, Phone } from "lucide-react";

interface UserPreviewModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  user?: User;
}

export function UserPreviewModal({ isOpen, onOpenChange, user }: UserPreviewModalProps) {
  const renderContent = () => {
    if (!user) {
      return (
        <div className="space-y-6">
          <div className="flex flex-col sm:flex-row gap-6 items-center">
            <Skeleton className="h-[120px] w-[120px] rounded-full" />
            <div className="flex-1 space-y-3">
              <Skeleton className="h-8 w-48" />
              <Skeleton className="h-5 w-64" />
              <Skeleton className="h-5 w-32" />
            </div>
          </div>
          <div className="space-y-2">
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-3/4" />
          </div>
        </div>
      );
    }

    return (
      <div className="mt-4 space-y-6">
        <div className="flex flex-col sm:flex-row gap-6 items-center">
          <div className="relative h-[120px] w-[120px] flex-shrink-0">
            <Image
              src={user.image}
              alt={`${user.firstName} ${user.lastName}`}
              fill
              sizes="120px"
              className="rounded-full object-cover border-4 border-primary/20"
            />
          </div>
          <div className="flex-1 space-y-1 text-center sm:text-left">
            <h3 className="text-2xl font-bold text-gradient">{`${user.firstName} ${user.lastName}`}</h3>
            <div className="flex items-center gap-2 text-muted-foreground justify-center sm:justify-start">
              <AtSign className="h-4 w-4" />
              <span>{user.email}</span>
            </div>
            <div className="flex items-center gap-2 text-muted-foreground justify-center sm:justify-start">
              <Phone className="h-4 w-4" />
              <span>{user.phone}</span>
            </div>
          </div>
        </div>
        
        <div>
          <h4 className="font-semibold text-lg mb-2">Address</h4>
          <div className="flex items-start gap-3 text-muted-foreground">
            <MapPin className="h-5 w-5 mt-1 flex-shrink-0 text-primary" />
            <p>{`${user.address.address}, ${user.address.city}, ${user.address.state} ${user.address.postalCode}`}</p>
          </div>
        </div>
      </div>
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>User Details</DialogTitle>
        </DialogHeader>
        {renderContent()}
      </DialogContent>
    </Dialog>
  );
}
```

# === components/features/customer/customer-table.tsx ===
```tsx
"use client";

import { useState, useRef, useEffect } from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { User } from "@/types/api.types";
import { Input } from "@/components/ui/input";
import { Pencil, Eye, Trash2, MoreHorizontal } from "lucide-react";
import { useDebounce } from "@/hooks/use-debounce";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { toast } from "sonner";

const SUBJECTS = ['mathematics', 'physics', 'history', 'english', 'computer-science', 'biology', 'chemistry'];
const GRADES = ['A', 'B', 'C', 'B', 'A', 'C', 'D', 'B', 'F'];

interface EditableCellProps {
  value: string;
  onSave: (newValue: string) => void;
  isEditable?: boolean;
}

const EditableCell = ({ value, onSave, isEditable = true }: EditableCellProps) => {
  const [isEditing, setIsEditing] = useState(false);
  const [currentValue, setCurrentValue] = useState(value);
  const inputRef = useRef<HTMLInputElement>(null);
  const debouncedValue = useDebounce(currentValue, 500);

  useEffect(() => {
    if (isEditing && debouncedValue !== value && debouncedValue.trim() !== '') {
      onSave(debouncedValue);
    }
  }, [debouncedValue, isEditing, value, onSave]);

  useEffect(() => {
    if (isEditing) {
      inputRef.current?.focus();
      inputRef.current?.select();
    }
  }, [isEditing]);

  const handleSave = () => {
    setIsEditing(false);
    if (currentValue.trim() !== '' && currentValue !== value) {
      onSave(currentValue);
    } else {
      setCurrentValue(value);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') handleSave();
    if (e.key === 'Escape') {
      setCurrentValue(value);
      setIsEditing(false);
    }
  };

  if (!isEditable) {
    return <span>{value}</span>;
  }

  return (
    <div onClick={() => !isEditing && setIsEditing(true)} className="cursor-pointer group">
      {isEditing ? (
        <Input
          ref={inputRef}
          value={currentValue}
          onChange={(e) => setCurrentValue(e.target.value)}
          onBlur={handleSave}
          onKeyDown={handleKeyDown}
          className="h-8 bg-transparent"
        />
      ) : (
        <span className="flex items-center gap-2">
          {value}
          <Pencil className="h-3 w-3 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
        </span>
      )}
    </div>
  );
};


interface CustomerTableProps {
  customers: User[];
  type: 'student' | 'teacher';
  startIndex: number;
  onUserUpdate: (id: number, data: Partial<User>) => void;
  onViewUser: (user: User) => void;
  onDeleteUser: (userId: number) => void;
}

export function CustomerTable({ customers, type, startIndex, onUserUpdate, onViewUser, onDeleteUser }: CustomerTableProps) {
  
  const getDerivedData = (user: User, field: string) => {
    switch(field) {
        case 'grade': return GRADES[user.id % GRADES.length];
        case 'subject': return SUBJECTS[user.id % SUBJECTS.length].replace(/-/g, ' ');
        case 'meanGrade': return `${(user.id % 35) + 60}.0%`;
        default: return '';
    }
  }

  const handleDerivedDataSave = () => {
      toast.info("This field is derived and cannot be edited directly.", {
          description: "Changes to this field are for demonstration only."
      })
  }

  return (
    <div className="rounded-lg border bg-card backdrop-blur-xl overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">ID</TableHead>
              <TableHead>Name</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              {type === 'student' && <TableHead>Grade</TableHead>}
              {type === 'teacher' && <TableHead>Subject</TableHead>}
              {type === 'teacher' && <TableHead>Mean Grade</TableHead>}
              <TableHead className="w-[50px] text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {customers.map((user, index) => (
              <TableRow key={user.id} className="hover:bg-muted/50">
                <TableCell className="text-muted-foreground">{startIndex + index + 1}</TableCell>
                <TableCell className="font-medium">
                  <EditableCell 
                    value={`${user.firstName} ${user.lastName}`} 
                    onSave={(newValue) => {
                        const [firstName, ...lastName] = newValue.split(' ');
                        onUserUpdate(user.id, { firstName, lastName: lastName.join(' ') });
                    }}
                  />
                </TableCell>
                <TableCell>
                   <EditableCell value={user.email} onSave={(newValue) => onUserUpdate(user.id, { email: newValue })} />
                </TableCell>
                <TableCell>
                  <EditableCell value={user.phone} onSave={(newValue) => onUserUpdate(user.id, { phone: newValue })} />
                </TableCell>
                 {type === 'student' && <TableCell><EditableCell value={getDerivedData(user, 'grade')} onSave={handleDerivedDataSave} /></TableCell>}
                 {type === 'teacher' && <TableCell className="capitalize"><EditableCell value={getDerivedData(user, 'subject')} onSave={handleDerivedDataSave} /></TableCell>}
                 {type === 'teacher' && <TableCell><EditableCell value={getDerivedData(user, 'meanGrade')} onSave={handleDerivedDataSave} /></TableCell>}
                 <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <span className="sr-only">Open menu</span>
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => onViewUser(user)}>
                          <Eye className="mr-2 h-4 w-4" /> View
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => onDeleteUser(user.id)} className="text-destructive focus:text-destructive">
                          <Trash2 className="mr-2 h-4 w-4" /> Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                 </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
    </div>
  );
}
```

# === components/features/subject/manage-instructors-modal.tsx ===
```tsx
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Teacher } from "@/lib/mock-data";
import { ScrollArea } from "@/components/ui/scroll-area";

interface ManageInstructorsModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  subjectName: string;
  allTeachers: Teacher[];
  assignedTeacherIds: number[];
  onSave: (newTeacherIds: number[]) => void;
}

export function ManageInstructorsModal({
  isOpen,
  onOpenChange,
  subjectName,
  allTeachers,
  assignedTeacherIds,
  onSave,
}: ManageInstructorsModalProps) {
  const [selectedIds, setSelectedIds] = useState<Set<number>>(new Set(assignedTeacherIds));

  const handleToggle = (teacherId: number) => {
    setSelectedIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(teacherId)) {
        newSet.delete(teacherId);
      } else {
        newSet.add(teacherId);
      }
      return newSet;
    });
  };

  const handleSaveChanges = () => {
    onSave(Array.from(selectedIds));
    onOpenChange(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Manage Instructors</DialogTitle>
          <DialogDescription>
            Assign or un-assign instructors for <span className="font-bold capitalize">{subjectName.replace(/-/g, ' ')}</span>.
          </DialogDescription>
        </DialogHeader>
        <ScrollArea className="max-h-80 pr-4">
          <div className="space-y-4 py-2">
            {allTeachers.map(teacher => (
              <div key={teacher.id} className="flex items-center space-x-3">
                <Checkbox
                  id={`teacher-${teacher.id}`}
                  checked={selectedIds.has(teacher.id)}
                  onCheckedChange={() => handleToggle(teacher.id)}
                />
                <Label htmlFor={`teacher-${teacher.id}`} className="font-medium">
                  {teacher.name}
                </Label>
              </div>
            ))}
          </div>
        </ScrollArea>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
          <Button onClick={handleSaveChanges} className="button-gradient">Save Changes</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
```
