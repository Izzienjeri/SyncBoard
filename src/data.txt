Excellent. Let's begin building the foundation for **SyncBoard**.

This first phase is all about creating a robust and scalable architecture. We won't see much on the screen by the end, but we will have a clean, organized, and professional project structure ready for feature development.

I will walk you through the setup, file creation, and provide a Git commit message for each logical step, as if I were building this in a real development environment.

---

### **Step 1: Project Initialization & Dependency Setup**

First, we'll create the Next.js application and install our core dependencies. We'll use the Next.js App Router, TypeScript, and Tailwind CSS templates. We will then initialize `shadcn/ui`.

**ðŸ’» Terminal Commands:**

```bash
# 1. Create the Next.js project
npx create-next-app@latest syncboard --typescript --tailwind --eslint --app --src-dir N --import-alias "@/*"

# 2. Navigate into the project directory
cd syncboard

# 3. Initialize shadcn/ui
npx shadcn-ui@latest init
# You will be prompted with a few questions. Choose the following:
# Would you like to use TypeScript (recommended)? â€º yes
# Which style would you like to use? â€º Default
# Which color would you like to use as base color? â€º Slate
# Where is your global CSS file? â€º app/globals.css
# Do you want to use CSS variables for colors? â€º yes
# Where is your tailwind.config.ts located? â€º tailwind.config.ts
# Configure the import alias for components: â€º @/components
# Configure the import alias for utils: â€º @/lib/utils
# Are you using React Server Components? â€º yes
# Write configuration to components.json. Proceed? â€º yes

# 4. Install other essential packages
npm install lucide-react sonner
```

---

#### **Commit 1: Initial Setup**

This first commit captures the project's boilerplate and core tooling configuration.

```bash
git init
git add .
git commit -m "feat: Initialize project with Next.js, Tailwind, and shadcn/ui

- Scaffolds a new Next.js 14 application using the App Router.
- Configures TypeScript, ESLint, and Tailwind CSS.
- Initializes shadcn/ui for the component library foundation.
- Installs lucide-react for icons and sonner for toast notifications."
```

---

### **Step 2: Establishing a Clean Folder Structure**

A well-organized project is a maintainable project. We'll create our planned directories now, even if they're empty. We use `.gitkeep` files to ensure Git tracks these empty directories.

**ðŸ’» Terminal Commands:**

```bash
mkdir -p components/features/product components/shared hooks types validators
touch components/features/product/.gitkeep
touch components/shared/.gitkeep
touch hooks/.gitkeep
touch types/.gitkeep
touch validators/.gitkeep
```

Your project structure should now look something like this:

```
syncboard/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ globals.css
â”‚   â”œâ”€â”€ layout.tsx
â”‚   â””â”€â”€ page.tsx
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ features/
â”‚   â”‚   â””â”€â”€ product/
â”‚   â”‚       â””â”€â”€ .gitkeep
â”‚   â”œâ”€â”€ shared/
â”‚   â”‚   â””â”€â”€ .gitkeep
â”‚   â””â”€â”€ ui/
â”‚       # (shadcn will add components here later)
â”œâ”€â”€ hooks/
â”‚   â””â”€â”€ .gitkeep
â”œâ”€â”€ lib/
â”‚   â””â”€â”€ utils.ts
â”œâ”€â”€ types/
â”‚   â””â”€â”€ .gitkeep
â”œâ”€â”€ validators/
â”‚   â””â”€â”€ .gitkeep
â”œâ”€â”€ public/
â”œâ”€â”€ package.json
â””â”€â”€ tsconfig.json
```

---

#### **Commit 2: Folder Structure**

This commit establishes our architectural blueprint.

```bash
git add .
git commit -m "chore: Establish application folder structure

Creates a scalable directory structure to separate concerns:
- components/features: For feature-specific, complex components.
- components/shared: For generic, reusable components across features.
- hooks: For custom React hooks.
- types: For TypeScript type and interface definitions.
- validators: For Zod validation schemas."
```

---

### **Step 3: Defining Core Types**

Type safety is non-negotiable. Our first type will be for the `Product` we'll be fetching from DummyJSON. This ensures that from the API layer to the component props, our data shape is consistent and predictable.

**ðŸ“„ Create file `types/product.types.ts`:**

```typescript
// types/product.types.ts

// Based on the structure from DummyJSON API
export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

// We can also define the shape for creating/updating a product.
// Often, you don't need to provide an `id` or other read-only fields.
export type ProductFormData = Omit<Product, 'id' | 'rating'>;

```

---

#### **Commit 3: Core Type Definition**

```bash
git add .
git commit -m "feat: Define core Product type definitions

- Creates the main `Product` interface based on the DummyJSON API response.
- Adds a `ProductFormData` type for use in our create/edit forms,
  demonstrating a separation between read-only data and mutable data."
```

---

### **Step 4: Configuring the Root Layout & Providers**

The root layout is the shell for our entire application. We'll set up global styles, fonts, and crucial providers for theming (dark/light mode) and notifications (toasts).

**ðŸ”„ Update file `app/layout.tsx`:**

```typescript
// app/layout.tsx

import type { Metadata } from "next";
import { Inter as FontSans } from "next/font/google";
import { ThemeProvider } from "@/components/theme-provider";
import { Toaster } from "@/components/ui/sonner";
import { cn } from "@/lib/utils";
import "./globals.css";

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata: Metadata = {
  title: "SyncBoard",
  description: "A modern dashboard for managing products.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          fontSans.variable
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
          <Toaster position="top-center" richColors />
        </ThemeProvider>
      </body>
    </html>
  );
}
```

**ðŸ“„ Create file `components/theme-provider.tsx` (as per `next-themes` docs):**

```typescript
// components/theme-provider.tsx

"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
```

---

#### **Commit 4: Root Layout**

```bash
git add .
git commit -m "feat: Configure root layout with theme and toast providers

- Implements `next-themes` for system-aware dark/light mode toggling.
- Integrates `sonner` for clean, centered toast notifications.
- Sets up the Inter font and base body styles for a consistent look
  and feel across the application."
```

---

### **Step 5: Creating the Initial Page Shell**

Finally, let's create a minimal shell for our main dashboard page. This gives us a visible starting point. We'll also create our first shared component, a `PageHeader`, to promote reusability from the very beginning.

**ðŸ“„ Create file `components/shared/page-header.tsx`:**

```typescript
// components/shared/page-header.tsx

import { cn } from "@/lib/utils";

interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title: string;
  description?: string;
}

export function PageHeader({ title, description, className, ...props }: PageHeaderProps) {
  return (
    <div className={cn("space-y-2", className)} {...props}>
      <h1 className="text-3xl font-bold tracking-tight">{title}</h1>
      {description && <p className="text-muted-foreground">{description}</p>}
    </div>
  );
}
```

**ðŸ”„ Update file `app/page.tsx`:**

```typescript
// app/page.tsx

import { PageHeader } from "@/components/shared/page-header";

export default function DashboardPage() {
  return (
    <main className="container py-8">
      <PageHeader
        title="Products"
        description="Manage your product inventory."
      />
      {/* Product table and actions will go here in the next phase */}
    </main>
  );
}
```

---

#### **Commit 5: Initial Page**

```bash
git add .
git commit -m "feat: Create initial dashboard page layout

- Builds the main entry point for the dashboard at `/`.
- Creates a reusable `PageHeader` component to ensure consistent
  page titles and styling throughout the app.
- Establishes the main container and padding for page content."
```

---

### **Phase 1 Complete**

We have now successfully laid the groundwork for SyncBoard.

**What we have achieved:**

*   âœ… A clean, logical, and scalable folder structure.
*   âœ… A fully configured environment with Next.js, TypeScript, and Tailwind CSS.
*   âœ… A component library (`shadcn/ui`) ready to be used.
*   âœ… Foundational providers for theming and notifications.
*   âœ… Strong type safety established with our first `Product` type.
*   âœ… A clear and documented Git history of our setup process.

The application is now primed for Phase 2, where we will fetch data from the API, display it in a table, and start building the core UI components.