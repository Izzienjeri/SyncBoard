Of course. Here is the complete, updated code for the affected files.

### `lib/mock-data.ts`

This file now includes structured data for different time periods, including statistics, grade distributions, and subject scores.

```ts
export type StudentAttendance = {
  month: string;
  attendance: number;
};

export type GradeDistribution = {
  grade: string;
  count: number;
};

export type SubjectScore = {
  name: string;
  averageScore: number;
};

export const periodStats = {
  this_term: {
    passRate: "85.3%",
    passRateChange: "-1.2%",
    isPassRateNegative: true,
    avgAttendance: "91%",
    changeLabel: "This Term",
  },
  last_term: {
    passRate: "86.5%",
    passRateChange: "+0.5%",
    isPassRateNegative: false,
    avgAttendance: "89%",
    changeLabel: "Last Term",
  },
  full_year: {
    passRate: "85.9%",
    passRateChange: "+2.1%",
    isPassRateNegative: false,
    avgAttendance: "90%",
    changeLabel: "Full Year",
  },
};

export const gradeDistributionData: Record<string, GradeDistribution[]> = {
  this_term: [
    { grade: "A", count: 23 }, { grade: "B", count: 40 }, { grade: "C", count: 25 }, { grade: "D", count: 8 }, { grade: "F", count: 4 },
  ],
  last_term: [
    { grade: "A", count: 25 }, { grade: "B", count: 45 }, { grade: "C", count: 20 }, { grade: "D", count: 7 }, { grade: "F", count: 3 },
  ],
  full_year: [
    { grade: "A", count: 24 }, { grade: "B", count: 42 }, { grade: "C", count: 22 }, { grade: "D", count: 8 }, { grade: "F", count: 4 },
  ],
};

export const subjectScoreData: Record<string, SubjectScore[]> = {
  this_term: [
    { name: "computer-science", averageScore: 95.1 },
    { name: "physics", averageScore: 90.2 },
    { name: "history", averageScore: 84.0 },
    { name: "english", averageScore: 88.8 },
    { name: "mathematics", averageScore: 89.5 },
  ],
  last_term: [
    { name: "computer-science", averageScore: 93.5 },
    { name: "physics", averageScore: 92.1 },
    { name: "history", averageScore: 86.0 },
    { name: "english", averageScore: 90.2 },
    { name: "mathematics", averageScore: 87.5 },
  ],
  full_year: [
    { name: "computer-science", averageScore: 94.1 },
    { name: "physics", averageScore: 91.2 },
    { name: "history", averageScore: 85.0 },
    { name: "english", averageScore: 89.8 },
    { name: "mathematics", averageScore: 88.5 },
  ]
};

export const attendanceData: StudentAttendance[] = [
  { month: "Jan", attendance: 95 },
  { month: "Feb", attendance: 92 },
  { month: "Mar", attendance: 93 },
  { month: "Apr", attendance: 88 },
  { month: "May", attendance: 90 },
  { month: "Jun", attendance: 85 },
  { month: "Jul", attendance: 89 },
  { month: "Aug", attendance: 91 },
  { month: "Sep", attendance: 94 },
  { month: "Oct", attendance: 96 },
  { month: "Nov", attendance: 93 },
  { month: "Dec", attendance: 87 },
];
```

### `app/(dashboard)/page.tsx`

The dashboard page is now a client component to manage the state of the dynamic filter, updating the displayed stats and charts accordingly.

```tsx
"use client";

import { useState } from "react";
import useSWR from "swr";
import { PageHeader } from "@/components/shared/page-header";
import { StatCard } from "@/components/dashboard/stat-card";
import { AttendanceChart } from "@/components/dashboard/attendance-chart";
import { StudentPerformanceSummary } from "@/components/dashboard/student-performance-summary";
import { getTotalStudents, getTotalTeachers } from "@/lib/api";
import { Bell } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { attendanceData, periodStats } from "@/lib/mock-data";
import { Skeleton } from "@/components/ui/skeleton";

type Period = "this_term" | "last_term" | "full_year";

export default function DashboardPage() {
  const [period, setPeriod] = useState<Period>("this_term");

  const { data: totalStudents, isLoading: studentsLoading } = useSWR('totalStudents', getTotalStudents);
  const { data: totalTeachers, isLoading: teachersLoading } = useSWR('totalTeachers', getTotalTeachers);

  const currentStats = periodStats[period];

  const getAttendanceDataForPeriod = () => {
    switch (period) {
      case "this_term":
        return attendanceData.slice(8, 12); // Last 4 months
      case "last_term":
        return attendanceData.slice(4, 8); // Mid 4 months
      case "full_year":
      default:
        return attendanceData;
    }
  };
  const currentAttendanceData = getAttendanceDataForPeriod();

  return (
    <>
      <PageHeader title="Student Dashboard">
        <Select value={period} onValueChange={(value) => setPeriod(value as Period)}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter period" />
          </SelectTrigger>
          <SelectContent>
             <SelectItem value="this_term">This Term</SelectItem>
            <SelectItem value="last_term">Last Term</SelectItem>
            <SelectItem value="full_year">Full Year</SelectItem>
          </SelectContent>
        </Select>
        <div className="relative">
          <Bell className="h-6 w-6 text-muted-foreground" />
          <span className="absolute -top-1 -right-1 flex h-3 w-3">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75"></span>
            <span className="relative inline-flex rounded-full h-3 w-3 bg-primary"></span>
          </span>
        </div>
      </PageHeader>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
         {studentsLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <StatCard title="Total Students" value={totalStudents?.toString() ?? '0'} change="+5%" className="bg-[--color-chart-1]/20 border border-[--color-chart-1]/50" />}
         {teachersLoading ? <Skeleton className="h-[108px] rounded-lg" /> : <StatCard title="Total Teachers" value={totalTeachers?.toString() ?? '0'} change="+2" className="bg-[--color-chart-2]/20 border border-[--color-chart-2]/50" />}
         <StatCard title="Pass Rate" value={currentStats.passRate} change={currentStats.passRateChange} isNegative={currentStats.isPassRateNegative} className="bg-[--color-chart-3]/20 border border-[--color-chart-3]/50" />
         <StatCard title="Avg. Attendance" value={currentStats.avgAttendance} change={currentStats.changeLabel} className="bg-[--color-chart-4]/20 border border-[--color-chart-4]/50" />
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
        <div className="xl:col-span-3">
          <AttendanceChart data={currentAttendanceData} />
        </div>
        <div className="xl:col-span-2">
          <StudentPerformanceSummary period={period} />
        </div>
      </div>
    </>
  );
}
```

### `components/dashboard/attendance-chart.tsx`

The attendance chart now receives its data via props, making it a more reusable and declarative component.

```tsx
"use client";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Area,
} from "recharts";
import { StudentAttendance } from "@/lib/mock-data";

export function AttendanceChart({ data }: { data: StudentAttendance[] }) {
  return (
    <div className="rounded-lg border bg-white p-4 h-full flex flex-col">
      <h3 className="font-semibold text-lg mb-2">Monthly Attendance Trends</h3>
      <div className="flex-grow">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={data}
            margin={{ top: 5, right: 10, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorAttendance" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.3} />
                <stop offset="100%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>

            <XAxis
              dataKey="month"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: "white",
                border: "1px solid #e2e8f0",
                borderRadius: "0.5rem",
              }}
              formatter={(value: number) => [`${value}%`, "Attendance"]}
            />
            <Area
              type="monotone"
              dataKey="attendance"
              stroke="none"
              fill="url(#colorAttendance)"
            />
            <Line
              type="monotone"
              dataKey="attendance"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={{ r: 4 }}
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
```

### `components/dashboard/student-performance-summary.tsx`

This component is now much simpler. It no longer fetches or calculates data, but instead receives a `period` prop and displays the corresponding mock data.

```tsx
"use client"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Cell,
  Rectangle,
  type RectangleProps,
} from "recharts";
import {
  GradeDistribution,
  SubjectScore,
  gradeDistributionData,
  subjectScoreData
} from "@/lib/mock-data";
import { ValueType } from "recharts/types/component/DefaultTooltipContent";

const GRADE_COLORS = ['#2dd4bf', '#3b82f6', '#fbbd23', '#f87171', '#ef4444'];

interface CustomTooltipProps {
  active?: boolean;
  payload?: { value: ValueType }[];
  label?: string;
}

const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {
  if (active && payload && payload.length) {
    return (
      <div className="p-2 text-sm rounded-md border bg-popover text-popover-foreground shadow-md glass-card">
        <p className="font-bold">{`Grade ${label}`}</p>
        <p>{`Number of Students: ${payload[0].value}`}</p>
      </div>
    );
  }
  return null;
};

const ActiveBar = (props: RectangleProps) => {
  const { x = 0, y = 0, width = 0, height = 0, ...rest } = props;
  
  return <Rectangle {...rest} x={x} width={width} height={height + 5} y={y - 5} />;
};


const GradeDistributionChart = ({ data }: { data: GradeDistribution[] }) => (
  <div className="h-56">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data} margin={{ top: 10, right: 10, left: -15, bottom: 5 }}>
        <XAxis dataKey="grade" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} allowDecimals={false}/>
        <Tooltip
          cursor={false}
          content={<CustomTooltip />}
        />
        <Bar dataKey="count" radius={[6, 6, 0, 0]} activeBar={<ActiveBar />}>
          {data.map((_entry, index) => (
            <Cell key={`cell-${index}`} fill={GRADE_COLORS[index % GRADE_COLORS.length]} />
          ))}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const TopSubjectsList = ({ data }: { data: SubjectScore[] }) => (
  <Table>
    <TableHeader>
      <TableRow>
        <TableHead>Subject</TableHead>
        <TableHead className="text-right">Avg. Score</TableHead>
      </TableRow>
    </TableHeader>
    <TableBody>
      {data.sort((a, b) => b.averageScore - a.averageScore).slice(0, 5).map((subject) => (
        <TableRow key={subject.name} className="hover:bg-muted/50 text-sm">
          <TableCell className="font-medium capitalize">{subject.name.replace(/-/g, ' ')}</TableCell>
          <TableCell className="text-right">
            <Badge variant="secondary" className={
                subject.averageScore >= 90 ? "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300" :
                subject.averageScore >= 80 ? "bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-300" :
                "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300"
            }>
                {subject.averageScore.toFixed(1)}%
            </Badge>
          </TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

type Period = "this_term" | "last_term" | "full_year";

export function StudentPerformanceSummary({ period }: { period: Period }) {
  const currentGradeData = gradeDistributionData[period];
  const currentTopSubjectsData = subjectScoreData[period];


  return (
    <div className="rounded-lg border bg-card p-4 h-full flex flex-col gap-4">
      <div>
        <h3 className="font-semibold text-lg mb-2">Grade Distribution</h3>
        <GradeDistributionChart data={currentGradeData} />
      </div>
      <div className="border-t pt-2">
        <h3 className="font-semibold text-lg mb-2">Top Subjects</h3>
        <div className="overflow-auto">
          <TopSubjectsList data={currentTopSubjectsData} />
        </div>
      </div>
    </div>
  );
}
```