An elegant, responsive dashboard deserves a beautiful gradient. I've updated the background to match the one you provided and refactored the layout to be more mobile-friendly.

The main content cards have been restyled with a "glass" effect to complement the new vibrant background, making the entire interface more modern and cohesive. Charts and tables are now styled to be perfectly legible and theme-aware against the new backdrop.

### Updated Dashboard Layout

I've replaced the static layout with a fully responsive one using the more advanced `Sidebar` and `Header` components. The new layout features a collapsible sidebar for desktops and a sheet-based navigation menu for mobile devices, ensuring a great user experience on any screen size. The new gradient is applied to the entire page background.

```tsx
// app/(dashboard)/layout.tsx
"use client";

import { Sidebar } from "@/components/layout/sidebar";
import { Header } from "@/components/layout/header";
import { useSidebar } from "@/hooks/use-sidebar";
import { cn } from "@/lib/utils";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { isOpen } = useSidebar();

  return (
    <div className="min-h-screen w-full bg-gradient-to-r from-[#4DC9E6] to-[#3A4ED6]">
      <Sidebar />
      <div className={cn(
        "transition-all duration-300 ease-in-out",
        isOpen ? "lg:pl-64" : "lg:pl-20"
      )}>
        <Header />
        <main className="p-4 sm:p-6 lg:p-8">
          {children}
        </main>
      </div>
    </div>
  );
}
```

### Styled Content Cards

To better fit the new gradient background, I've updated the individual content cards and components to use the `glass-card` style, providing a consistent and visually appealing "glassmorphism" effect across the dashboard.

#### Stat Cards
The summary statistics cards are now styled to match the new aesthetic.

```tsx
// components/dashboard/stat-card.tsx
import { cn } from "@/lib/utils";

interface StatCardProps {
  title: string;
  value: string;
  change: string;
  isNegative?: boolean;
}

export function StatCard({ title, value, change, isNegative = false }: StatCardProps) {
  return (
    <div className="glass-card rounded-lg p-4">
      <p className="text-sm text-muted-foreground">{title}</p>
      <p className="text-2xl font-bold text-foreground my-1">{value}</p>
      <p
        className={cn(
          "text-xs font-semibold",
          isNegative ? "text-red-500" : "text-green-500"
        )}
      >
        {change}
      </p>
    </div>
  );
}
```

#### Charts
The charts now have a transparent, glass-like background and their text elements are styled to be readable in both light and dark modes.

```tsx
// components/dashboard/attendance-chart.tsx
"use client";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  defs,
  Area,
} from "recharts";
import { attendanceData } from "@/lib/mock-data";

export function AttendanceChart() {
  return (
    <div className="glass-card rounded-lg p-4 h-full flex flex-col">
      <h3 className="font-semibold text-lg mb-2">Monthly Attendance Trends</h3>
      <div className="flex-grow">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={attendanceData}
            margin={{ top: 5, right: 10, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorAttendance" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.3} />
                <stop offset="100%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>

            <XAxis
              dataKey="month"
              stroke="hsl(var(--muted-foreground))"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="hsl(var(--muted-foreground))"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: "hsl(var(--card))",
                border: "1px solid hsl(var(--border))",
                borderRadius: "0.5rem",
              }}
              formatter={(value: number) => [`${value}%`, "Attendance"]}
            />
            <Area
              type="monotone"
              dataKey="attendance"
              stroke="none"
              fill="url(#colorAttendance)"
            />
            <Line
              type="monotone"
              dataKey="attendance"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={{ r: 4 }}
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}
```

```tsx
// components/dashboard/student-performance-summary.tsx
"use client"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Cell,
} from "recharts";
import { gradeData, topSubjectsData } from "@/lib/mock-data";

const GRADE_COLORS = ['#2dd4bf', '#3b82f6', '#fbbd23', '#f87171', '#ef4444'];

const GradeDistributionChart = () => (
  <div className="h-56"> {/* Set a fixed height for the chart area */}
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={gradeData} margin={{ top: 5, right: 10, left: -15, bottom: 5 }}>
        <XAxis dataKey="grade" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
        <Tooltip
          cursor={{ fill: 'hsl(var(--muted))' }}
          contentStyle={{
            backgroundColor: 'hsl(var(--card))',
            border: '1px solid hsl(var(--border))',
            borderRadius: '0.5rem',
          }}
          formatter={(value: number) => [value, "Students"]}
        />
        <Bar dataKey="count" radius={[4, 4, 0, 0]}>
          {gradeData.map((_entry, index) => (
            <Cell key={`cell-${index}`} fill={GRADE_COLORS[index % GRADE_COLORS.length]} />
          ))}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const TopSubjectsList = () => (
  <Table>
    <TableHeader>
      <TableRow>
        <TableHead>Subject</TableHead>
        <TableHead className="text-right">Avg. Score</TableHead>
      </TableRow>
    </TableHeader>
    <TableBody>
      {topSubjectsData.sort((a, b) => b.averageScore - a.averageScore).map((subject) => (
        <TableRow key={subject.name} className="hover:bg-muted/50 text-sm">
          <TableCell className="font-medium">{subject.name}</TableCell>
          <TableCell className="text-right">
            <Badge variant="secondary" className={
                subject.averageScore >= 90 ? "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300" :
                subject.averageScore >= 80 ? "bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-300" :
                "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300"
            }>
                {subject.averageScore}%
            </Badge>
          </TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

export function StudentPerformanceSummary() {
  return (
    <div className="glass-card rounded-lg p-4 h-full flex flex-col gap-4">
      <div>
        <h3 className="font-semibold text-lg mb-2">Grade Distribution</h3>
        <GradeDistributionChart />
      </div>
      <div className="border-t pt-2">
        <h3 className="font-semibold text-lg mb-2">Top Subjects</h3>
        <div className="overflow-auto">
            <TopSubjectsList />
        </div>
      </div>
    </div>
  );
}
```

#### Tables
All data tables throughout the application now feature the consistent glass card styling.

```tsx
// components/features/course/course-table.tsx
// ... (imports)

// ... (SortableCourseRow component remains the same)

export function CourseTable({ courses, onEdit, onDelete, onInlineUpdate, onPreview }: { courses: Course[]; onEdit: (c: Course) => void; onDelete: (c: Course) => void; onInlineUpdate: (id: number, data: Partial<CourseSchema>) => void; onPreview: (c: Course) => void; }) {
  
  return (
    <div className="glass-card rounded-lg overflow-hidden">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]"><span className="sr-only">Drag</span></TableHead>
            <TableHead className="w-[80px]">Image</TableHead>
            <TableHead>Title</TableHead>
            <TableHead>Category</TableHead>
            <TableHead className="text-right w-[120px]">Tuition</TableHead>
            <TableHead className="text-right w-[120px]">Slots</TableHead>
            <TableHead className="w-[50px]"><span className="sr-only">Actions</span></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <SortableContext items={courses.map(c => c.id)} strategy={verticalListSortingStrategy}>
            {courses.length > 0 ? (
              courses.map((course) => <SortableCourseRow key={course.id} course={course} onEdit={onEdit} onDelete={onDelete} onPreview={onPreview} onInlineUpdate={onInlineUpdate} />)
            ) : (
              <TableRow><TableCell colSpan={7} className="h-24 text-center">No courses to display.</TableCell></TableRow>
            )}
          </SortableContext>
        </TableBody>
      </Table>
    </div>
  );
}
```

```tsx
// components/features/customer/customer-table.tsx
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { User } from "@/types/api.types";

export function CustomerTable({ customers }: { customers: User[] }) {
  return (
    <div className="glass-card rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              <TableHead>City</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {customers.map((user) => (
              <TableRow key={user.id}>
                <TableCell className="font-medium">{user.firstName} {user.lastName}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.phone}</TableCell>
                <TableCell>{user.address.city}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
    </div>
  );
}
```

```tsx
// components/features/enrollment/enrollment-table.tsx
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Cart } from "@/types/api.types";
import { formatCurrency } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";

export function EnrollmentTable({ enrollments }: { enrollments: Cart[] }) {
  return (
    <div className="glass-card rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[120px]">Enrollment ID</TableHead>
              <TableHead>Student ID</TableHead>
              <TableHead className="text-center">Courses</TableHead>
              <TableHead className="text-center">Total Items</TableHead>
              <TableHead className="text-right">Total Price</TableHead>
              <TableHead className="text-right">Discounted Price</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {enrollments.map((cart) => (
              <TableRow key={cart.id}>
                <TableCell className="font-medium">#{cart.id}</TableCell>
                <TableCell>User #{cart.userId}</TableCell>
                <TableCell className="text-center">{cart.totalProducts}</TableCell>
                <TableCell className="text-center">{cart.totalQuantity}</TableCell>
                <TableCell className="text-right">{formatCurrency(cart.total)}</TableCell>
                <TableCell className="text-right font-semibold">
                  <Badge variant="default" className="button-gradient">{formatCurrency(cart.discountedTotal)}</Badge>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
    </div>
  );
}
```

### Legacy Page Update
Finally, I updated the old dashboard page (`app/page.tsx`) to also use the new gradient and card styling for consistency, although the new layout in `app/(dashboard)/*` is the primary, responsive one.

```tsx
// app/page.tsx
import { StudentDashboardSidebar } from "@/components/dashboard/student-sidebar";
import { StudentDashboardHeaderBar } from "@/components/dashboard/student-header-bar";
import { StatCard } from "@/components/dashboard/stat-card";
import { AttendanceChart } from "@/components/dashboard/attendance-chart";
import { StudentPerformanceSummary } from "@/components/dashboard/student-performance-summary";
import { getTotalStudents } from "@/lib/api";

export default async function StudentDashboardPage() {
  const totalStudents = await getTotalStudents();

  return (
    <main className="min-h-screen w-full bg-gradient-to-r from-[#4DC9E6] to-[#3A4ED6] p-8">
      <div className="glass-card mx-auto w-full max-w-7xl rounded-2xl p-6 lg:p-8 flex gap-8">
        
        <StudentDashboardSidebar />

        <div className="flex-1 flex flex-col gap-8">
          
          <StudentDashboardHeaderBar />

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
             <StatCard title="Total Students" value={totalStudents.toString()} change="+5%" />
             <StatCard title="Pass Rate" value="85.3%" change="-1.2%" isNegative />
             <StatCard title="Assignments Completed" value="76%" change="+3.4%" />
             <StatCard title="Avg. Attendance" value="91%" change="This Term" />
          </div>

          <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
            <div className="xl:col-span-3">
              <AttendanceChart /> 
            </div>

            <div className="xl:col-span-2">
              <StudentPerformanceSummary /> 
            </div>
          </div>

        </div>
      </div>
    </main>
  );
}
```