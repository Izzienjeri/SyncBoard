Of course. I can fix the "Unexpected any" linting errors. Here is an explanation of the problem and the solution I've implemented.

### Problem Explanation: `no-explicit-any`

The `no-explicit-any` error is flagged by the TypeScript linter when the `any` type is used explicitly. While `any` can seem like an easy fix, it essentially turns off TypeScript's type-checking for that variable, which defeats the purpose of using TypeScript. It removes the safety net that prevents type-related bugs.

In the provided code, `any` was used in `catch` blocks to handle errors:

```typescript
// Example from before the fix
try {
  // ... some code that might fail
} catch (err: any) { // <-- The use of 'any' here is the problem
  setError(err.message); 
}
```

This is problematic because there's no guarantee that the `err` object caught will actually have a `.message` property. If it doesn't, the code would crash at runtime.

### The Solution: Using `unknown`

The modern, type-safe approach is to type the caught error as `unknown`. The `unknown` type is like a stricter version of `any`â€”it can hold any value, but you can't perform any operations on it without first proving what type it is through type-checking (also known as type narrowing).

I've updated the code to:

1.  Type the caught error as `unknown`.
2.  Use an `instanceof Error` check to safely verify that the caught object is a standard JavaScript `Error`.
3.  Only after this check do I access the `.message` property, ensuring type safety and preventing potential runtime errors.
4.  I also fixed an unescaped apostrophe in `add-user-modal.tsx` for correct JSX rendering.

Here are the updated files with the fixes:

### Modified Files

```ts
// === lib/api.ts ===
import { User, UsersApiResponse } from "@/types/api.types";
import { allSubjects, mockTeachers, subjectScoreData, subjectTeacherMapping } from "./mock-data";

const DUMMY_JSON_URL = "https://dummyjson.com";

export async function getUsers(url: string): Promise<UsersApiResponse> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("Failed to fetch users");
    }
    const data: UsersApiResponse = await res.json();
    return data;
  } catch {
    throw new Error("Could not retrieve users. Please try again later.");
  }
}

export async function addUser(userData: Partial<User>): Promise<User> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users/add`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(userData),
    });
    if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Failed to add user');
    }
    return await res.json();
  } catch (e: unknown) {
    if (e instanceof Error) {
      throw new Error(e.message || "Could not add the user.");
    }
    throw new Error("An unknown error occurred while adding the user.");
  }
}

export async function updateUser(userId: number, userData: Partial<User>): Promise<User> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users/${userId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(userData),
    });
    if (!res.ok) throw new Error("Failed to update user");
    return await res.json();
  } catch {
    throw new Error("Could not update the user.");
  }
}

export async function deleteUser(userId: number): Promise<{ id: number, isDeleted: boolean }> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users/${userId}`, {
      method: "DELETE",
    });
    if (!res.ok) throw new Error("Failed to delete user");
    return await res.json();
  } catch {
    throw new Error("Could not delete the user.");
  }
}

export async function getTotalStudents(): Promise<number> {
  return 100;
}

export async function getTotalTeachers(): Promise<number> {
  try {
    const res = await fetch(`${DUMMY_JSON_URL}/users?limit=0`);
    if (!res.ok) {
      return 50;
    }
    const data: UsersApiResponse = await res.json();
    return data.total > 100 ? data.total - 100 : 0;
  } catch (e) {
    console.error("Failed to get total teachers:", e);
    return 50;
  }
}

export async function getSubjects(): Promise<string[]> {
  return Promise.resolve(allSubjects);
}

export async function addSubject(subjectName: string): Promise<string> {
  return new Promise((resolve, reject) => {
    const formattedName = subjectName.toLowerCase().replace(/\s+/g, '-');
    if (allSubjects.includes(formattedName)) {
      reject(new Error("Subject already exists."));
      return;
    }

    allSubjects.push(formattedName);
    
    const periods = ['this_term', 'last_term', 'full_year'];
    periods.forEach(period => {
      subjectScoreData[period].push({
        name: formattedName,
        averageScore: Math.floor(Math.random() * (95 - 70 + 1) + 70),
      });
    });

    if (mockTeachers.length > 0) {
        const randomTeacherId = mockTeachers[Math.floor(Math.random() * mockTeachers.length)].id;
        subjectTeacherMapping[formattedName] = [randomTeacherId];
    }

    resolve(formattedName);
  });
}
```

```tsx
// === components/features/user/add-user-modal.tsx ===
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { User } from "@/types/api.types";

interface AddUserModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onUserAdded: (newUser: User) => void;
  userType: 'student' | 'teacher';
  addUserApi: (userData: Partial<User>) => Promise<User>;
}

export function AddUserModal({ isOpen, onOpenChange, onUserAdded, userType, addUserApi }: AddUserModalProps) {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({ ...prev, [id]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    if (!formData.firstName || !formData.lastName || !formData.email) {
        setError("First Name, Last Name, and Email are required.");
        return;
    }
    
    setIsSubmitting(true);
    try {
      const newUser = await addUserApi(formData);
      onUserAdded(newUser);
      onOpenChange(false);
      setTimeout(() => setFormData({ firstName: "", lastName: "", email: "", phone: "" }), 300);
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message || `Failed to add ${userType}. Please try again.`);
      } else {
        setError(`An unknown error occurred while adding the ${userType}.`);
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Add New {userType === 'student' ? 'Student' : 'Teacher'}</DialogTitle>
          <DialogDescription>
            Enter the details for the new {userType}. Click save when you&apos;re done.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="firstName" className="text-right">First Name</Label>
              <Input id="firstName" value={formData.firstName} onChange={handleChange} className="col-span-3" />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="lastName" className="text-right">Last Name</Label>
              <Input id="lastName" value={formData.lastName} onChange={handleChange} className="col-span-3" />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="email" className="text-right">Email</Label>
              <Input id="email" type="email" value={formData.email} onChange={handleChange} className="col-span-3" />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="phone" className="text-right">Phone</Label>
              <Input id="phone" value={formData.phone} onChange={handleChange} className="col-span-3" />
            </div>
            {error && <p className="text-sm text-destructive text-center col-span-4">{error}</p>}
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isSubmitting}>Cancel</Button>
            <Button type="submit" className="button-gradient" disabled={isSubmitting}>
              {isSubmitting ? 'Saving...' : 'Save User'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
```

```tsx
// === components/features/subject/add-subject-modal.tsx ===
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

interface AddSubjectModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onSubjectAdded: (newSubject: string) => void;
  addSubjectApi: (subjectName: string) => Promise<string>;
}

export function AddSubjectModal({ isOpen, onOpenChange, onSubjectAdded, addSubjectApi }: AddSubjectModalProps) {
  const [subjectName, setSubjectName] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    if (!subjectName.trim()) {
        setError("Subject name cannot be empty.");
        return;
    }

    setIsSubmitting(true);
    try {
      const newSubject = await addSubjectApi(subjectName);
      onSubjectAdded(newSubject);
      onOpenChange(false);
      setTimeout(() => setSubjectName(""), 300);
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message || "Failed to add subject.");
      } else {
        setError("An unknown error occurred while adding the subject.");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-card/90 backdrop-blur-xl">
        <DialogHeader>
          <DialogTitle>Add New Subject</DialogTitle>
          <DialogDescription>
            Enter the name for the new subject.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="subjectName" className="text-right">Name</Label>
              <Input id="subjectName" value={subjectName} onChange={(e) => setSubjectName(e.target.value)} className="col-span-3" />
            </div>
            {error && <p className="text-sm text-destructive text-center col-span-4">{error}</p>}
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isSubmitting}>Cancel</Button>
            <Button type="submit" className="button-gradient" disabled={isSubmitting}>
              {isSubmitting ? 'Saving...' : 'Save Subject'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
```